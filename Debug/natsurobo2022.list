
natsurobo2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008828  08008828  00018828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c64  08008c64  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c6c  08008c6c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c6c  08008c6c  00018c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08008c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000210  08008e84  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008e84  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d9f  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b76  00000000  00000000  00031fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00034b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00035800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cf8  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b0b  00000000  00000000  0005c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfde0  00000000  00000000  0006cb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  0014c9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800880c 	.word	0x0800880c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800880c 	.word	0x0800880c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MPU9250_Read_Byte>:
 */

#include "MPU9250.h"

uint8_t MPU9250_Read_Byte(uint8_t reg)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data[2];
    uint8_t tx_data[2];

    tx_data[0] = reg | 0x80;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	723b      	strb	r3, [r7, #8]
    tx_data[1] = 0x00;  // dummy
 8000f94:	2300      	movs	r3, #0
 8000f96:	727b      	strb	r3, [r7, #9]

    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <MPU9250_Read_Byte+0x4c>)
 8000f9e:	f002 f841 	bl	8003024 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, tx_data, rx_data, 2, 1);
 8000fa2:	f107 020c 	add.w	r2, r7, #12
 8000fa6:	f107 0108 	add.w	r1, r7, #8
 8000faa:	2301      	movs	r3, #1
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MPU9250_Read_Byte+0x50>)
 8000fb2:	f002 fe44 	bl	8003c3e <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MPU9250_Read_Byte+0x4c>)
 8000fbc:	f002 f832 	bl	8003024 <HAL_GPIO_WritePin>

    return rx_data[1];
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	200002a8 	.word	0x200002a8

08000fd4 <MPU9250_Write_Byte>:

void MPU9250_Write_Byte(uint8_t reg, uint8_t data)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
  uint8_t rx_data[2];
  uint8_t tx_data[2];

  tx_data[0] = reg & 0x7F;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	723b      	strb	r3, [r7, #8]
  tx_data[1] = data;  // write data
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	727b      	strb	r3, [r7, #9]

  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <MPU9250_Write_Byte+0x50>)
 8000ff8:	f002 f814 	bl	8003024 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi3, tx_data, rx_data, 2, 1);
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	f107 0108 	add.w	r1, r7, #8
 8001004:	2301      	movs	r3, #1
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <MPU9250_Write_Byte+0x54>)
 800100c:	f002 fe17 	bl	8003c3e <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2104      	movs	r1, #4
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <MPU9250_Write_Byte+0x50>)
 8001016:	f002 f805 	bl	8003024 <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020c00 	.word	0x40020c00
 8001028:	200002a8 	.word	0x200002a8

0800102c <MPU9250_Init>:

void MPU9250_Init()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	MPU9250_Write_Byte(PWR_MGMT_1, 0x00);
 8001030:	2100      	movs	r1, #0
 8001032:	206b      	movs	r0, #107	; 0x6b
 8001034:	f7ff ffce 	bl	8000fd4 <MPU9250_Write_Byte>
	MPU9250_Write_Byte(PWR_MGMT_1, 0x01);
 8001038:	2101      	movs	r1, #1
 800103a:	206b      	movs	r0, #107	; 0x6b
 800103c:	f7ff ffca 	bl	8000fd4 <MPU9250_Write_Byte>
	MPU9250_Write_Byte(PWR_MGMT_2, 0x00);
 8001040:	2100      	movs	r1, #0
 8001042:	206c      	movs	r0, #108	; 0x6c
 8001044:	f7ff ffc6 	bl	8000fd4 <MPU9250_Write_Byte>
	MPU9250_Write_Byte(CONFIG, 0x03);
 8001048:	2103      	movs	r1, #3
 800104a:	201a      	movs	r0, #26
 800104c:	f7ff ffc2 	bl	8000fd4 <MPU9250_Write_Byte>
	MPU9250_Write_Byte(GYRO_CONFIG, 0x18);
 8001050:	2118      	movs	r1, #24
 8001052:	201b      	movs	r0, #27
 8001054:	f7ff ffbe 	bl	8000fd4 <MPU9250_Write_Byte>
	MPU9250_Write_Byte(ACCEL_CONFIG, 0x18);
 8001058:	2118      	movs	r1, #24
 800105a:	201c      	movs	r0, #28
 800105c:	f7ff ffba 	bl	8000fd4 <MPU9250_Write_Byte>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <MPU9250_Calibration>:

void MPU9250_Calibration()
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
	gz_offset = 0;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MPU9250_Calibration+0x8c>)
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
	for(int i=0; i<1000; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e028      	b.n	80010ca <MPU9250_Calibration+0x66>
		int16_t raw = (int16_t)((int16_t)(MPU9250_Read_Byte(GYRO_ZOUT_H) << 8) | MPU9250_Read_Byte(GYRO_ZOUT_L));
 8001078:	2047      	movs	r0, #71	; 0x47
 800107a:	f7ff ff81 	bl	8000f80 <MPU9250_Read_Byte>
 800107e:	4603      	mov	r3, r0
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21c      	sxth	r4, r3
 8001084:	2048      	movs	r0, #72	; 0x48
 8001086:	f7ff ff7b 	bl	8000f80 <MPU9250_Read_Byte>
 800108a:	4603      	mov	r3, r0
 800108c:	b21b      	sxth	r3, r3
 800108e:	4323      	orrs	r3, r4
 8001090:	817b      	strh	r3, [r7, #10]
		float gz = (float)(raw) / 16.4f;
 8001092:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109e:	eddf 6a15 	vldr	s13, [pc, #84]	; 80010f4 <MPU9250_Calibration+0x90>
 80010a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a6:	edc7 7a01 	vstr	s15, [r7, #4]
		gz_offset += gz;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MPU9250_Calibration+0x8c>)
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MPU9250_Calibration+0x8c>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f001 fc54 	bl	800296c <HAL_Delay>
	for(int i=0; i<1000; i++){
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010d0:	dbd2      	blt.n	8001078 <MPU9250_Calibration+0x14>
	}
	gz_offset /= 1000.0f;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MPU9250_Calibration+0x8c>)
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80010f8 <MPU9250_Calibration+0x94>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <MPU9250_Calibration+0x8c>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd90      	pop	{r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000029c 	.word	0x2000029c
 80010f4:	41833333 	.word	0x41833333
 80010f8:	447a0000 	.word	0x447a0000

080010fc <MPU9250_Read_GyroZ>:

float MPU9250_Read_GyroZ()
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((int16_t)(MPU9250_Read_Byte(GYRO_ZOUT_H) << 8) | MPU9250_Read_Byte(GYRO_ZOUT_L));
 8001102:	2047      	movs	r0, #71	; 0x47
 8001104:	f7ff ff3c 	bl	8000f80 <MPU9250_Read_Byte>
 8001108:	4603      	mov	r3, r0
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21c      	sxth	r4, r3
 800110e:	2048      	movs	r0, #72	; 0x48
 8001110:	f7ff ff36 	bl	8000f80 <MPU9250_Read_Byte>
 8001114:	4603      	mov	r3, r0
 8001116:	b21b      	sxth	r3, r3
 8001118:	4323      	orrs	r3, r4
 800111a:	80fb      	strh	r3, [r7, #6]
	float gz = ((float)(raw) / 16.4f) - gz_offset;
 800111c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001150 <MPU9250_Read_GyroZ+0x54>
 800112c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MPU9250_Read_GyroZ+0x58>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	edc7 7a00 	vstr	s15, [r7]
	return gz;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	41833333 	.word	0x41833333
 8001154:	2000029c 	.word	0x2000029c

08001158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <MX_GPIO_Init+0x138>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a46      	ldr	r2, [pc, #280]	; (8001290 <MX_GPIO_Init+0x138>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b44      	ldr	r3, [pc, #272]	; (8001290 <MX_GPIO_Init+0x138>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <MX_GPIO_Init+0x138>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <MX_GPIO_Init+0x138>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <MX_GPIO_Init+0x138>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_GPIO_Init+0x138>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a38      	ldr	r2, [pc, #224]	; (8001290 <MX_GPIO_Init+0x138>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_GPIO_Init+0x138>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <MX_GPIO_Init+0x138>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a31      	ldr	r2, [pc, #196]	; (8001290 <MX_GPIO_Init+0x138>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <MX_GPIO_Init+0x138>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <MX_GPIO_Init+0x138>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <MX_GPIO_Init+0x138>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_GPIO_Init+0x138>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIR_Pin|CUBE_Pin|AGARI_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2107      	movs	r1, #7
 80011fe:	4825      	ldr	r0, [pc, #148]	; (8001294 <MX_GPIO_Init+0x13c>)
 8001200:	f001 ff10 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2120      	movs	r1, #32
 8001208:	4823      	ldr	r0, [pc, #140]	; (8001298 <MX_GPIO_Init+0x140>)
 800120a:	f001 ff0b 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	4822      	ldr	r0, [pc, #136]	; (800129c <MX_GPIO_Init+0x144>)
 8001214:	f001 ff06 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4819      	ldr	r0, [pc, #100]	; (8001294 <MX_GPIO_Init+0x13c>)
 8001230:	f001 fd64 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = AIR_Pin|CUBE_Pin|AGARI_Pin;
 8001234:	2307      	movs	r3, #7
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <MX_GPIO_Init+0x13c>)
 800124c:	f001 fd56 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001250:	2320      	movs	r3, #32
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_GPIO_Init+0x140>)
 8001268:	f001 fd48 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800126c:	2304      	movs	r3, #4
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_GPIO_Init+0x144>)
 8001284:	f001 fd3a 	bl	8002cfc <HAL_GPIO_Init>

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40020800 	.word	0x40020800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020c00 	.word	0x40020c00

080012a0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	621a      	str	r2, [r3, #32]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001358:	b09c      	sub	sp, #112	; 0x70
 800135a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800135c:	4bce      	ldr	r3, [pc, #824]	; (8001698 <main+0x344>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f005 f833 	bl	80063d0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136a:	f001 fa8d 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136e:	f000 fbdd 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001372:	f7ff fef1 	bl	8001158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001376:	f001 f9af 	bl	80026d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800137a:	f001 f983 	bl	8002684 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800137e:	f000 ff6b 	bl	8002258 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001382:	f000 fce5 	bl	8001d50 <MX_SPI3_Init>
  MX_TIM5_Init();
 8001386:	f001 f903 	bl	8002590 <MX_TIM5_Init>
  MX_TIM3_Init();
 800138a:	f001 f829 	bl	80023e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800138e:	f001 f893 	bl	80024b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8001392:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001396:	f7ff ff83 	bl	80012a0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 800139a:	2101      	movs	r1, #1
 800139c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013a0:	f7ff ff8e 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 80013a4:	2110      	movs	r1, #16
 80013a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013aa:	f7ff ff89 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013b6:	f7ff ff83 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013c2:	f7ff ff7d 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH1(TIM2, 1000);
 80013c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013ce:	f7ff ff88 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM2, 1000);
 80013d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013da:	f7ff ff90 	bl	80012fe <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM2, 1000);
 80013de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013e6:	f7ff ff98 	bl	800131a <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIM2, 1000);
 80013ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013f2:	f7ff ffa0 	bl	8001336 <LL_TIM_OC_SetCompareCH4>

  LL_TIM_EnableCounter(TIM3);
 80013f6:	48a9      	ldr	r0, [pc, #676]	; (800169c <main+0x348>)
 80013f8:	f7ff ff52 	bl	80012a0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80013fc:	2101      	movs	r1, #1
 80013fe:	48a7      	ldr	r0, [pc, #668]	; (800169c <main+0x348>)
 8001400:	f7ff ff5e 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH1(TIM3, 145);
 8001404:	2191      	movs	r1, #145	; 0x91
 8001406:	48a5      	ldr	r0, [pc, #660]	; (800169c <main+0x348>)
 8001408:	f7ff ff6b 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_EnableCounter(TIM4);
 800140c:	48a4      	ldr	r0, [pc, #656]	; (80016a0 <main+0x34c>)
 800140e:	f7ff ff47 	bl	80012a0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8001412:	2101      	movs	r1, #1
 8001414:	48a2      	ldr	r0, [pc, #648]	; (80016a0 <main+0x34c>)
 8001416:	f7ff ff53 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH1(TIM4, 145);
 800141a:	2191      	movs	r1, #145	; 0x91
 800141c:	48a0      	ldr	r0, [pc, #640]	; (80016a0 <main+0x34c>)
 800141e:	f7ff ff60 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>

  LL_TIM_EnableCounter(TIM5);
 8001422:	48a0      	ldr	r0, [pc, #640]	; (80016a4 <main+0x350>)
 8001424:	f7ff ff3c 	bl	80012a0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8001428:	2101      	movs	r1, #1
 800142a:	489e      	ldr	r0, [pc, #632]	; (80016a4 <main+0x350>)
 800142c:	f7ff ff48 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8001430:	2110      	movs	r1, #16
 8001432:	489c      	ldr	r0, [pc, #624]	; (80016a4 <main+0x350>)
 8001434:	f7ff ff44 	bl	80012c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH1(TIM5, 1000);
 8001438:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800143c:	4899      	ldr	r0, [pc, #612]	; (80016a4 <main+0x350>)
 800143e:	f7ff ff50 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM5, 1000);
 8001442:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001446:	4897      	ldr	r0, [pc, #604]	; (80016a4 <main+0x350>)
 8001448:	f7ff ff59 	bl	80012fe <LL_TIM_OC_SetCompareCH2>

  MPU9250_Init();
 800144c:	f7ff fdee 	bl	800102c <MPU9250_Init>
  printf("Calibration\r\n");
 8001450:	4895      	ldr	r0, [pc, #596]	; (80016a8 <main+0x354>)
 8001452:	f004 ffb5 	bl	80063c0 <puts>
  MPU9250_Calibration();
 8001456:	f7ff fe05 	bl	8001064 <MPU9250_Calibration>

  HAL_UART_Receive_IT(&huart1, SBDBTRxData, 8);
 800145a:	2208      	movs	r2, #8
 800145c:	4993      	ldr	r1, [pc, #588]	; (80016ac <main+0x358>)
 800145e:	4894      	ldr	r0, [pc, #592]	; (80016b0 <main+0x35c>)
 8001460:	f002 ff39 	bl	80042d6 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2120      	movs	r1, #32
 8001468:	4892      	ldr	r0, [pc, #584]	; (80016b4 <main+0x360>)
 800146a:	f001 fddb 	bl	8003024 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
	  static int count;

	  static float theta;
	  static float ref = 0;
	  theta += MPU9250_Read_GyroZ()*0.013f;
 800146e:	f7ff fe45 	bl	80010fc <MPU9250_Read_GyroZ>
 8001472:	eef0 7a40 	vmov.f32	s15, s0
 8001476:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80016b8 <main+0x364>
 800147a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800147e:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <main+0x368>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <main+0x368>)
 800148a:	edc3 7a00 	vstr	s15, [r3]

	  float Lr = sqrt(LX*LX+LY*LY);
 800148e:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <main+0x36c>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <main+0x36c>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149e:	4b89      	ldr	r3, [pc, #548]	; (80016c4 <main+0x370>)
 80014a0:	edd3 6a00 	vldr	s13, [r3]
 80014a4:	4b87      	ldr	r3, [pc, #540]	; (80016c4 <main+0x370>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	ee17 0a90 	vmov	r0, s15
 80014b6:	f7ff f867 	bl	8000588 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b10 	vmov	d0, r2, r3
 80014c2:	f007 f8bb 	bl	800863c <sqrt>
 80014c6:	ec53 2b10 	vmov	r2, r3, d0
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb8b 	bl	8000be8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
	  float Rr = sqrt(RX*RX+RY*RY);
 80014d6:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <main+0x374>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <main+0x374>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e6:	4b79      	ldr	r3, [pc, #484]	; (80016cc <main+0x378>)
 80014e8:	edd3 6a00 	vldr	s13, [r3]
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <main+0x378>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	ee17 0a90 	vmov	r0, s15
 80014fe:	f7ff f843 	bl	8000588 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	ec43 2b10 	vmov	d0, r2, r3
 800150a:	f007 f897 	bl	800863c <sqrt>
 800150e:	ec53 2b10 	vmov	r2, r3, d0
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb67 	bl	8000be8 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	643b      	str	r3, [r7, #64]	; 0x40

	  if (Lr > 64.0f) {
 800151e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001522:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80016d0 <main+0x37c>
 8001526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dd3f      	ble.n	80015b0 <main+0x25c>
		  LX = LX * (64.0f/Lr);
 8001530:	eddf 6a67 	vldr	s13, [pc, #412]	; 80016d0 <main+0x37c>
 8001534:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <main+0x36c>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001546:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <main+0x36c>)
 8001548:	edc3 7a00 	vstr	s15, [r3]
		  LY = LY * (64.0f/Lr);
 800154c:	eddf 6a60 	vldr	s13, [pc, #384]	; 80016d0 <main+0x37c>
 8001550:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <main+0x370>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <main+0x370>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
		  Lr = sqrt(LX*LX+LY*LY);
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <main+0x36c>)
 800156a:	ed93 7a00 	vldr	s14, [r3]
 800156e:	4b54      	ldr	r3, [pc, #336]	; (80016c0 <main+0x36c>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001578:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <main+0x370>)
 800157a:	edd3 6a00 	vldr	s13, [r3]
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <main+0x370>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	ee17 0a90 	vmov	r0, s15
 8001590:	f7fe fffa 	bl	8000588 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	ec43 2b10 	vmov	d0, r2, r3
 800159c:	f007 f84e 	bl	800863c <sqrt>
 80015a0:	ec53 2b10 	vmov	r2, r3, d0
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fb1e 	bl	8000be8 <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
	  }
	  if (Rr > 64.0f) {
 80015b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80015b4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80016d0 <main+0x37c>
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dd3f      	ble.n	8001642 <main+0x2ee>
		  RX = RX * (64.0f/Rr);
 80015c2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80016d0 <main+0x37c>
 80015c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80015ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <main+0x374>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <main+0x374>)
 80015da:	edc3 7a00 	vstr	s15, [r3]
		  RY = RY * (64.0f/Rr);
 80015de:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80016d0 <main+0x37c>
 80015e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80015e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <main+0x378>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <main+0x378>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]
		  Rr = sqrt(RX*RX+RY*RY);
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <main+0x374>)
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <main+0x374>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <main+0x378>)
 800160c:	edd3 6a00 	vldr	s13, [r3]
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <main+0x378>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7fe ffb1 	bl	8000588 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	ec43 2b10 	vmov	d0, r2, r3
 800162e:	f007 f805 	bl	800863c <sqrt>
 8001632:	ec53 2b10 	vmov	r2, r3, d0
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fad5 	bl	8000be8 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	643b      	str	r3, [r7, #64]	; 0x40
	  }

	  const float a = 0.155f;
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <main+0x380>)
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
	  const float b = 0.155f;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <main+0x380>)
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
	  float vx = LX*0.0f;
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <main+0x36c>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80016d8 <main+0x384>
 8001654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001658:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  //float vx = LY*10.0f;
	  float vy = LY*0.0f;
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <main+0x370>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80016d8 <main+0x384>
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  //float vy = LX*(-10.0f);
	  float omega;
	  if (buttonsIsPressed[0]) {
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <main+0x388>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <main+0x328>
		  vy = 200.0f;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <main+0x38c>)
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
 800167a:	e03b      	b.n	80016f4 <main+0x3a0>
		  //vx = 200.0f;
	  } else if (buttonsIsPressed[1]) {
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <main+0x388>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <main+0x336>
		  vx = 200.0f;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <main+0x38c>)
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001688:	e034      	b.n	80016f4 <main+0x3a0>
		  //vy = -200.0f;
	  } else if (buttonsIsPressed[2]) {
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <main+0x388>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d02a      	beq.n	80016e8 <main+0x394>
		  vy = -200.0f;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <main+0x390>)
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
 8001696:	e02d      	b.n	80016f4 <main+0x3a0>
 8001698:	2000003c 	.word	0x2000003c
 800169c:	40000400 	.word	0x40000400
 80016a0:	40000800 	.word	0x40000800
 80016a4:	40000c00 	.word	0x40000c00
 80016a8:	08008828 	.word	0x08008828
 80016ac:	200002a0 	.word	0x200002a0
 80016b0:	20000300 	.word	0x20000300
 80016b4:	40020000 	.word	0x40020000
 80016b8:	3c54fdf4 	.word	0x3c54fdf4
 80016bc:	2000027c 	.word	0x2000027c
 80016c0:	2000026c 	.word	0x2000026c
 80016c4:	20000270 	.word	0x20000270
 80016c8:	20000274 	.word	0x20000274
 80016cc:	20000278 	.word	0x20000278
 80016d0:	42800000 	.word	0x42800000
 80016d4:	3e1eb852 	.word	0x3e1eb852
 80016d8:	00000000 	.word	0x00000000
 80016dc:	2000022c 	.word	0x2000022c
 80016e0:	43480000 	.word	0x43480000
 80016e4:	c3480000 	.word	0xc3480000
		  //vx = -200.0f;
	  } else if (buttonsIsPressed[3]) {
 80016e8:	4bc3      	ldr	r3, [pc, #780]	; (80019f8 <main+0x6a4>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <main+0x3a0>
		  vx = -200.0f;
 80016f0:	4bc2      	ldr	r3, [pc, #776]	; (80019fc <main+0x6a8>)
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  //vy = 200.0f;
	  } else {
		  ;
	  }
	  if (buttonsIsPressed[12]) {
 80016f4:	4bc0      	ldr	r3, [pc, #768]	; (80019f8 <main+0x6a4>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00a      	beq.n	8001712 <main+0x3be>
		  //omega = 700;
		  ref += 0.5f;
 80016fc:	4bc0      	ldr	r3, [pc, #768]	; (8001a00 <main+0x6ac>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170a:	4bbd      	ldr	r3, [pc, #756]	; (8001a00 <main+0x6ac>)
 800170c:	edc3 7a00 	vstr	s15, [r3]
 8001710:	e00d      	b.n	800172e <main+0x3da>
	  } else if (buttonsIsPressed[13]) {
 8001712:	4bb9      	ldr	r3, [pc, #740]	; (80019f8 <main+0x6a4>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <main+0x3da>
		  //omega = -700;
		  ref -= 0.5f;
 800171a:	4bb9      	ldr	r3, [pc, #740]	; (8001a00 <main+0x6ac>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001728:	4bb5      	ldr	r3, [pc, #724]	; (8001a00 <main+0x6ac>)
 800172a:	edc3 7a00 	vstr	s15, [r3]
	  } else {
		  //omega = 0;
	  }
	  omega = (ref-theta)*200;
 800172e:	4bb4      	ldr	r3, [pc, #720]	; (8001a00 <main+0x6ac>)
 8001730:	ed93 7a00 	vldr	s14, [r3]
 8001734:	4bb3      	ldr	r3, [pc, #716]	; (8001a04 <main+0x6b0>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001a08 <main+0x6b4>
 8001742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001746:	edc7 7a08 	vstr	s15, [r7, #32]

	  float v[4];
	  v[0] = -vx + vy + (a+b)*omega;
 800174a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800174e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800175a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800175e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001762:	edd7 7a08 	vldr	s15, [r7, #32]
 8001766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	edc7 7a04 	vstr	s15, [r7, #16]
	  v[1] = +vx + vy - (a+b)*omega;
 8001772:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001776:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800177a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001782:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001786:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800178a:	edd7 7a08 	vldr	s15, [r7, #32]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	edc7 7a05 	vstr	s15, [r7, #20]
	  v[2] = -vx + vy - (a+b)*omega;
 800179a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800179e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017be:	edc7 7a06 	vstr	s15, [r7, #24]
	  v[3] = +vx + vy + (a+b)*omega;
 80017c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80017c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80017ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017da:	edd7 7a08 	vldr	s15, [r7, #32]
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e6:	edc7 7a07 	vstr	s15, [r7, #28]

	  float max = fabs(v[0]);
 80017ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ee:	eef0 7ae7 	vabs.f32	s15, s15
 80017f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  for (int i=0; i<4; i++){
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
 80017fa:	e01f      	b.n	800183c <main+0x4e8>
		  if (fabs(v[i]) > max) {
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001804:	4413      	add	r3, r2
 8001806:	3b38      	subs	r3, #56	; 0x38
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eef0 7ae7 	vabs.f32	s15, s15
 8001810:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d50b      	bpl.n	8001836 <main+0x4e2>
			  max = fabs(v[i]);
 800181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001826:	4413      	add	r3, r2
 8001828:	3b38      	subs	r3, #56	; 0x38
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	eef0 7ae7 	vabs.f32	s15, s15
 8001832:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  for (int i=0; i<4; i++){
 8001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001838:	3301      	adds	r3, #1
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
 800183c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183e:	2b03      	cmp	r3, #3
 8001840:	dddc      	ble.n	80017fc <main+0x4a8>
		  }
	  }
	  if (max > 1000) {
 8001842:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001846:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001a0c <main+0x6b8>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd20      	ble.n	8001896 <main+0x542>
		  for (int i=0; i<4; i++) {
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001858:	e01a      	b.n	8001890 <main+0x53c>
			  v[i] *= (1000/max);
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001862:	4413      	add	r3, r2
 8001864:	3b38      	subs	r3, #56	; 0x38
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8001a0c <main+0x6b8>
 800186e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001872:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001882:	4413      	add	r3, r2
 8001884:	3b38      	subs	r3, #56	; 0x38
 8001886:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=0; i<4; i++) {
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	3301      	adds	r3, #1
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	2b03      	cmp	r3, #3
 8001894:	dde1      	ble.n	800185a <main+0x506>
	  if (v[2] < -1000) v[2] = -1000;
	  if (v[3] > 1000) v[3] = 1000;
	  if (v[3] < -1000) v[3] = -1000;
	  */

	  v[0] *= -1;
 8001896:	edd7 7a04 	vldr	s15, [r7, #16]
 800189a:	eef1 7a67 	vneg.f32	s15, s15
 800189e:	edc7 7a04 	vstr	s15, [r7, #16]
	  v[2] *= -1;
 80018a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018a6:	eef1 7a67 	vneg.f32	s15, s15
 80018aa:	edc7 7a06 	vstr	s15, [r7, #24]

	  LL_TIM_OC_SetCompareCH1(TIM2, (int)(v[0]+1000));
 80018ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001a0c <main+0x6b8>
 80018b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018c8:	f7ff fd0b 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
	  LL_TIM_OC_SetCompareCH2(TIM2, (int)(v[1]+1000));
 80018cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001a0c <main+0x6b8>
 80018d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	4619      	mov	r1, r3
 80018e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018e6:	f7ff fd0a 	bl	80012fe <LL_TIM_OC_SetCompareCH2>
	  LL_TIM_OC_SetCompareCH3(TIM2, (int)(v[2]+1000));
 80018ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001a0c <main+0x6b8>
 80018f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001904:	f7ff fd09 	bl	800131a <LL_TIM_OC_SetCompareCH3>
	  LL_TIM_OC_SetCompareCH4(TIM2, (int)(v[3]+1000));
 8001908:	edd7 7a07 	vldr	s15, [r7, #28]
 800190c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001a0c <main+0x6b8>
 8001910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001922:	f7ff fd08 	bl	8001336 <LL_TIM_OC_SetCompareCH4>

	  LL_TIM_OC_SetCompareCH1(TIM5, 1300);
 8001926:	f240 5114 	movw	r1, #1300	; 0x514
 800192a:	4839      	ldr	r0, [pc, #228]	; (8001a10 <main+0x6bc>)
 800192c:	f7ff fcd9 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>

	  if (RX > 1.0f) { //取り込みアーム
 8001930:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <main+0x6c0>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800193a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	dd04      	ble.n	800194e <main+0x5fa>
		  LL_TIM_OC_SetCompareCH1(TIM5, 100);
 8001944:	2164      	movs	r1, #100	; 0x64
 8001946:	4832      	ldr	r0, [pc, #200]	; (8001a10 <main+0x6bc>)
 8001948:	f7ff fccb 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
 800194c:	e014      	b.n	8001978 <main+0x624>
	  } else if (RX < -1.0f){
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <main+0x6c0>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	d505      	bpl.n	800196e <main+0x61a>
		  LL_TIM_OC_SetCompareCH1(TIM5, 1900);
 8001962:	f240 716c 	movw	r1, #1900	; 0x76c
 8001966:	482a      	ldr	r0, [pc, #168]	; (8001a10 <main+0x6bc>)
 8001968:	f7ff fcbb 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
 800196c:	e004      	b.n	8001978 <main+0x624>
	  } else {
		  LL_TIM_OC_SetCompareCH1(TIM5, 1000);
 800196e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001972:	4827      	ldr	r0, [pc, #156]	; (8001a10 <main+0x6bc>)
 8001974:	f7ff fcb5 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
	  } else {
		  LL_TIM_OC_SetCompareCH1(TIM5, 1000);
	  }
	  */

	  if (buttonsIsPressed[9]) { //サーボ
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <main+0x6a4>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <main+0x63e>
		  LL_TIM_OC_SetCompareCH1(TIM3, 70);
 8001980:	2146      	movs	r1, #70	; 0x46
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <main+0x6c4>)
 8001984:	f7ff fcad 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
		  LL_TIM_OC_SetCompareCH1(TIM4, 80);
 8001988:	2150      	movs	r1, #80	; 0x50
 800198a:	4824      	ldr	r0, [pc, #144]	; (8001a1c <main+0x6c8>)
 800198c:	f7ff fca9 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
 8001990:	e00b      	b.n	80019aa <main+0x656>
	  } else if (buttonsIsPressed[4]){
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <main+0x6a4>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <main+0x656>
		  LL_TIM_OC_SetCompareCH1(TIM3, 180);
 800199a:	21b4      	movs	r1, #180	; 0xb4
 800199c:	481e      	ldr	r0, [pc, #120]	; (8001a18 <main+0x6c4>)
 800199e:	f7ff fca0 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
		  LL_TIM_OC_SetCompareCH1(TIM4, 180);
 80019a2:	21b4      	movs	r1, #180	; 0xb4
 80019a4:	481d      	ldr	r0, [pc, #116]	; (8001a1c <main+0x6c8>)
 80019a6:	f7ff fc9c 	bl	80012e2 <LL_TIM_OC_SetCompareCH1>
	  } else {
		  //LL_TIM_OC_SetCompareCH1(TIM3, 145);
	  }

	  if (buttonsIsPressed[7]) { //駒アーム
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <main+0x6a4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <main+0x66a>
		  HAL_GPIO_WritePin(AIR_GPIO_Port, AIR_Pin, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2101      	movs	r1, #1
 80019b6:	481a      	ldr	r0, [pc, #104]	; (8001a20 <main+0x6cc>)
 80019b8:	f001 fb34 	bl	8003024 <HAL_GPIO_WritePin>
 80019bc:	e004      	b.n	80019c8 <main+0x674>
	  } else {
		  HAL_GPIO_WritePin(AIR_GPIO_Port, AIR_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2101      	movs	r1, #1
 80019c2:	4817      	ldr	r0, [pc, #92]	; (8001a20 <main+0x6cc>)
 80019c4:	f001 fb2e 	bl	8003024 <HAL_GPIO_WritePin>
	  }

	  static int prev6;
	  static int prev8;
	  if (prev6==0 && buttonsIsPressed[6]) { //参の目
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <main+0x6d0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <main+0x68c>
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <main+0x6a4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <main+0x68c>
		  count = 8;
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <main+0x6d4>)
 80019da:	2208      	movs	r2, #8
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e030      	b.n	8001a42 <main+0x6ee>
	  } else if (prev8==0 && buttonsIsPressed[8]) { //壱の目
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <main+0x6d8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d123      	bne.n	8001a30 <main+0x6dc>
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <main+0x6a4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01f      	beq.n	8001a30 <main+0x6dc>
		  count = 2;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <main+0x6d4>)
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e024      	b.n	8001a42 <main+0x6ee>
 80019f8:	2000022c 	.word	0x2000022c
 80019fc:	c3480000 	.word	0xc3480000
 8001a00:	20000280 	.word	0x20000280
 8001a04:	2000027c 	.word	0x2000027c
 8001a08:	43480000 	.word	0x43480000
 8001a0c:	447a0000 	.word	0x447a0000
 8001a10:	40000c00 	.word	0x40000c00
 8001a14:	20000274 	.word	0x20000274
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40000800 	.word	0x40000800
 8001a20:	40020800 	.word	0x40020800
 8001a24:	20000284 	.word	0x20000284
 8001a28:	20000288 	.word	0x20000288
 8001a2c:	2000028c 	.word	0x2000028c
	  } else if (count > 0) {
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <main+0x7b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dd04      	ble.n	8001a42 <main+0x6ee>
		  count--;
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <main+0x7b0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	4a31      	ldr	r2, [pc, #196]	; (8001b04 <main+0x7b0>)
 8001a40:	6013      	str	r3, [r2, #0]
	  } else {
		  ;
	  }
	  prev6 = buttonsIsPressed[6];
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <main+0x7b4>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <main+0x7b8>)
 8001a48:	6013      	str	r3, [r2, #0]
	  prev8 = buttonsIsPressed[8];
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <main+0x7b4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <main+0x7bc>)
 8001a50:	6013      	str	r3, [r2, #0]

	  if (count > 0) {
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <main+0x7b0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	dd05      	ble.n	8001a66 <main+0x712>
		  HAL_GPIO_WritePin(CUBE_GPIO_Port, CUBE_Pin, GPIO_PIN_SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	482d      	ldr	r0, [pc, #180]	; (8001b14 <main+0x7c0>)
 8001a60:	f001 fae0 	bl	8003024 <HAL_GPIO_WritePin>
 8001a64:	e004      	b.n	8001a70 <main+0x71c>
	  } else {
		  HAL_GPIO_WritePin(CUBE_GPIO_Port, CUBE_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2102      	movs	r1, #2
 8001a6a:	482a      	ldr	r0, [pc, #168]	; (8001b14 <main+0x7c0>)
 8001a6c:	f001 fada 	bl	8003024 <HAL_GPIO_WritePin>
	  }

	  if (buttonsIsPressed[5]) { //あがり
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <main+0x7b4>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <main+0x730>
		  HAL_GPIO_WritePin(AGARI_GPIO_Port, AGARI_Pin, GPIO_PIN_SET);;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	4825      	ldr	r0, [pc, #148]	; (8001b14 <main+0x7c0>)
 8001a7e:	f001 fad1 	bl	8003024 <HAL_GPIO_WritePin>
 8001a82:	e004      	b.n	8001a8e <main+0x73a>
	  } else {
		  HAL_GPIO_WritePin(AGARI_GPIO_Port, AGARI_Pin, GPIO_PIN_RESET);;
 8001a84:	2200      	movs	r2, #0
 8001a86:	2104      	movs	r1, #4
 8001a88:	4822      	ldr	r0, [pc, #136]	; (8001b14 <main+0x7c0>)
 8001a8a:	f001 facb 	bl	8003024 <HAL_GPIO_WritePin>
		  printf("%d ", buttonsIsPressed[i]);
	  }
	  printf("\r\n");
	  */

	  printf("LX=%f LY=%f RX=%f RY=%f %f %f\r\n", LX, LY, RX, RY, Lr, Rr);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <main+0x7c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd78 	bl	8000588 <__aeabi_f2d>
 8001a98:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <main+0x7c8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd71 	bl	8000588 <__aeabi_f2d>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <main+0x7cc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd6a 	bl	8000588 <__aeabi_f2d>
 8001ab4:	4680      	mov	r8, r0
 8001ab6:	4689      	mov	r9, r1
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <main+0x7d0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd63 	bl	8000588 <__aeabi_f2d>
 8001ac2:	4682      	mov	sl, r0
 8001ac4:	468b      	mov	fp, r1
 8001ac6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ac8:	f7fe fd5e 	bl	8000588 <__aeabi_f2d>
 8001acc:	e9c7 0100 	strd	r0, r1, [r7]
 8001ad0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ad2:	f7fe fd59 	bl	8000588 <__aeabi_f2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001ade:	ed97 7b00 	vldr	d7, [r7]
 8001ae2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ae6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001aea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001aee:	e9cd 4500 	strd	r4, r5, [sp]
 8001af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af6:	480c      	ldr	r0, [pc, #48]	; (8001b28 <main+0x7d4>)
 8001af8:	f004 fbdc 	bl	80062b4 <iprintf>
	  //printf("v1=%f v2=%f v3=%f v4=%f\r\n", v[0], v[1], v[2], v[3]);
	  //printf("v1=%d v2=%d v3=%d v4=%d\r\n", (int)(v1+1000), (int)(v2+1000), (int)(v3+1000), (int)(v4+1000));
	  //printf("%f\r\n", theta);
	  HAL_Delay(10);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f000 ff35 	bl	800296c <HAL_Delay>
  {
 8001b02:	e4b4      	b.n	800146e <main+0x11a>
 8001b04:	20000288 	.word	0x20000288
 8001b08:	2000022c 	.word	0x2000022c
 8001b0c:	20000284 	.word	0x20000284
 8001b10:	2000028c 	.word	0x2000028c
 8001b14:	40020800 	.word	0x40020800
 8001b18:	2000026c 	.word	0x2000026c
 8001b1c:	20000270 	.word	0x20000270
 8001b20:	20000274 	.word	0x20000274
 8001b24:	20000278 	.word	0x20000278
 8001b28:	08008838 	.word	0x08008838

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b094      	sub	sp, #80	; 0x50
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	2234      	movs	r2, #52	; 0x34
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 ff48 	bl	80059d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <SystemClock_Config+0xd4>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <SystemClock_Config+0xd4>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <SystemClock_Config+0xd4>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <SystemClock_Config+0xd8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b78:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <SystemClock_Config+0xd8>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <SystemClock_Config+0xd8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b94:	2310      	movs	r3, #16
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ba4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ba8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fd18 	bl	80035f0 <HAL_RCC_OscConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001bc6:	f000 f8bd 	bl	8001d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bca:	230f      	movs	r3, #15
 8001bcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	2102      	movs	r1, #2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 fa36 	bl	8003058 <HAL_RCC_ClockConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001bf2:	f000 f8a7 	bl	8001d44 <Error_Handler>
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3750      	adds	r7, #80	; 0x50
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000

08001c08 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	230a      	movs	r3, #10
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <_write+0x24>)
 8001c1e:	f002 fac8 	bl	80041b2 <HAL_UART_Transmit>
	return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000344 	.word	0x20000344

08001c30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, SBDBTRxData, 8);
 8001c38:	2208      	movs	r2, #8
 8001c3a:	4905      	ldr	r1, [pc, #20]	; (8001c50 <HAL_UART_RxCpltCallback+0x20>)
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_UART_RxCpltCallback+0x24>)
 8001c3e:	f002 fb4a 	bl	80042d6 <HAL_UART_Receive_IT>
    Analyze_Raw_Data();
 8001c42:	f000 f809 	bl	8001c58 <Analyze_Raw_Data>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200002a0 	.word	0x200002a0
 8001c54:	20000300 	.word	0x20000300

08001c58 <Analyze_Raw_Data>:

void Analyze_Raw_Data()
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
    for(int i=0; i<16; i++){
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	e01e      	b.n	8001ca2 <Analyze_Raw_Data+0x4a>
    	int f = (SBDBTRxData[DS3_BTNS_DATMAP_BYTE[i]] & DS3_BTNS_DATMAP_BITMASK[i]) == DS3_BTNS_DATMAP_FLAGBIT[i];
 8001c64:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <Analyze_Raw_Data+0xc4>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <Analyze_Raw_Data+0xc8>)
 8001c70:	5c9a      	ldrb	r2, [r3, r2]
 8001c72:	492c      	ldr	r1, [pc, #176]	; (8001d24 <Analyze_Raw_Data+0xcc>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	440b      	add	r3, r1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	492a      	ldr	r1, [pc, #168]	; (8001d28 <Analyze_Raw_Data+0xd0>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	440b      	add	r3, r1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	603b      	str	r3, [r7, #0]
        buttonsIsPressed[i] = f;
 8001c92:	4926      	ldr	r1, [pc, #152]	; (8001d2c <Analyze_Raw_Data+0xd4>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i=0; i<16; i++){
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	dddd      	ble.n	8001c64 <Analyze_Raw_Data+0xc>
    }
    LX = (float)(SBDBTRxData[3]) - 64.0f;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <Analyze_Raw_Data+0xc8>)
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d30 <Analyze_Raw_Data+0xd8>
 8001cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <Analyze_Raw_Data+0xdc>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
    LY = 64.0f - (float)(SBDBTRxData[4]);
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <Analyze_Raw_Data+0xc8>)
 8001cc4:	791b      	ldrb	r3, [r3, #4]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d30 <Analyze_Raw_Data+0xd8>
 8001cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <Analyze_Raw_Data+0xe0>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
    RX = (float)(SBDBTRxData[5]) - 64.0f;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <Analyze_Raw_Data+0xc8>)
 8001cde:	795b      	ldrb	r3, [r3, #5]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001d30 <Analyze_Raw_Data+0xd8>
 8001cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <Analyze_Raw_Data+0xe4>)
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
    RY = 64.0f - (float)(SBDBTRxData[6]);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <Analyze_Raw_Data+0xc8>)
 8001cf8:	799b      	ldrb	r3, [r3, #6]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d02:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001d30 <Analyze_Raw_Data+0xd8>
 8001d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <Analyze_Raw_Data+0xe8>)
 8001d0c:	edc3 7a00 	vstr	s15, [r3]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	200002a0 	.word	0x200002a0
 8001d24:	20000010 	.word	0x20000010
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	2000022c 	.word	0x2000022c
 8001d30:	42800000 	.word	0x42800000
 8001d34:	2000026c 	.word	0x2000026c
 8001d38:	20000270 	.word	0x20000270
 8001d3c:	20000274 	.word	0x20000274
 8001d40:	20000278 	.word	0x20000278

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <MX_SPI3_Init+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d70:	2202      	movs	r2, #2
 8001d72:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d80:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d84:	2228      	movs	r2, #40	; 0x28
 8001d86:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_SPI3_Init+0x64>)
 8001da2:	f001 fec3 	bl	8003b2c <HAL_SPI_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001dac:	f7ff ffca 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200002a8 	.word	0x200002a8
 8001db8:	40003c00 	.word	0x40003c00

08001dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_SPI_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e28:	2306      	movs	r3, #6
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_SPI_MspInit+0x8c>)
 8001e34:	f000 ff62 	bl	8002cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40003c00 	.word	0x40003c00
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020800 	.word	0x40020800

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e8a:	2007      	movs	r0, #7
 8001e8c:	f000 fe62 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 fd20 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <USART1_IRQHandler+0x10>)
 8001ef6:	f002 fa1f 	bl	8004338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000300 	.word	0x20000300

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:

int _kill(int pid, int sig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f1e:	f003 fd2d 	bl	800597c <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
	return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:

void _exit (int status)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f46:	e7fe      	b.n	8001f46 <_exit+0x12>

08001f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf0      	blt.n	8001f5a <_read+0x12>
	}

return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
	return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f003 fcae 	bl	800597c <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20020000 	.word	0x20020000
 800204c:	00000400 	.word	0x00000400
 8002050:	20000290 	.word	0x20000290
 8002054:	200003a0 	.word	0x200003a0

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <LL_TIM_DisableARRPreload>:
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_TIM_OC_DisableFast>:
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d01c      	beq.n	80020e6 <LL_TIM_OC_DisableFast+0x4a>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d017      	beq.n	80020e2 <LL_TIM_OC_DisableFast+0x46>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d012      	beq.n	80020de <LL_TIM_OC_DisableFast+0x42>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d00d      	beq.n	80020da <LL_TIM_OC_DisableFast+0x3e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c4:	d007      	beq.n	80020d6 <LL_TIM_OC_DisableFast+0x3a>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020cc:	d101      	bne.n	80020d2 <LL_TIM_OC_DisableFast+0x36>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e00a      	b.n	80020e8 <LL_TIM_OC_DisableFast+0x4c>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e008      	b.n	80020e8 <LL_TIM_OC_DisableFast+0x4c>
 80020d6:	2304      	movs	r3, #4
 80020d8:	e006      	b.n	80020e8 <LL_TIM_OC_DisableFast+0x4c>
 80020da:	2303      	movs	r3, #3
 80020dc:	e004      	b.n	80020e8 <LL_TIM_OC_DisableFast+0x4c>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <LL_TIM_OC_DisableFast+0x4c>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_TIM_OC_DisableFast+0x4c>
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3318      	adds	r3, #24
 80020ee:	4619      	mov	r1, r3
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LL_TIM_OC_DisableFast+0x84>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	440b      	add	r3, r1
 80020f8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	4908      	ldr	r1, [pc, #32]	; (8002124 <LL_TIM_OC_DisableFast+0x88>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	4619      	mov	r1, r3
 8002106:	2304      	movs	r3, #4
 8002108:	408b      	lsls	r3, r1
 800210a:	43db      	mvns	r3, r3
 800210c:	401a      	ands	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	08008870 	.word	0x08008870
 8002124:	08008878 	.word	0x08008878

08002128 <LL_TIM_OC_EnablePreload>:
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d01c      	beq.n	8002172 <LL_TIM_OC_EnablePreload+0x4a>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d017      	beq.n	800216e <LL_TIM_OC_EnablePreload+0x46>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b10      	cmp	r3, #16
 8002142:	d012      	beq.n	800216a <LL_TIM_OC_EnablePreload+0x42>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d00d      	beq.n	8002166 <LL_TIM_OC_EnablePreload+0x3e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002150:	d007      	beq.n	8002162 <LL_TIM_OC_EnablePreload+0x3a>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002158:	d101      	bne.n	800215e <LL_TIM_OC_EnablePreload+0x36>
 800215a:	2305      	movs	r3, #5
 800215c:	e00a      	b.n	8002174 <LL_TIM_OC_EnablePreload+0x4c>
 800215e:	2306      	movs	r3, #6
 8002160:	e008      	b.n	8002174 <LL_TIM_OC_EnablePreload+0x4c>
 8002162:	2304      	movs	r3, #4
 8002164:	e006      	b.n	8002174 <LL_TIM_OC_EnablePreload+0x4c>
 8002166:	2303      	movs	r3, #3
 8002168:	e004      	b.n	8002174 <LL_TIM_OC_EnablePreload+0x4c>
 800216a:	2302      	movs	r3, #2
 800216c:	e002      	b.n	8002174 <LL_TIM_OC_EnablePreload+0x4c>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_TIM_OC_EnablePreload+0x4c>
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3318      	adds	r3, #24
 800217a:	4619      	mov	r1, r3
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <LL_TIM_OC_EnablePreload+0x80>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	440b      	add	r3, r1
 8002184:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <LL_TIM_OC_EnablePreload+0x84>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	4619      	mov	r1, r3
 8002192:	2308      	movs	r3, #8
 8002194:	408b      	lsls	r3, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	08008870 	.word	0x08008870
 80021ac:	08008878 	.word	0x08008878

080021b0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4313      	orrs	r3, r2
 800220a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40023800 	.word	0x40023800

08002228 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4313      	orrs	r3, r2
 800223a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <LL_APB1_GRP1_EnableClock+0x2c>)
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4013      	ands	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40023800 	.word	0x40023800

08002258 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b094      	sub	sp, #80	; 0x50
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800225e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	2220      	movs	r2, #32
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fbaa 	bl	80059d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800228c:	2001      	movs	r0, #1
 800228e:	f7ff ffcb 	bl	8002228 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002296:	2300      	movs	r3, #0
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 2000;
 800229a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80022a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022ae:	f003 f8e5 	bl	800547c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80022b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022b6:	f7ff fee1 	bl	800207c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80022ba:	2101      	movs	r1, #1
 80022bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022c0:	f7ff ff32 	bl	8002128 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022c4:	2360      	movs	r3, #96	; 0x60
 80022c6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	461a      	mov	r2, r3
 80022de:	2101      	movs	r1, #1
 80022e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022e4:	f003 f964 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80022e8:	2101      	movs	r1, #1
 80022ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022ee:	f7ff fed5 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80022f2:	2110      	movs	r1, #16
 80022f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022f8:	f7ff ff16 	bl	8002128 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	461a      	mov	r2, r3
 8002302:	2110      	movs	r1, #16
 8002304:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002308:	f003 f952 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800230c:	2110      	movs	r1, #16
 800230e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002312:	f7ff fec3 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8002316:	f44f 7180 	mov.w	r1, #256	; 0x100
 800231a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800231e:	f7ff ff03 	bl	8002128 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	461a      	mov	r2, r3
 8002328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002330:	f003 f93e 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8002334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002338:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800233c:	f7ff feae 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8002340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002344:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002348:	f7ff feee 	bl	8002128 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	461a      	mov	r2, r3
 8002352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002356:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800235a:	f003 f929 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 800235e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002362:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002366:	f7ff fe99 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800236a:	2100      	movs	r1, #0
 800236c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002370:	f7ff ff1e 	bl	80021b0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002374:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002378:	f7ff ff2d 	bl	80021d6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff ff3b 	bl	80021f8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff ff38 	bl	80021f8 <LL_AHB1_GRP1_EnableClock>
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_9;
 8002388:	f240 6304 	movw	r3, #1540	; 0x604
 800238c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800238e:	2302      	movs	r3, #2
 8002390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <MX_TIM2_Init+0x180>)
 80023a8:	f002 ff83 	bl	80052b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80023ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023b2:	2302      	movs	r3, #2
 80023b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <MX_TIM2_Init+0x184>)
 80023cc:	f002 ff71 	bl	80052b2 <LL_GPIO_Init>

}
 80023d0:	bf00      	nop
 80023d2:	3750      	adds	r7, #80	; 0x50
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40020000 	.word	0x40020000

080023e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b094      	sub	sp, #80	; 0x50
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80023e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	2220      	movs	r2, #32
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fae6 	bl	80059d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002414:	2002      	movs	r0, #2
 8002416:	f7ff ff07 	bl	8002228 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 840;
 800241a:	f44f 7352 	mov.w	r3, #840	; 0x348
 800241e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002420:	2300      	movs	r3, #0
 8002422:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 2000;
 8002424:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800242e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002432:	4619      	mov	r1, r3
 8002434:	481e      	ldr	r0, [pc, #120]	; (80024b0 <MX_TIM3_Init+0xd0>)
 8002436:	f003 f821 	bl	800547c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800243a:	481d      	ldr	r0, [pc, #116]	; (80024b0 <MX_TIM3_Init+0xd0>)
 800243c:	f7ff fe1e 	bl	800207c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8002440:	2101      	movs	r1, #1
 8002442:	481b      	ldr	r0, [pc, #108]	; (80024b0 <MX_TIM3_Init+0xd0>)
 8002444:	f7ff fe70 	bl	8002128 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002448:	2360      	movs	r3, #96	; 0x60
 800244a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	461a      	mov	r2, r3
 8002462:	2101      	movs	r1, #1
 8002464:	4812      	ldr	r0, [pc, #72]	; (80024b0 <MX_TIM3_Init+0xd0>)
 8002466:	f003 f8a3 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800246a:	2101      	movs	r1, #1
 800246c:	4810      	ldr	r0, [pc, #64]	; (80024b0 <MX_TIM3_Init+0xd0>)
 800246e:	f7ff fe15 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002472:	2100      	movs	r1, #0
 8002474:	480e      	ldr	r0, [pc, #56]	; (80024b0 <MX_TIM3_Init+0xd0>)
 8002476:	f7ff fe9b 	bl	80021b0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <MX_TIM3_Init+0xd0>)
 800247c:	f7ff feab 	bl	80021d6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002480:	2004      	movs	r0, #4
 8002482:	f7ff feb9 	bl	80021f8 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002486:	2340      	movs	r3, #64	; 0x40
 8002488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800248a:	2302      	movs	r3, #2
 800248c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_TIM3_Init+0xd4>)
 80024a4:	f002 ff05 	bl	80052b2 <LL_GPIO_Init>

}
 80024a8:	bf00      	nop
 80024aa:	3750      	adds	r7, #80	; 0x50
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40020800 	.word	0x40020800

080024b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b094      	sub	sp, #80	; 0x50
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	2220      	movs	r2, #32
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fa7a 	bl	80059d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80024ec:	2004      	movs	r0, #4
 80024ee:	f7ff fe9b 	bl	8002228 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 840;
 80024f2:	f44f 7352 	mov.w	r3, #840	; 0x348
 80024f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024f8:	2300      	movs	r3, #0
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 2000;
 80024fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800250a:	4619      	mov	r1, r3
 800250c:	481e      	ldr	r0, [pc, #120]	; (8002588 <MX_TIM4_Init+0xd0>)
 800250e:	f002 ffb5 	bl	800547c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002512:	481d      	ldr	r0, [pc, #116]	; (8002588 <MX_TIM4_Init+0xd0>)
 8002514:	f7ff fdb2 	bl	800207c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002518:	2101      	movs	r1, #1
 800251a:	481b      	ldr	r0, [pc, #108]	; (8002588 <MX_TIM4_Init+0xd0>)
 800251c:	f7ff fe04 	bl	8002128 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002520:	2360      	movs	r3, #96	; 0x60
 8002522:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	461a      	mov	r2, r3
 800253a:	2101      	movs	r1, #1
 800253c:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_TIM4_Init+0xd0>)
 800253e:	f003 f837 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8002542:	2101      	movs	r1, #1
 8002544:	4810      	ldr	r0, [pc, #64]	; (8002588 <MX_TIM4_Init+0xd0>)
 8002546:	f7ff fda9 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800254a:	2100      	movs	r1, #0
 800254c:	480e      	ldr	r0, [pc, #56]	; (8002588 <MX_TIM4_Init+0xd0>)
 800254e:	f7ff fe2f 	bl	80021b0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <MX_TIM4_Init+0xd0>)
 8002554:	f7ff fe3f 	bl	80021d6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002558:	2002      	movs	r0, #2
 800255a:	f7ff fe4d 	bl	80021f8 <LL_AHB1_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800255e:	2340      	movs	r3, #64	; 0x40
 8002560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002562:	2302      	movs	r3, #2
 8002564:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4804      	ldr	r0, [pc, #16]	; (800258c <MX_TIM4_Init+0xd4>)
 800257c:	f002 fe99 	bl	80052b2 <LL_GPIO_Init>

}
 8002580:	bf00      	nop
 8002582:	3750      	adds	r7, #80	; 0x50
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40000800 	.word	0x40000800
 800258c:	40020400 	.word	0x40020400

08002590 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b094      	sub	sp, #80	; 0x50
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002596:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	2220      	movs	r2, #32
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fa0e 	bl	80059d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]
 80025c2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80025c4:	2008      	movs	r0, #8
 80025c6:	f7ff fe2f 	bl	8002228 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80025ce:	2300      	movs	r3, #0
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 2000;
 80025d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025d8:	2300      	movs	r3, #0
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80025dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4826      	ldr	r0, [pc, #152]	; (800267c <MX_TIM5_Init+0xec>)
 80025e4:	f002 ff4a 	bl	800547c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 80025e8:	4824      	ldr	r0, [pc, #144]	; (800267c <MX_TIM5_Init+0xec>)
 80025ea:	f7ff fd47 	bl	800207c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80025ee:	2101      	movs	r1, #1
 80025f0:	4822      	ldr	r0, [pc, #136]	; (800267c <MX_TIM5_Init+0xec>)
 80025f2:	f7ff fd99 	bl	8002128 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80025f6:	2360      	movs	r3, #96	; 0x60
 80025f8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	461a      	mov	r2, r3
 8002610:	2101      	movs	r1, #1
 8002612:	481a      	ldr	r0, [pc, #104]	; (800267c <MX_TIM5_Init+0xec>)
 8002614:	f002 ffcc 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8002618:	2101      	movs	r1, #1
 800261a:	4818      	ldr	r0, [pc, #96]	; (800267c <MX_TIM5_Init+0xec>)
 800261c:	f7ff fd3e 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8002620:	2110      	movs	r1, #16
 8002622:	4816      	ldr	r0, [pc, #88]	; (800267c <MX_TIM5_Init+0xec>)
 8002624:	f7ff fd80 	bl	8002128 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	461a      	mov	r2, r3
 800262e:	2110      	movs	r1, #16
 8002630:	4812      	ldr	r0, [pc, #72]	; (800267c <MX_TIM5_Init+0xec>)
 8002632:	f002 ffbd 	bl	80055b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8002636:	2110      	movs	r1, #16
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <MX_TIM5_Init+0xec>)
 800263a:	f7ff fd2f 	bl	800209c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800263e:	2100      	movs	r1, #0
 8002640:	480e      	ldr	r0, [pc, #56]	; (800267c <MX_TIM5_Init+0xec>)
 8002642:	f7ff fdb5 	bl	80021b0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <MX_TIM5_Init+0xec>)
 8002648:	f7ff fdc5 	bl	80021d6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff fdd3 	bl	80021f8 <LL_AHB1_GRP1_EnableClock>
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002652:	2303      	movs	r3, #3
 8002654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002656:	2302      	movs	r3, #2
 8002658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4804      	ldr	r0, [pc, #16]	; (8002680 <MX_TIM5_Init+0xf0>)
 8002670:	f002 fe1f 	bl	80052b2 <LL_GPIO_Init>

}
 8002674:	bf00      	nop
 8002676:	3750      	adds	r7, #80	; 0x50
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40000c00 	.word	0x40000c00
 8002680:	40020000 	.word	0x40020000

08002684 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <MX_USART1_UART_Init+0x50>)
 800268c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 8002690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_USART1_UART_Init+0x4c>)
 80026bc:	f001 fd2c 	bl	8004118 <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026c6:	f7ff fb3d 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000300 	.word	0x20000300
 80026d4:	40011000 	.word	0x40011000

080026d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <MX_USART2_UART_Init+0x50>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 80026e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_USART2_UART_Init+0x4c>)
 8002710:	f001 fd02 	bl	8004118 <HAL_UART_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800271a:	f7ff fb13 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000344 	.word	0x20000344
 8002728:	40004400 	.word	0x40004400

0800272c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a36      	ldr	r2, [pc, #216]	; (8002824 <HAL_UART_MspInit+0xf8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d135      	bne.n	80027ba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_UART_MspInit+0xfc>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_UART_MspInit+0xfc>)
 8002758:	f043 0310 	orr.w	r3, r3, #16
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_UART_MspInit+0xfc>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_UART_MspInit+0xfc>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a2d      	ldr	r2, [pc, #180]	; (8002828 <HAL_UART_MspInit+0xfc>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_UART_MspInit+0xfc>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002786:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002798:	2307      	movs	r3, #7
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	4619      	mov	r1, r3
 80027a2:	4822      	ldr	r0, [pc, #136]	; (800282c <HAL_UART_MspInit+0x100>)
 80027a4:	f000 faaa 	bl	8002cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2025      	movs	r0, #37	; 0x25
 80027ae:	f000 f9dc 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027b2:	2025      	movs	r0, #37	; 0x25
 80027b4:	f000 f9f5 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027b8:	e030      	b.n	800281c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <HAL_UART_MspInit+0x104>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d12b      	bne.n	800281c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_UART_MspInit+0xfc>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_UART_MspInit+0xfc>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_UART_MspInit+0xfc>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_UART_MspInit+0xfc>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <HAL_UART_MspInit+0xfc>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6313      	str	r3, [r2, #48]	; 0x30
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_UART_MspInit+0xfc>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027fc:	230c      	movs	r3, #12
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800280c:	2307      	movs	r3, #7
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <HAL_UART_MspInit+0x100>)
 8002818:	f000 fa70 	bl	8002cfc <HAL_GPIO_Init>
}
 800281c:	bf00      	nop
 800281e:	3730      	adds	r7, #48	; 0x30
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40011000 	.word	0x40011000
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000
 8002830:	40004400 	.word	0x40004400

08002834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800283a:	490e      	ldr	r1, [pc, #56]	; (8002874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002850:	4c0b      	ldr	r4, [pc, #44]	; (8002880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800285e:	f7ff fbfb 	bl	8002058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002862:	f003 f891 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002866:	f7fe fd75 	bl	8001354 <main>
  bx  lr    
 800286a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800286c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002878:	08008c74 	.word	0x08008c74
  ldr r2, =_sbss
 800287c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002880:	2000039c 	.word	0x2000039c

08002884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_Init+0x40>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_Init+0x40>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_Init+0x40>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 f94f 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f000 f808 	bl	80028cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028bc:	f7ff fac6 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_InitTick+0x54>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_InitTick+0x58>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f967 	bl	8002bbe <HAL_SYSTICK_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00e      	b.n	8002918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d80a      	bhi.n	8002916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002900:	2200      	movs	r2, #0
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f000 f92f 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800290c:	4a06      	ldr	r2, [pc, #24]	; (8002928 <HAL_InitTick+0x5c>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000030 	.word	0x20000030
 8002924:	20000038 	.word	0x20000038
 8002928:	20000034 	.word	0x20000034

0800292c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_IncTick+0x20>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_IncTick+0x24>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_IncTick+0x24>)
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000038 	.word	0x20000038
 8002950:	20000388 	.word	0x20000388

08002954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_GetTick+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000388 	.word	0x20000388

0800296c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff ffee 	bl	8002954 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d005      	beq.n	8002992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_Delay+0x44>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002992:	bf00      	nop
 8002994:	f7ff ffde 	bl	8002954 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d8f7      	bhi.n	8002994 <HAL_Delay+0x28>
  {
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000038 	.word	0x20000038

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff3e 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff8e 	bl	8002aa8 <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff31 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa2 	bl	8002b10 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff feb6 	bl	8002954 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d008      	beq.n	8002c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e052      	b.n	8002cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0216 	bic.w	r2, r2, #22
 8002c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <HAL_DMA_Abort+0x62>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0208 	bic.w	r2, r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c58:	e013      	b.n	8002c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c5a:	f7ff fe7b 	bl	8002954 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d90c      	bls.n	8002c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e015      	b.n	8002cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e4      	bne.n	8002c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	223f      	movs	r2, #63	; 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e00c      	b.n	8002cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e165      	b.n	8002fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8154 	bne.w	8002fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ae 	beq.w	8002fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9e:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_GPIO_Init+0x304>)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4f      	ldr	r2, [pc, #316]	; (8003004 <HAL_GPIO_Init+0x308>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x21a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_GPIO_Init+0x30c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x216>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4d      	ldr	r2, [pc, #308]	; (800300c <HAL_GPIO_Init+0x310>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x212>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_GPIO_Init+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x20e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	; (8003014 <HAL_GPIO_Init+0x318>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x20a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4a      	ldr	r2, [pc, #296]	; (8003018 <HAL_GPIO_Init+0x31c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x206>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_GPIO_Init+0x320>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x202>
 8002efa:	2306      	movs	r3, #6
 8002efc:	e00c      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002efe:	2307      	movs	r3, #7
 8002f00:	e00a      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e008      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e004      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e002      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f002 0203 	and.w	r2, r2, #3
 8002f1e:	0092      	lsls	r2, r2, #2
 8002f20:	4093      	lsls	r3, r2
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f28:	4935      	ldr	r1, [pc, #212]	; (8003000 <HAL_GPIO_Init+0x304>)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f84:	4a26      	ldr	r2, [pc, #152]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	f67f ae96 	bls.w	8002d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40013800 	.word	0x40013800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020800 	.word	0x40020800
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40021000 	.word	0x40021000
 8003018:	40021400 	.word	0x40021400
 800301c:	40021800 	.word	0x40021800
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003040:	e003      	b.n	800304a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0cc      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e067      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4934      	ldr	r1, [pc, #208]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7ff fc04 	bl	8002954 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7ff fc00 	bl	8002954 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20c      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f855 	bl	800328c <HAL_RCC_GetSysClockFreq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	490a      	ldr	r1, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fb64 	bl	80028cc <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	08008858 	.word	0x08008858
 800321c:	20000030 	.word	0x20000030
 8003220:	20000034 	.word	0x20000034

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000030 	.word	0x20000030

0800323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003240:	f7ff fff0 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	08008868 	.word	0x08008868

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003268:	f7ff ffdc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0b5b      	lsrs	r3, r3, #13
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4903      	ldr	r1, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	08008868 	.word	0x08008868

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003290:	b088      	sub	sp, #32
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a8:	4bce      	ldr	r3, [pc, #824]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f200 818d 	bhi.w	80035d0 <HAL_RCC_GetSysClockFreq+0x344>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCC_GetSysClockFreq+0x30>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080035d1 	.word	0x080035d1
 80032c4:	080035d1 	.word	0x080035d1
 80032c8:	080035d1 	.word	0x080035d1
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	080035d1 	.word	0x080035d1
 80032d4:	080035d1 	.word	0x080035d1
 80032d8:	080035d1 	.word	0x080035d1
 80032dc:	080032fd 	.word	0x080032fd
 80032e0:	080035d1 	.word	0x080035d1
 80032e4:	080035d1 	.word	0x080035d1
 80032e8:	080035d1 	.word	0x080035d1
 80032ec:	08003471 	.word	0x08003471
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4bbd      	ldr	r3, [pc, #756]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032f2:	61bb      	str	r3, [r7, #24]
       break;
 80032f4:	e16f      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4bbd      	ldr	r3, [pc, #756]	; (80035ec <HAL_RCC_GetSysClockFreq+0x360>)
 80032f8:	61bb      	str	r3, [r7, #24]
      break;
 80032fa:	e16c      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4bb9      	ldr	r3, [pc, #740]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4bb7      	ldr	r3, [pc, #732]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d053      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4bb4      	ldr	r3, [pc, #720]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	461a      	mov	r2, r3
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	ea02 0400 	and.w	r4, r2, r0
 800332a:	603c      	str	r4, [r7, #0]
 800332c:	400b      	ands	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	014b      	lsls	r3, r1, #5
 8003342:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003346:	0142      	lsls	r2, r0, #5
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	4623      	mov	r3, r4
 800334e:	1ac0      	subs	r0, r0, r3
 8003350:	462b      	mov	r3, r5
 8003352:	eb61 0103 	sbc.w	r1, r1, r3
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003364:	0182      	lsls	r2, r0, #6
 8003366:	1a12      	subs	r2, r2, r0
 8003368:	eb63 0301 	sbc.w	r3, r3, r1
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	00d9      	lsls	r1, r3, #3
 8003376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800337a:	00d0      	lsls	r0, r2, #3
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4621      	mov	r1, r4
 8003382:	1852      	adds	r2, r2, r1
 8003384:	4629      	mov	r1, r5
 8003386:	eb43 0101 	adc.w	r1, r3, r1
 800338a:	460b      	mov	r3, r1
 800338c:	f04f 0000 	mov.w	r0, #0
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	0259      	lsls	r1, r3, #9
 8003396:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800339a:	0250      	lsls	r0, r2, #9
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	f7fd fc6c 	bl	8000c88 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e04c      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b8a      	ldr	r3, [pc, #552]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	461a      	mov	r2, r3
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	ea02 0a00 	and.w	sl, r2, r0
 80033d2:	ea03 0b01 	and.w	fp, r3, r1
 80033d6:	4650      	mov	r0, sl
 80033d8:	4659      	mov	r1, fp
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	014b      	lsls	r3, r1, #5
 80033e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e8:	0142      	lsls	r2, r0, #5
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	ebb0 000a 	subs.w	r0, r0, sl
 80033f2:	eb61 010b 	sbc.w	r1, r1, fp
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	018b      	lsls	r3, r1, #6
 8003400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003404:	0182      	lsls	r2, r0, #6
 8003406:	1a12      	subs	r2, r2, r0
 8003408:	eb63 0301 	sbc.w	r3, r3, r1
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	00d9      	lsls	r1, r3, #3
 8003416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800341a:	00d0      	lsls	r0, r2, #3
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	eb12 020a 	adds.w	r2, r2, sl
 8003424:	eb43 030b 	adc.w	r3, r3, fp
 8003428:	f04f 0000 	mov.w	r0, #0
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	0299      	lsls	r1, r3, #10
 8003432:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003436:	0290      	lsls	r0, r2, #10
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	461a      	mov	r2, r3
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	f7fd fc1e 	bl	8000c88 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003454:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	61bb      	str	r3, [r7, #24]
      break;
 800346e:	e0b2      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003470:	4b5c      	ldr	r3, [pc, #368]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003478:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347a:	4b5a      	ldr	r3, [pc, #360]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04d      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	461a      	mov	r2, r3
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	ea02 0800 	and.w	r8, r2, r0
 800349e:	ea03 0901 	and.w	r9, r3, r1
 80034a2:	4640      	mov	r0, r8
 80034a4:	4649      	mov	r1, r9
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	014b      	lsls	r3, r1, #5
 80034b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034b4:	0142      	lsls	r2, r0, #5
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	ebb0 0008 	subs.w	r0, r0, r8
 80034be:	eb61 0109 	sbc.w	r1, r1, r9
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	018b      	lsls	r3, r1, #6
 80034cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034d0:	0182      	lsls	r2, r0, #6
 80034d2:	1a12      	subs	r2, r2, r0
 80034d4:	eb63 0301 	sbc.w	r3, r3, r1
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	00d9      	lsls	r1, r3, #3
 80034e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e6:	00d0      	lsls	r0, r2, #3
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	eb12 0208 	adds.w	r2, r2, r8
 80034f0:	eb43 0309 	adc.w	r3, r3, r9
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0259      	lsls	r1, r3, #9
 80034fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003502:	0250      	lsls	r0, r2, #9
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	461a      	mov	r2, r3
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	f7fd fbb8 	bl	8000c88 <__aeabi_uldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4613      	mov	r3, r2
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e04a      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	461a      	mov	r2, r3
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003532:	f04f 0100 	mov.w	r1, #0
 8003536:	ea02 0400 	and.w	r4, r2, r0
 800353a:	ea03 0501 	and.w	r5, r3, r1
 800353e:	4620      	mov	r0, r4
 8003540:	4629      	mov	r1, r5
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	014b      	lsls	r3, r1, #5
 800354c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003550:	0142      	lsls	r2, r0, #5
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	1b00      	subs	r0, r0, r4
 8003558:	eb61 0105 	sbc.w	r1, r1, r5
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	018b      	lsls	r3, r1, #6
 8003566:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800356a:	0182      	lsls	r2, r0, #6
 800356c:	1a12      	subs	r2, r2, r0
 800356e:	eb63 0301 	sbc.w	r3, r3, r1
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	00d9      	lsls	r1, r3, #3
 800357c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003580:	00d0      	lsls	r0, r2, #3
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	1912      	adds	r2, r2, r4
 8003588:	eb45 0303 	adc.w	r3, r5, r3
 800358c:	f04f 0000 	mov.w	r0, #0
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	0299      	lsls	r1, r3, #10
 8003596:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800359a:	0290      	lsls	r0, r2, #10
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	f7fd fb6c 	bl	8000c88 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0f1b      	lsrs	r3, r3, #28
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	61bb      	str	r3, [r7, #24]
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035d2:	61bb      	str	r3, [r7, #24]
      break;
 80035d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d6:	69bb      	ldr	r3, [r7, #24]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	007a1200 	.word	0x007a1200

080035f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e28d      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8083 	beq.w	8003716 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003610:	4b94      	ldr	r3, [pc, #592]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b04      	cmp	r3, #4
 800361a:	d019      	beq.n	8003650 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800361c:	4b91      	ldr	r3, [pc, #580]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003624:	2b08      	cmp	r3, #8
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003628:	4b8e      	ldr	r3, [pc, #568]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003634:	d00c      	beq.n	8003650 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003636:	4b8b      	ldr	r3, [pc, #556]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d112      	bne.n	8003668 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003642:	4b88      	ldr	r3, [pc, #544]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364e:	d10b      	bne.n	8003668 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	4b84      	ldr	r3, [pc, #528]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05b      	beq.n	8003714 <HAL_RCC_OscConfig+0x124>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d157      	bne.n	8003714 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e25a      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x90>
 8003672:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7b      	ldr	r2, [pc, #492]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xcc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0xb4>
 800368a:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a75      	ldr	r2, [pc, #468]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b73      	ldr	r3, [pc, #460]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a72      	ldr	r2, [pc, #456]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xcc>
 80036a4:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6b      	ldr	r2, [pc, #428]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7ff f946 	bl	8002954 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7ff f942 	bl	8002954 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e21f      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b61      	ldr	r3, [pc, #388]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xdc>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7ff f932 	bl	8002954 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7ff f92e 	bl	8002954 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e20b      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	4b57      	ldr	r3, [pc, #348]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x104>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d06f      	beq.n	8003802 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003722:	4b50      	ldr	r3, [pc, #320]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d017      	beq.n	800375e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800372e:	4b4d      	ldr	r3, [pc, #308]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d105      	bne.n	8003746 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800373a:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x186>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1d3      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4937      	ldr	r1, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_RCC_OscConfig+0x278>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7ff f8db 	bl	8002954 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a2:	f7ff f8d7 	bl	8002954 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1b4      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4925      	ldr	r1, [pc, #148]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x278>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7ff f8ba 	bl	8002954 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e4:	f7ff f8b6 	bl	8002954 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e193      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d036      	beq.n	800387c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_RCC_OscConfig+0x27c>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7ff f89a 	bl	8002954 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003824:	f7ff f896 	bl	8002954 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e173      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x234>
 8003842:	e01b      	b.n	800387c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_OscConfig+0x27c>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7ff f883 	bl	8002954 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	e00e      	b.n	8003870 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003852:	f7ff f87f 	bl	8002954 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d907      	bls.n	8003870 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e15c      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
 8003864:	40023800 	.word	0x40023800
 8003868:	42470000 	.word	0x42470000
 800386c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ea      	bne.n	8003852 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8097 	beq.w	80039b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b83      	ldr	r3, [pc, #524]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	4b7f      	ldr	r3, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a7e      	ldr	r2, [pc, #504]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	4b7c      	ldr	r3, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	4b79      	ldr	r3, [pc, #484]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d118      	bne.n	80038f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c6:	4b76      	ldr	r3, [pc, #472]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a75      	ldr	r2, [pc, #468]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d2:	f7ff f83f 	bl	8002954 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7ff f83b 	bl	8002954 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e118      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b6c      	ldr	r3, [pc, #432]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x31e>
 8003900:	4b66      	ldr	r3, [pc, #408]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a65      	ldr	r2, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
 800390c:	e01c      	b.n	8003948 <HAL_RCC_OscConfig+0x358>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x340>
 8003916:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a60      	ldr	r2, [pc, #384]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
 8003922:	4b5e      	ldr	r3, [pc, #376]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5d      	ldr	r2, [pc, #372]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0x358>
 8003930:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a59      	ldr	r2, [pc, #356]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a56      	ldr	r2, [pc, #344]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003942:	f023 0304 	bic.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7ff f800 	bl	8002954 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fe fffc 	bl	8002954 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0d7      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ee      	beq.n	8003958 <HAL_RCC_OscConfig+0x368>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe ffea 	bl	8002954 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe ffe6 	bl	8002954 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0c1      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399a:	4b40      	ldr	r3, [pc, #256]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80ad 	beq.w	8003b1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d060      	beq.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d145      	bne.n	8003a62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b33      	ldr	r3, [pc, #204]	; (8003aa4 <HAL_RCC_OscConfig+0x4b4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe ffba 	bl	8002954 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe ffb6 	bl	8002954 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e093      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	071b      	lsls	r3, r3, #28
 8003a2e:	491b      	ldr	r1, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x4b4>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe ff8b 	bl	8002954 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fe ff87 	bl	8002954 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e064      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x452>
 8003a60:	e05c      	b.n	8003b1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_RCC_OscConfig+0x4b4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe ff74 	bl	8002954 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe ff70 	bl	8002954 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04d      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x480>
 8003a8e:	e045      	b.n	8003b1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e040      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCC_OscConfig+0x538>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d030      	beq.n	8003b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d129      	bne.n	8003b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d122      	bne.n	8003b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d119      	bne.n	8003b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d10f      	bne.n	8003b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800

08003b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07b      	b.n	8003c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4e:	d009      	beq.n	8003b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
 8003b56:	e005      	b.n	8003b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe f91c 	bl	8001dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0104 	and.w	r1, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0210 	and.w	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08c      	sub	sp, #48	; 0x30
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x26>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e18a      	b.n	8003f7a <HAL_SPI_TransmitReceive+0x33c>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c6c:	f7fe fe72 	bl	8002954 <HAL_GetTick>
 8003c70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d00f      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x70>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c94:	d107      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x68>
 8003c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d003      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cac:	e15b      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x82>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x82>
 8003cba:	887b      	ldrh	r3, [r7, #2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cc6:	e14e      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d003      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	887a      	ldrh	r2, [r7, #2]
 8003cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	887a      	ldrh	r2, [r7, #2]
 8003cfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d007      	beq.n	8003d30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d38:	d178      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x10a>
 8003d42:	8b7b      	ldrh	r3, [r7, #26]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d166      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d6c:	e053      	b.n	8003e16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d11b      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x176>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x176>
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d113      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d119      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x1b8>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	b292      	uxth	r2, r2
 8003dd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003df6:	f7fe fdad 	bl	8002954 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d807      	bhi.n	8003e16 <HAL_SPI_TransmitReceive+0x1d8>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d003      	beq.n	8003e16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e14:	e0a7      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1a6      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x130>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1a1      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x130>
 8003e2a:	e07c      	b.n	8003f26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x1fc>
 8003e34:	8b7b      	ldrh	r3, [r7, #26]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d16b      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e60:	e057      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d11c      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x26c>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <HAL_SPI_TransmitReceive+0x26c>
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d114      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d119      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x2ae>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d014      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eec:	f7fe fd32 	bl	8002954 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d803      	bhi.n	8003f04 <HAL_SPI_TransmitReceive+0x2c6>
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d102      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x2cc>
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f10:	e029      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1a2      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x224>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d19d      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8b2 	bl	8004094 <SPI_EndRxTxTransaction>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f42:	e010      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	e000      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	; 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f94:	f7fe fcde 	bl	8002954 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa4:	f7fe fcd6 	bl	8002954 <HAL_GetTick>
 8003fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	015b      	lsls	r3, r3, #5
 8003fb0:	0d1b      	lsrs	r3, r3, #20
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fba:	e054      	b.n	8004066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d050      	beq.n	8004066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc4:	f7fe fcc6 	bl	8002954 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d902      	bls.n	8003fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13d      	bne.n	8004056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff2:	d111      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffc:	d004      	beq.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d107      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004020:	d10f      	bne.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e017      	b.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3b01      	subs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	429a      	cmp	r2, r3
 8004082:	d19b      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000030 	.word	0x20000030

08004094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <SPI_EndRxTxTransaction+0x7c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <SPI_EndRxTxTransaction+0x80>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0d5b      	lsrs	r3, r3, #21
 80040ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040be:	d112      	bne.n	80040e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff ff5a 	bl	8003f84 <SPI_WaitFlagStateUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e00f      	b.n	8004106 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d0f2      	beq.n	80040e6 <SPI_EndRxTxTransaction+0x52>
 8004100:	e000      	b.n	8004104 <SPI_EndRxTxTransaction+0x70>
        break;
 8004102:	bf00      	nop
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000030 	.word	0x20000030
 8004114:	165e9f81 	.word	0x165e9f81

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e03f      	b.n	80041aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fe faf4 	bl	800272c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fddb 	bl	8004d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08a      	sub	sp, #40	; 0x28
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d17c      	bne.n	80042cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_UART_Transmit+0x2c>
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e075      	b.n	80042ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_UART_Transmit+0x3e>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e06e      	b.n	80042ce <HAL_UART_Transmit+0x11c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004206:	f7fe fba5 	bl	8002954 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d108      	bne.n	8004234 <HAL_UART_Transmit+0x82>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e003      	b.n	800423c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004244:	e02a      	b.n	800429c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fb1f 	bl	8004894 <UART_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e036      	b.n	80042ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	3302      	adds	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e007      	b.n	800428e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3301      	adds	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1cf      	bne.n	8004246 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 faef 	bl	8004894 <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e006      	b.n	80042ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d11d      	bne.n	800432c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Receive_IT+0x26>
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e016      	b.n	800432e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UART_Receive_IT+0x38>
 800430a:	2302      	movs	r3, #2
 800430c:	e00f      	b.n	800432e <HAL_UART_Receive_IT+0x58>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	461a      	mov	r2, r3
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fb24 	bl	8004970 <UART_Start_Receive_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	e000      	b.n	800432e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0ba      	sub	sp, #232	; 0xe8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_UART_IRQHandler+0x66>
 800438a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fc03 	bl	8004ba2 <UART_Receive_IT>
      return;
 800439c:	e256      	b.n	800484c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800439e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80de 	beq.w	8004564 <HAL_UART_IRQHandler+0x22c>
 80043a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80d1 	beq.w	8004564 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0xae>
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0201 	orr.w	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <HAL_UART_IRQHandler+0xd2>
 80043f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0202 	orr.w	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_UART_IRQHandler+0xf6>
 8004416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_UART_IRQHandler+0x126>
 800443a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0208 	orr.w	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 81ed 	beq.w	8004842 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_UART_IRQHandler+0x14e>
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb8e 	bl	8004ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <HAL_UART_IRQHandler+0x17a>
 80044aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04f      	beq.n	8004552 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa96 	bl	80049e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d141      	bne.n	800454a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3314      	adds	r3, #20
 80044ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800450a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1d9      	bne.n	80044c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d013      	beq.n	8004542 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	4a7d      	ldr	r2, [pc, #500]	; (8004714 <HAL_UART_IRQHandler+0x3dc>)
 8004520:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fbc5 	bl	8002cb6 <HAL_DMA_Abort_IT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	e00e      	b.n	8004560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f990 	bl	8004868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	e00a      	b.n	8004560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f98c 	bl	8004868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	e006      	b.n	8004560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f988 	bl	8004868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800455e:	e170      	b.n	8004842 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	bf00      	nop
    return;
 8004562:	e16e      	b.n	8004842 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	2b01      	cmp	r3, #1
 800456a:	f040 814a 	bne.w	8004802 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8143 	beq.w	8004802 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 813c 	beq.w	8004802 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	f040 80b4 	bne.w	8004718 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8140 	beq.w	8004846 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ce:	429a      	cmp	r2, r3
 80045d0:	f080 8139 	bcs.w	8004846 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e6:	f000 8088 	beq.w	80046fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800461a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800462e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1d9      	bne.n	80045ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3314      	adds	r3, #20
 8004656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800465a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800465e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800466c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e1      	bne.n	8004636 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800469c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e3      	bne.n	8004672 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ca:	f023 0310 	bic.w	r3, r3, #16
 80046ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80046de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e3      	bne.n	80046b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe fa6e 	bl	8002bd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004702:	b29b      	uxth	r3, r3
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	b29b      	uxth	r3, r3
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f8b6 	bl	800487c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004710:	e099      	b.n	8004846 <HAL_UART_IRQHandler+0x50e>
 8004712:	bf00      	nop
 8004714:	08004aab 	.word	0x08004aab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004720:	b29b      	uxth	r3, r3
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 808b 	beq.w	800484a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8086 	beq.w	800484a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004762:	647a      	str	r2, [r7, #68]	; 0x44
 8004764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e3      	bne.n	800473e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3314      	adds	r3, #20
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	623b      	str	r3, [r7, #32]
   return(result);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3314      	adds	r3, #20
 8004796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800479a:	633a      	str	r2, [r7, #48]	; 0x30
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e3      	bne.n	8004776 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0310 	bic.w	r3, r3, #16
 80047d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047e0:	61fa      	str	r2, [r7, #28]
 80047e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	69b9      	ldr	r1, [r7, #24]
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	617b      	str	r3, [r7, #20]
   return(result);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e3      	bne.n	80047bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f83e 	bl	800487c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004800:	e023      	b.n	800484a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_UART_IRQHandler+0x4ea>
 800480e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f959 	bl	8004ad2 <UART_Transmit_IT>
    return;
 8004820:	e014      	b.n	800484c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00e      	beq.n	800484c <HAL_UART_IRQHandler+0x514>
 800482e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f999 	bl	8004b72 <UART_EndTransmit_IT>
    return;
 8004840:	e004      	b.n	800484c <HAL_UART_IRQHandler+0x514>
    return;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <HAL_UART_IRQHandler+0x514>
      return;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_UART_IRQHandler+0x514>
      return;
 800484a:	bf00      	nop
  }
}
 800484c:	37e8      	adds	r7, #232	; 0xe8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop

08004854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b090      	sub	sp, #64	; 0x40
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a4:	e050      	b.n	8004948 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d04c      	beq.n	8004948 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048b4:	f7fe f84e 	bl	8002954 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d241      	bcs.n	8004948 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048e4:	637a      	str	r2, [r7, #52]	; 0x34
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	613b      	str	r3, [r7, #16]
   return(result);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004918:	623a      	str	r2, [r7, #32]
 800491a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	69f9      	ldr	r1, [r7, #28]
 800491e:	6a3a      	ldr	r2, [r7, #32]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	61bb      	str	r3, [r7, #24]
   return(result);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e00f      	b.n	8004968 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	429a      	cmp	r2, r3
 8004964:	d09f      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3740      	adds	r7, #64	; 0x40
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2222      	movs	r2, #34	; 0x22
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b095      	sub	sp, #84	; 0x54
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a0c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d119      	bne.n	8004a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a7c:	61ba      	str	r2, [r7, #24]
 8004a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a9e:	bf00      	nop
 8004aa0:	3754      	adds	r7, #84	; 0x54
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fecf 	bl	8004868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b21      	cmp	r3, #33	; 0x21
 8004ae4:	d13e      	bne.n	8004b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d114      	bne.n	8004b1a <UART_Transmit_IT+0x48>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d110      	bne.n	8004b1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	621a      	str	r2, [r3, #32]
 8004b18:	e008      	b.n	8004b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6211      	str	r1, [r2, #32]
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10f      	bne.n	8004b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fe5e 	bl	8004854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08c      	sub	sp, #48	; 0x30
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b22      	cmp	r3, #34	; 0x22
 8004bb4:	f040 80ab 	bne.w	8004d0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d117      	bne.n	8004bf2 <UART_Receive_IT+0x50>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d113      	bne.n	8004bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	1c9a      	adds	r2, r3, #2
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf0:	e026      	b.n	8004c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d007      	beq.n	8004c16 <UART_Receive_IT+0x74>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <UART_Receive_IT+0x82>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e008      	b.n	8004c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d15a      	bne.n	8004d0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0220 	bic.w	r2, r2, #32
 8004c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d135      	bne.n	8004d00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f023 0310 	bic.w	r3, r3, #16
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	623a      	str	r2, [r7, #32]
 8004cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	69f9      	ldr	r1, [r7, #28]
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d10a      	bne.n	8004cf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fdbf 	bl	800487c <HAL_UARTEx_RxEventCallback>
 8004cfe:	e002      	b.n	8004d06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fc ff95 	bl	8001c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e002      	b.n	8004d10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3730      	adds	r7, #48	; 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	b09f      	sub	sp, #124	; 0x7c
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	68d9      	ldr	r1, [r3, #12]
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	ea40 0301 	orr.w	r3, r0, r1
 8004d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d5c:	f021 010c 	bic.w	r1, r1, #12
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d66:	430b      	orrs	r3, r1
 8004d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d76:	6999      	ldr	r1, [r3, #24]
 8004d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	ea40 0301 	orr.w	r3, r0, r1
 8004d80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4bc5      	ldr	r3, [pc, #788]	; (800509c <UART_SetConfig+0x384>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d004      	beq.n	8004d96 <UART_SetConfig+0x7e>
 8004d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4bc3      	ldr	r3, [pc, #780]	; (80050a0 <UART_SetConfig+0x388>)
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d103      	bne.n	8004d9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d96:	f7fe fa65 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8004d9a:	6778      	str	r0, [r7, #116]	; 0x74
 8004d9c:	e002      	b.n	8004da4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d9e:	f7fe fa4d 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8004da2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dac:	f040 80b6 	bne.w	8004f1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db2:	461c      	mov	r4, r3
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	4622      	mov	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dc8:	1912      	adds	r2, r2, r4
 8004dca:	eb45 0303 	adc.w	r3, r5, r3
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	00d9      	lsls	r1, r3, #3
 8004dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ddc:	00d0      	lsls	r0, r2, #3
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	1911      	adds	r1, r2, r4
 8004de4:	6639      	str	r1, [r7, #96]	; 0x60
 8004de6:	416b      	adcs	r3, r5
 8004de8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	1891      	adds	r1, r2, r2
 8004df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004df8:	415b      	adcs	r3, r3
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e04:	f7fb ff40 	bl	8000c88 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4ba5      	ldr	r3, [pc, #660]	; (80050a4 <UART_SetConfig+0x38c>)
 8004e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	011e      	lsls	r6, r3, #4
 8004e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e18:	461c      	mov	r4, r3
 8004e1a:	f04f 0500 	mov.w	r5, #0
 8004e1e:	4622      	mov	r2, r4
 8004e20:	462b      	mov	r3, r5
 8004e22:	1891      	adds	r1, r2, r2
 8004e24:	6339      	str	r1, [r7, #48]	; 0x30
 8004e26:	415b      	adcs	r3, r3
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e2e:	1912      	adds	r2, r2, r4
 8004e30:	eb45 0303 	adc.w	r3, r5, r3
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	00d9      	lsls	r1, r3, #3
 8004e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e42:	00d0      	lsls	r0, r2, #3
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	1911      	adds	r1, r2, r4
 8004e4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e4c:	416b      	adcs	r3, r5
 8004e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	1891      	adds	r1, r2, r2
 8004e5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e5e:	415b      	adcs	r3, r3
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e6a:	f7fb ff0d 	bl	8000c88 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b8c      	ldr	r3, [pc, #560]	; (80050a4 <UART_SetConfig+0x38c>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a87      	ldr	r2, [pc, #540]	; (80050a4 <UART_SetConfig+0x38c>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e94:	441e      	add	r6, r3
 8004e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	1894      	adds	r4, r2, r2
 8004ea4:	623c      	str	r4, [r7, #32]
 8004ea6:	415b      	adcs	r3, r3
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eae:	1812      	adds	r2, r2, r0
 8004eb0:	eb41 0303 	adc.w	r3, r1, r3
 8004eb4:	f04f 0400 	mov.w	r4, #0
 8004eb8:	f04f 0500 	mov.w	r5, #0
 8004ebc:	00dd      	lsls	r5, r3, #3
 8004ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ec2:	00d4      	lsls	r4, r2, #3
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	1814      	adds	r4, r2, r0
 8004eca:	653c      	str	r4, [r7, #80]	; 0x50
 8004ecc:	414b      	adcs	r3, r1
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	1891      	adds	r1, r2, r2
 8004edc:	61b9      	str	r1, [r7, #24]
 8004ede:	415b      	adcs	r3, r3
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004eea:	f7fb fecd 	bl	8000c88 <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4b6c      	ldr	r3, [pc, #432]	; (80050a4 <UART_SetConfig+0x38c>)
 8004ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	2164      	movs	r1, #100	; 0x64
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	3332      	adds	r3, #50	; 0x32
 8004f06:	4a67      	ldr	r2, [pc, #412]	; (80050a4 <UART_SetConfig+0x38c>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	f003 0207 	and.w	r2, r3, #7
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4432      	add	r2, r6
 8004f18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f1a:	e0b9      	b.n	8005090 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f1e:	461c      	mov	r4, r3
 8004f20:	f04f 0500 	mov.w	r5, #0
 8004f24:	4622      	mov	r2, r4
 8004f26:	462b      	mov	r3, r5
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	6139      	str	r1, [r7, #16]
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f34:	1912      	adds	r2, r2, r4
 8004f36:	eb45 0303 	adc.w	r3, r5, r3
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	00d9      	lsls	r1, r3, #3
 8004f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f48:	00d0      	lsls	r0, r2, #3
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	eb12 0804 	adds.w	r8, r2, r4
 8004f52:	eb43 0905 	adc.w	r9, r3, r5
 8004f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	008b      	lsls	r3, r1, #2
 8004f6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f6e:	0082      	lsls	r2, r0, #2
 8004f70:	4640      	mov	r0, r8
 8004f72:	4649      	mov	r1, r9
 8004f74:	f7fb fe88 	bl	8000c88 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <UART_SetConfig+0x38c>)
 8004f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	011e      	lsls	r6, r3, #4
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	1894      	adds	r4, r2, r2
 8004f94:	60bc      	str	r4, [r7, #8]
 8004f96:	415b      	adcs	r3, r3
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f9e:	1812      	adds	r2, r2, r0
 8004fa0:	eb41 0303 	adc.w	r3, r1, r3
 8004fa4:	f04f 0400 	mov.w	r4, #0
 8004fa8:	f04f 0500 	mov.w	r5, #0
 8004fac:	00dd      	lsls	r5, r3, #3
 8004fae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fb2:	00d4      	lsls	r4, r2, #3
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	462b      	mov	r3, r5
 8004fb8:	1814      	adds	r4, r2, r0
 8004fba:	64bc      	str	r4, [r7, #72]	; 0x48
 8004fbc:	414b      	adcs	r3, r1
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	008b      	lsls	r3, r1, #2
 8004fd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fd8:	0082      	lsls	r2, r0, #2
 8004fda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fde:	f7fb fe53 	bl	8000c88 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <UART_SetConfig+0x38c>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <UART_SetConfig+0x38c>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005006:	441e      	add	r6, r3
 8005008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500a:	4618      	mov	r0, r3
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	1894      	adds	r4, r2, r2
 8005016:	603c      	str	r4, [r7, #0]
 8005018:	415b      	adcs	r3, r3
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005020:	1812      	adds	r2, r2, r0
 8005022:	eb41 0303 	adc.w	r3, r1, r3
 8005026:	f04f 0400 	mov.w	r4, #0
 800502a:	f04f 0500 	mov.w	r5, #0
 800502e:	00dd      	lsls	r5, r3, #3
 8005030:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005034:	00d4      	lsls	r4, r2, #3
 8005036:	4622      	mov	r2, r4
 8005038:	462b      	mov	r3, r5
 800503a:	eb12 0a00 	adds.w	sl, r2, r0
 800503e:	eb43 0b01 	adc.w	fp, r3, r1
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	008b      	lsls	r3, r1, #2
 8005056:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800505a:	0082      	lsls	r2, r0, #2
 800505c:	4650      	mov	r0, sl
 800505e:	4659      	mov	r1, fp
 8005060:	f7fb fe12 	bl	8000c88 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <UART_SetConfig+0x38c>)
 800506a:	fba3 1302 	umull	r1, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2164      	movs	r1, #100	; 0x64
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	3332      	adds	r3, #50	; 0x32
 800507c:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <UART_SetConfig+0x38c>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f003 020f 	and.w	r2, r3, #15
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4432      	add	r2, r6
 800508e:	609a      	str	r2, [r3, #8]
}
 8005090:	bf00      	nop
 8005092:	377c      	adds	r7, #124	; 0x7c
 8005094:	46bd      	mov	sp, r7
 8005096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509a:	bf00      	nop
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	51eb851f 	.word	0x51eb851f

080050a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	613b      	str	r3, [r7, #16]
  return result;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	2103      	movs	r1, #3
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	401a      	ands	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	61bb      	str	r3, [r7, #24]
  return result;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	43db      	mvns	r3, r3
 800511a:	401a      	ands	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005136:	b480      	push	{r7}
 8005138:	b089      	sub	sp, #36	; 0x24
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	fa93 f3a3 	rbit	r3, r3
 8005150:	613b      	str	r3, [r7, #16]
  return result;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2103      	movs	r1, #3
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	401a      	ands	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa93 f3a3 	rbit	r3, r3
 8005170:	61bb      	str	r3, [r7, #24]
  return result;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	fab3 f383 	clz	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	431a      	orrs	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005188:	bf00      	nop
 800518a:	3724      	adds	r7, #36	; 0x24
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	fa93 f3a3 	rbit	r3, r3
 80051ae:	613b      	str	r3, [r7, #16]
  return result;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	fab3 f383 	clz	r3, r3
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2103      	movs	r1, #3
 80051bc:	fa01 f303 	lsl.w	r3, r1, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	fa93 f3a3 	rbit	r3, r3
 80051ce:	61bb      	str	r3, [r7, #24]
  return result;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	60da      	str	r2, [r3, #12]
}
 80051e6:	bf00      	nop
 80051e8:	3724      	adds	r7, #36	; 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b089      	sub	sp, #36	; 0x24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1a      	ldr	r2, [r3, #32]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	fa93 f3a3 	rbit	r3, r3
 800520c:	613b      	str	r3, [r7, #16]
  return result;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	b2db      	uxtb	r3, r3
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	210f      	movs	r1, #15
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	401a      	ands	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	61bb      	str	r3, [r7, #24]
  return result;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	fab3 f383 	clz	r3, r3
 8005234:	b2db      	uxtb	r3, r3
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	431a      	orrs	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005244:	bf00      	nop
 8005246:	3724      	adds	r7, #36	; 0x24
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	; 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	613b      	str	r3, [r7, #16]
  return result;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	fab3 f383 	clz	r3, r3
 8005274:	b2db      	uxtb	r3, r3
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	210f      	movs	r1, #15
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	401a      	ands	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	fa93 f3a3 	rbit	r3, r3
 800528e:	61bb      	str	r3, [r7, #24]
  return result;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80052a6:	bf00      	nop
 80052a8:	3724      	adds	r7, #36	; 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b088      	sub	sp, #32
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	fa93 f3a3 	rbit	r3, r3
 80052d0:	613b      	str	r3, [r7, #16]
  return result;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	fab3 f383 	clz	r3, r3
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80052dc:	e050      	b.n	8005380 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d042      	beq.n	800537a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d003      	beq.n	8005304 <LL_GPIO_Init+0x52>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d10d      	bne.n	8005320 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	461a      	mov	r2, r3
 800530a:	69b9      	ldr	r1, [r7, #24]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff12 	bl	8005136 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	461a      	mov	r2, r3
 8005318:	69b9      	ldr	r1, [r7, #24]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fef3 	bl	8005106 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	461a      	mov	r2, r3
 8005326:	69b9      	ldr	r1, [r7, #24]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff33 	bl	8005194 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d11a      	bne.n	800536c <LL_GPIO_Init+0xba>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	fa93 f3a3 	rbit	r3, r3
 8005340:	60bb      	str	r3, [r7, #8]
  return result;
 8005342:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005344:	fab3 f383 	clz	r3, r3
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b07      	cmp	r3, #7
 800534c:	d807      	bhi.n	800535e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	461a      	mov	r2, r3
 8005354:	69b9      	ldr	r1, [r7, #24]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ff4b 	bl	80051f2 <LL_GPIO_SetAFPin_0_7>
 800535c:	e006      	b.n	800536c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	461a      	mov	r2, r3
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff ff72 	bl	8005250 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	461a      	mov	r2, r3
 8005372:	69b9      	ldr	r1, [r7, #24]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fe97 	bl	80050a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3301      	adds	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	fa22 f303 	lsr.w	r3, r2, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1a7      	bne.n	80052de <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <LL_TIM_SetPrescaler>:
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_TIM_SetAutoReload>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_TIM_SetRepetitionCounter>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <LL_TIM_OC_SetCompareCH1>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_TIM_OC_SetCompareCH2>:
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_TIM_OC_SetCompareCH3>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_TIM_OC_SetCompareCH4>:
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f043 0201 	orr.w	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	615a      	str	r2, [r3, #20]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a3d      	ldr	r2, [pc, #244]	; (8005584 <LL_TIM_Init+0x108>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <LL_TIM_Init+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d00f      	beq.n	80054bc <LL_TIM_Init+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3a      	ldr	r2, [pc, #232]	; (8005588 <LL_TIM_Init+0x10c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <LL_TIM_Init+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a39      	ldr	r2, [pc, #228]	; (800558c <LL_TIM_Init+0x110>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <LL_TIM_Init+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a38      	ldr	r2, [pc, #224]	; (8005590 <LL_TIM_Init+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <LL_TIM_Init+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a37      	ldr	r2, [pc, #220]	; (8005594 <LL_TIM_Init+0x118>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d106      	bne.n	80054ca <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <LL_TIM_Init+0x108>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d02b      	beq.n	800552a <LL_TIM_Init+0xae>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d027      	beq.n	800552a <LL_TIM_Init+0xae>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <LL_TIM_Init+0x10c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d023      	beq.n	800552a <LL_TIM_Init+0xae>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a29      	ldr	r2, [pc, #164]	; (800558c <LL_TIM_Init+0x110>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01f      	beq.n	800552a <LL_TIM_Init+0xae>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a28      	ldr	r2, [pc, #160]	; (8005590 <LL_TIM_Init+0x114>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <LL_TIM_Init+0xae>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a27      	ldr	r2, [pc, #156]	; (8005594 <LL_TIM_Init+0x118>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d017      	beq.n	800552a <LL_TIM_Init+0xae>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a26      	ldr	r2, [pc, #152]	; (8005598 <LL_TIM_Init+0x11c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <LL_TIM_Init+0xae>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <LL_TIM_Init+0x120>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <LL_TIM_Init+0xae>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a24      	ldr	r2, [pc, #144]	; (80055a0 <LL_TIM_Init+0x124>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <LL_TIM_Init+0xae>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <LL_TIM_Init+0x128>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <LL_TIM_Init+0xae>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <LL_TIM_Init+0x12c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <LL_TIM_Init+0xae>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a21      	ldr	r2, [pc, #132]	; (80055ac <LL_TIM_Init+0x130>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d106      	bne.n	8005538 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff35 	bl	80053b4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff21 	bl	8005398 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <LL_TIM_Init+0x108>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <LL_TIM_Init+0xea>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <LL_TIM_Init+0x118>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d105      	bne.n	8005572 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff2f 	bl	80053d0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ff72 	bl	800545c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400
 80055a0:	40014800 	.word	0x40014800
 80055a4:	40001800 	.word	0x40001800
 80055a8:	40001c00 	.word	0x40001c00
 80055ac:	40002000 	.word	0x40002000

080055b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c6:	d027      	beq.n	8005618 <LL_TIM_OC_Init+0x68>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	d82a      	bhi.n	8005626 <LL_TIM_OC_Init+0x76>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d018      	beq.n	800560a <LL_TIM_OC_Init+0x5a>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055de:	d822      	bhi.n	8005626 <LL_TIM_OC_Init+0x76>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d003      	beq.n	80055ee <LL_TIM_OC_Init+0x3e>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d007      	beq.n	80055fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80055ec:	e01b      	b.n	8005626 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f81f 	bl	8005634 <OC1Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]
      break;
 80055fa:	e015      	b.n	8005628 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f884 	bl	800570c <OC2Config>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
      break;
 8005608:	e00e      	b.n	8005628 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f8ed 	bl	80057ec <OC3Config>
 8005612:	4603      	mov	r3, r0
 8005614:	75fb      	strb	r3, [r7, #23]
      break;
 8005616:	e007      	b.n	8005628 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f956 	bl	80058cc <OC4Config>
 8005620:	4603      	mov	r3, r0
 8005622:	75fb      	strb	r3, [r7, #23]
      break;
 8005624:	e000      	b.n	8005628 <LL_TIM_OC_Init+0x78>
      break;
 8005626:	bf00      	nop
  }

  return result;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f023 0202 	bic.w	r2, r3, #2
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <OC1Config+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <OC1Config+0x6a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <OC1Config+0xd4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d11e      	bne.n	80056dc <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 0208 	bic.w	r2, r3, #8
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 0204 	bic.w	r2, r3, #4
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fe7c 	bl	80053ec <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40010000 	.word	0x40010000
 8005708:	40010400 	.word	0x40010400

0800570c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0210 	bic.w	r2, r3, #16
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0220 	bic.w	r2, r3, #32
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0210 	bic.w	r2, r3, #16
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <OC2Config+0xd8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <OC2Config+0x70>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <OC2Config+0xdc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d11f      	bne.n	80057bc <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	019b      	lsls	r3, r3, #6
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	019b      	lsls	r3, r3, #6
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fe1a 	bl	8005408 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40010400 	.word	0x40010400

080057ec <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <OC3Config+0xd8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <OC3Config+0x6e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <OC3Config+0xdc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d11f      	bne.n	800589a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	029b      	lsls	r3, r3, #10
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	015b      	lsls	r3, r3, #5
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fdb9 	bl	8005424 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400

080058cc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	031b      	lsls	r3, r3, #12
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	031b      	lsls	r3, r3, #12
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a11      	ldr	r2, [pc, #68]	; (8005974 <OC4Config+0xa8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <OC4Config+0x70>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a10      	ldr	r2, [pc, #64]	; (8005978 <OC4Config+0xac>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d107      	bne.n	800594c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	019b      	lsls	r3, r3, #6
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fd6e 	bl	8005440 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	; (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000003c 	.word	0x2000003c

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4d0d      	ldr	r5, [pc, #52]	; (80059c0 <__libc_init_array+0x38>)
 800598c:	4c0d      	ldr	r4, [pc, #52]	; (80059c4 <__libc_init_array+0x3c>)
 800598e:	1b64      	subs	r4, r4, r5
 8005990:	10a4      	asrs	r4, r4, #2
 8005992:	2600      	movs	r6, #0
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	4d0b      	ldr	r5, [pc, #44]	; (80059c8 <__libc_init_array+0x40>)
 800599a:	4c0c      	ldr	r4, [pc, #48]	; (80059cc <__libc_init_array+0x44>)
 800599c:	f002 ff36 	bl	800880c <_init>
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	2600      	movs	r6, #0
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08008c6c 	.word	0x08008c6c
 80059c4:	08008c6c 	.word	0x08008c6c
 80059c8:	08008c6c 	.word	0x08008c6c
 80059cc:	08008c70 	.word	0x08008c70

080059d0 <memset>:
 80059d0:	4402      	add	r2, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d100      	bne.n	80059da <memset+0xa>
 80059d8:	4770      	bx	lr
 80059da:	f803 1b01 	strb.w	r1, [r3], #1
 80059de:	e7f9      	b.n	80059d4 <memset+0x4>

080059e0 <__cvt>:
 80059e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	ec55 4b10 	vmov	r4, r5, d0
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	460e      	mov	r6, r1
 80059ec:	4619      	mov	r1, r3
 80059ee:	462b      	mov	r3, r5
 80059f0:	bfbb      	ittet	lt
 80059f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059f6:	461d      	movlt	r5, r3
 80059f8:	2300      	movge	r3, #0
 80059fa:	232d      	movlt	r3, #45	; 0x2d
 80059fc:	700b      	strb	r3, [r1, #0]
 80059fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a04:	4691      	mov	r9, r2
 8005a06:	f023 0820 	bic.w	r8, r3, #32
 8005a0a:	bfbc      	itt	lt
 8005a0c:	4622      	movlt	r2, r4
 8005a0e:	4614      	movlt	r4, r2
 8005a10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a14:	d005      	beq.n	8005a22 <__cvt+0x42>
 8005a16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a1a:	d100      	bne.n	8005a1e <__cvt+0x3e>
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	2102      	movs	r1, #2
 8005a20:	e000      	b.n	8005a24 <__cvt+0x44>
 8005a22:	2103      	movs	r1, #3
 8005a24:	ab03      	add	r3, sp, #12
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	ab02      	add	r3, sp, #8
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	ec45 4b10 	vmov	d0, r4, r5
 8005a30:	4653      	mov	r3, sl
 8005a32:	4632      	mov	r2, r6
 8005a34:	f000 fee8 	bl	8006808 <_dtoa_r>
 8005a38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	d102      	bne.n	8005a46 <__cvt+0x66>
 8005a40:	f019 0f01 	tst.w	r9, #1
 8005a44:	d022      	beq.n	8005a8c <__cvt+0xac>
 8005a46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a4a:	eb07 0906 	add.w	r9, r7, r6
 8005a4e:	d110      	bne.n	8005a72 <__cvt+0x92>
 8005a50:	783b      	ldrb	r3, [r7, #0]
 8005a52:	2b30      	cmp	r3, #48	; 0x30
 8005a54:	d10a      	bne.n	8005a6c <__cvt+0x8c>
 8005a56:	2200      	movs	r2, #0
 8005a58:	2300      	movs	r3, #0
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f7fb f853 	bl	8000b08 <__aeabi_dcmpeq>
 8005a62:	b918      	cbnz	r0, 8005a6c <__cvt+0x8c>
 8005a64:	f1c6 0601 	rsb	r6, r6, #1
 8005a68:	f8ca 6000 	str.w	r6, [sl]
 8005a6c:	f8da 3000 	ldr.w	r3, [sl]
 8005a70:	4499      	add	r9, r3
 8005a72:	2200      	movs	r2, #0
 8005a74:	2300      	movs	r3, #0
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fb f845 	bl	8000b08 <__aeabi_dcmpeq>
 8005a7e:	b108      	cbz	r0, 8005a84 <__cvt+0xa4>
 8005a80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a84:	2230      	movs	r2, #48	; 0x30
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	454b      	cmp	r3, r9
 8005a8a:	d307      	bcc.n	8005a9c <__cvt+0xbc>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a90:	1bdb      	subs	r3, r3, r7
 8005a92:	4638      	mov	r0, r7
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	b004      	add	sp, #16
 8005a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9c:	1c59      	adds	r1, r3, #1
 8005a9e:	9103      	str	r1, [sp, #12]
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e7f0      	b.n	8005a86 <__cvt+0xa6>

08005aa4 <__exponent>:
 8005aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	bfb8      	it	lt
 8005aac:	4249      	neglt	r1, r1
 8005aae:	f803 2b02 	strb.w	r2, [r3], #2
 8005ab2:	bfb4      	ite	lt
 8005ab4:	222d      	movlt	r2, #45	; 0x2d
 8005ab6:	222b      	movge	r2, #43	; 0x2b
 8005ab8:	2909      	cmp	r1, #9
 8005aba:	7042      	strb	r2, [r0, #1]
 8005abc:	dd2a      	ble.n	8005b14 <__exponent+0x70>
 8005abe:	f10d 0407 	add.w	r4, sp, #7
 8005ac2:	46a4      	mov	ip, r4
 8005ac4:	270a      	movs	r7, #10
 8005ac6:	46a6      	mov	lr, r4
 8005ac8:	460a      	mov	r2, r1
 8005aca:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ace:	fb07 1516 	mls	r5, r7, r6, r1
 8005ad2:	3530      	adds	r5, #48	; 0x30
 8005ad4:	2a63      	cmp	r2, #99	; 0x63
 8005ad6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ada:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ade:	4631      	mov	r1, r6
 8005ae0:	dcf1      	bgt.n	8005ac6 <__exponent+0x22>
 8005ae2:	3130      	adds	r1, #48	; 0x30
 8005ae4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ae8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005aec:	1c44      	adds	r4, r0, #1
 8005aee:	4629      	mov	r1, r5
 8005af0:	4561      	cmp	r1, ip
 8005af2:	d30a      	bcc.n	8005b0a <__exponent+0x66>
 8005af4:	f10d 0209 	add.w	r2, sp, #9
 8005af8:	eba2 020e 	sub.w	r2, r2, lr
 8005afc:	4565      	cmp	r5, ip
 8005afe:	bf88      	it	hi
 8005b00:	2200      	movhi	r2, #0
 8005b02:	4413      	add	r3, r2
 8005b04:	1a18      	subs	r0, r3, r0
 8005b06:	b003      	add	sp, #12
 8005b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b12:	e7ed      	b.n	8005af0 <__exponent+0x4c>
 8005b14:	2330      	movs	r3, #48	; 0x30
 8005b16:	3130      	adds	r1, #48	; 0x30
 8005b18:	7083      	strb	r3, [r0, #2]
 8005b1a:	70c1      	strb	r1, [r0, #3]
 8005b1c:	1d03      	adds	r3, r0, #4
 8005b1e:	e7f1      	b.n	8005b04 <__exponent+0x60>

08005b20 <_printf_float>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	ed2d 8b02 	vpush	{d8}
 8005b28:	b08d      	sub	sp, #52	; 0x34
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b30:	4616      	mov	r6, r2
 8005b32:	461f      	mov	r7, r3
 8005b34:	4605      	mov	r5, r0
 8005b36:	f001 fe0b 	bl	8007750 <_localeconv_r>
 8005b3a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b3e:	4650      	mov	r0, sl
 8005b40:	f7fa fb66 	bl	8000210 <strlen>
 8005b44:	2300      	movs	r3, #0
 8005b46:	930a      	str	r3, [sp, #40]	; 0x28
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	9305      	str	r3, [sp, #20]
 8005b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b54:	3307      	adds	r3, #7
 8005b56:	f023 0307 	bic.w	r3, r3, #7
 8005b5a:	f103 0208 	add.w	r2, r3, #8
 8005b5e:	f8c8 2000 	str.w	r2, [r8]
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b78:	ee08 0a10 	vmov	s16, r0
 8005b7c:	4b9f      	ldr	r3, [pc, #636]	; (8005dfc <_printf_float+0x2dc>)
 8005b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	f7fa fff1 	bl	8000b6c <__aeabi_dcmpun>
 8005b8a:	bb88      	cbnz	r0, 8005bf0 <_printf_float+0xd0>
 8005b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b90:	4b9a      	ldr	r3, [pc, #616]	; (8005dfc <_printf_float+0x2dc>)
 8005b92:	f04f 32ff 	mov.w	r2, #4294967295
 8005b96:	f7fa ffcb 	bl	8000b30 <__aeabi_dcmple>
 8005b9a:	bb48      	cbnz	r0, 8005bf0 <_printf_float+0xd0>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa ffba 	bl	8000b1c <__aeabi_dcmplt>
 8005ba8:	b110      	cbz	r0, 8005bb0 <_printf_float+0x90>
 8005baa:	232d      	movs	r3, #45	; 0x2d
 8005bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb0:	4b93      	ldr	r3, [pc, #588]	; (8005e00 <_printf_float+0x2e0>)
 8005bb2:	4894      	ldr	r0, [pc, #592]	; (8005e04 <_printf_float+0x2e4>)
 8005bb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bb8:	bf94      	ite	ls
 8005bba:	4698      	movls	r8, r3
 8005bbc:	4680      	movhi	r8, r0
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	f023 0204 	bic.w	r2, r3, #4
 8005bc8:	6022      	str	r2, [r4, #0]
 8005bca:	f04f 0900 	mov.w	r9, #0
 8005bce:	9700      	str	r7, [sp, #0]
 8005bd0:	4633      	mov	r3, r6
 8005bd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 f9d8 	bl	8005f8c <_printf_common>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f040 8090 	bne.w	8005d02 <_printf_float+0x1e2>
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295
 8005be6:	b00d      	add	sp, #52	; 0x34
 8005be8:	ecbd 8b02 	vpop	{d8}
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa ffb8 	bl	8000b6c <__aeabi_dcmpun>
 8005bfc:	b140      	cbz	r0, 8005c10 <_printf_float+0xf0>
 8005bfe:	464b      	mov	r3, r9
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfbc      	itt	lt
 8005c04:	232d      	movlt	r3, #45	; 0x2d
 8005c06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c0a:	487f      	ldr	r0, [pc, #508]	; (8005e08 <_printf_float+0x2e8>)
 8005c0c:	4b7f      	ldr	r3, [pc, #508]	; (8005e0c <_printf_float+0x2ec>)
 8005c0e:	e7d1      	b.n	8005bb4 <_printf_float+0x94>
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c16:	9206      	str	r2, [sp, #24]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	d13f      	bne.n	8005c9c <_printf_float+0x17c>
 8005c1c:	2306      	movs	r3, #6
 8005c1e:	6063      	str	r3, [r4, #4]
 8005c20:	9b05      	ldr	r3, [sp, #20]
 8005c22:	6861      	ldr	r1, [r4, #4]
 8005c24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c32:	ab09      	add	r3, sp, #36	; 0x24
 8005c34:	ec49 8b10 	vmov	d0, r8, r9
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c40:	4628      	mov	r0, r5
 8005c42:	f7ff fecd 	bl	80059e0 <__cvt>
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c4a:	2b47      	cmp	r3, #71	; 0x47
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	d108      	bne.n	8005c62 <_printf_float+0x142>
 8005c50:	1cc8      	adds	r0, r1, #3
 8005c52:	db02      	blt.n	8005c5a <_printf_float+0x13a>
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	4299      	cmp	r1, r3
 8005c58:	dd41      	ble.n	8005cde <_printf_float+0x1be>
 8005c5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c5e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c66:	d820      	bhi.n	8005caa <_printf_float+0x18a>
 8005c68:	3901      	subs	r1, #1
 8005c6a:	465a      	mov	r2, fp
 8005c6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c70:	9109      	str	r1, [sp, #36]	; 0x24
 8005c72:	f7ff ff17 	bl	8005aa4 <__exponent>
 8005c76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c78:	1813      	adds	r3, r2, r0
 8005c7a:	2a01      	cmp	r2, #1
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	dc02      	bgt.n	8005c88 <_printf_float+0x168>
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	07d2      	lsls	r2, r2, #31
 8005c86:	d501      	bpl.n	8005c8c <_printf_float+0x16c>
 8005c88:	3301      	adds	r3, #1
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d09c      	beq.n	8005bce <_printf_float+0xae>
 8005c94:	232d      	movs	r3, #45	; 0x2d
 8005c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9a:	e798      	b.n	8005bce <_printf_float+0xae>
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	2a47      	cmp	r2, #71	; 0x47
 8005ca0:	d1be      	bne.n	8005c20 <_printf_float+0x100>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1bc      	bne.n	8005c20 <_printf_float+0x100>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e7b9      	b.n	8005c1e <_printf_float+0xfe>
 8005caa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cae:	d118      	bne.n	8005ce2 <_printf_float+0x1c2>
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	dd0b      	ble.n	8005cce <_printf_float+0x1ae>
 8005cb6:	6121      	str	r1, [r4, #16]
 8005cb8:	b913      	cbnz	r3, 8005cc0 <_printf_float+0x1a0>
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	07d0      	lsls	r0, r2, #31
 8005cbe:	d502      	bpl.n	8005cc6 <_printf_float+0x1a6>
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	440b      	add	r3, r1
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cc8:	f04f 0900 	mov.w	r9, #0
 8005ccc:	e7de      	b.n	8005c8c <_printf_float+0x16c>
 8005cce:	b913      	cbnz	r3, 8005cd6 <_printf_float+0x1b6>
 8005cd0:	6822      	ldr	r2, [r4, #0]
 8005cd2:	07d2      	lsls	r2, r2, #31
 8005cd4:	d501      	bpl.n	8005cda <_printf_float+0x1ba>
 8005cd6:	3302      	adds	r3, #2
 8005cd8:	e7f4      	b.n	8005cc4 <_printf_float+0x1a4>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7f2      	b.n	8005cc4 <_printf_float+0x1a4>
 8005cde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce4:	4299      	cmp	r1, r3
 8005ce6:	db05      	blt.n	8005cf4 <_printf_float+0x1d4>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	6121      	str	r1, [r4, #16]
 8005cec:	07d8      	lsls	r0, r3, #31
 8005cee:	d5ea      	bpl.n	8005cc6 <_printf_float+0x1a6>
 8005cf0:	1c4b      	adds	r3, r1, #1
 8005cf2:	e7e7      	b.n	8005cc4 <_printf_float+0x1a4>
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	bfd4      	ite	le
 8005cf8:	f1c1 0202 	rsble	r2, r1, #2
 8005cfc:	2201      	movgt	r2, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	e7e0      	b.n	8005cc4 <_printf_float+0x1a4>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	055a      	lsls	r2, r3, #21
 8005d06:	d407      	bmi.n	8005d18 <_printf_float+0x1f8>
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	d12c      	bne.n	8005d70 <_printf_float+0x250>
 8005d16:	e764      	b.n	8005be2 <_printf_float+0xc2>
 8005d18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d1c:	f240 80e0 	bls.w	8005ee0 <_printf_float+0x3c0>
 8005d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f7fa feee 	bl	8000b08 <__aeabi_dcmpeq>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d034      	beq.n	8005d9a <_printf_float+0x27a>
 8005d30:	4a37      	ldr	r2, [pc, #220]	; (8005e10 <_printf_float+0x2f0>)
 8005d32:	2301      	movs	r3, #1
 8005d34:	4631      	mov	r1, r6
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b8      	blx	r7
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	f43f af51 	beq.w	8005be2 <_printf_float+0xc2>
 8005d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d44:	429a      	cmp	r2, r3
 8005d46:	db02      	blt.n	8005d4e <_printf_float+0x22e>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	07d8      	lsls	r0, r3, #31
 8005d4c:	d510      	bpl.n	8005d70 <_printf_float+0x250>
 8005d4e:	ee18 3a10 	vmov	r3, s16
 8005d52:	4652      	mov	r2, sl
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f af41 	beq.w	8005be2 <_printf_float+0xc2>
 8005d60:	f04f 0800 	mov.w	r8, #0
 8005d64:	f104 091a 	add.w	r9, r4, #26
 8005d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4543      	cmp	r3, r8
 8005d6e:	dc09      	bgt.n	8005d84 <_printf_float+0x264>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	079b      	lsls	r3, r3, #30
 8005d74:	f100 8105 	bmi.w	8005f82 <_printf_float+0x462>
 8005d78:	68e0      	ldr	r0, [r4, #12]
 8005d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d7c:	4298      	cmp	r0, r3
 8005d7e:	bfb8      	it	lt
 8005d80:	4618      	movlt	r0, r3
 8005d82:	e730      	b.n	8005be6 <_printf_float+0xc6>
 8005d84:	2301      	movs	r3, #1
 8005d86:	464a      	mov	r2, r9
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f af27 	beq.w	8005be2 <_printf_float+0xc2>
 8005d94:	f108 0801 	add.w	r8, r8, #1
 8005d98:	e7e6      	b.n	8005d68 <_printf_float+0x248>
 8005d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dc39      	bgt.n	8005e14 <_printf_float+0x2f4>
 8005da0:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <_printf_float+0x2f0>)
 8005da2:	2301      	movs	r3, #1
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	f43f af19 	beq.w	8005be2 <_printf_float+0xc2>
 8005db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d102      	bne.n	8005dbe <_printf_float+0x29e>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	07d9      	lsls	r1, r3, #31
 8005dbc:	d5d8      	bpl.n	8005d70 <_printf_float+0x250>
 8005dbe:	ee18 3a10 	vmov	r3, s16
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af09 	beq.w	8005be2 <_printf_float+0xc2>
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	f104 0a1a 	add.w	sl, r4, #26
 8005dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dda:	425b      	negs	r3, r3
 8005ddc:	454b      	cmp	r3, r9
 8005dde:	dc01      	bgt.n	8005de4 <_printf_float+0x2c4>
 8005de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de2:	e792      	b.n	8005d0a <_printf_float+0x1ea>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4652      	mov	r2, sl
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f aef7 	beq.w	8005be2 <_printf_float+0xc2>
 8005df4:	f109 0901 	add.w	r9, r9, #1
 8005df8:	e7ee      	b.n	8005dd8 <_printf_float+0x2b8>
 8005dfa:	bf00      	nop
 8005dfc:	7fefffff 	.word	0x7fefffff
 8005e00:	08008884 	.word	0x08008884
 8005e04:	08008888 	.word	0x08008888
 8005e08:	08008890 	.word	0x08008890
 8005e0c:	0800888c 	.word	0x0800888c
 8005e10:	08008894 	.word	0x08008894
 8005e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	bfa8      	it	ge
 8005e1c:	461a      	movge	r2, r3
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	4691      	mov	r9, r2
 8005e22:	dc37      	bgt.n	8005e94 <_printf_float+0x374>
 8005e24:	f04f 0b00 	mov.w	fp, #0
 8005e28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e2c:	f104 021a 	add.w	r2, r4, #26
 8005e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	eba3 0309 	sub.w	r3, r3, r9
 8005e38:	455b      	cmp	r3, fp
 8005e3a:	dc33      	bgt.n	8005ea4 <_printf_float+0x384>
 8005e3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e40:	429a      	cmp	r2, r3
 8005e42:	db3b      	blt.n	8005ebc <_printf_float+0x39c>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	07da      	lsls	r2, r3, #31
 8005e48:	d438      	bmi.n	8005ebc <_printf_float+0x39c>
 8005e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e4c:	9b05      	ldr	r3, [sp, #20]
 8005e4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	eba2 0901 	sub.w	r9, r2, r1
 8005e56:	4599      	cmp	r9, r3
 8005e58:	bfa8      	it	ge
 8005e5a:	4699      	movge	r9, r3
 8005e5c:	f1b9 0f00 	cmp.w	r9, #0
 8005e60:	dc35      	bgt.n	8005ece <_printf_float+0x3ae>
 8005e62:	f04f 0800 	mov.w	r8, #0
 8005e66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e6a:	f104 0a1a 	add.w	sl, r4, #26
 8005e6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	eba3 0309 	sub.w	r3, r3, r9
 8005e78:	4543      	cmp	r3, r8
 8005e7a:	f77f af79 	ble.w	8005d70 <_printf_float+0x250>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4652      	mov	r2, sl
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f43f aeaa 	beq.w	8005be2 <_printf_float+0xc2>
 8005e8e:	f108 0801 	add.w	r8, r8, #1
 8005e92:	e7ec      	b.n	8005e6e <_printf_float+0x34e>
 8005e94:	4613      	mov	r3, r2
 8005e96:	4631      	mov	r1, r6
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d1c0      	bne.n	8005e24 <_printf_float+0x304>
 8005ea2:	e69e      	b.n	8005be2 <_printf_float+0xc2>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	9205      	str	r2, [sp, #20]
 8005eac:	47b8      	blx	r7
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f43f ae97 	beq.w	8005be2 <_printf_float+0xc2>
 8005eb4:	9a05      	ldr	r2, [sp, #20]
 8005eb6:	f10b 0b01 	add.w	fp, fp, #1
 8005eba:	e7b9      	b.n	8005e30 <_printf_float+0x310>
 8005ebc:	ee18 3a10 	vmov	r3, s16
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d1be      	bne.n	8005e4a <_printf_float+0x32a>
 8005ecc:	e689      	b.n	8005be2 <_printf_float+0xc2>
 8005ece:	9a05      	ldr	r2, [sp, #20]
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	4442      	add	r2, r8
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	d1c1      	bne.n	8005e62 <_printf_float+0x342>
 8005ede:	e680      	b.n	8005be2 <_printf_float+0xc2>
 8005ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee2:	2a01      	cmp	r2, #1
 8005ee4:	dc01      	bgt.n	8005eea <_printf_float+0x3ca>
 8005ee6:	07db      	lsls	r3, r3, #31
 8005ee8:	d538      	bpl.n	8005f5c <_printf_float+0x43c>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4642      	mov	r2, r8
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	f43f ae74 	beq.w	8005be2 <_printf_float+0xc2>
 8005efa:	ee18 3a10 	vmov	r3, s16
 8005efe:	4652      	mov	r2, sl
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	f43f ae6b 	beq.w	8005be2 <_printf_float+0xc2>
 8005f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f10:	2200      	movs	r2, #0
 8005f12:	2300      	movs	r3, #0
 8005f14:	f7fa fdf8 	bl	8000b08 <__aeabi_dcmpeq>
 8005f18:	b9d8      	cbnz	r0, 8005f52 <_printf_float+0x432>
 8005f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1c:	f108 0201 	add.w	r2, r8, #1
 8005f20:	3b01      	subs	r3, #1
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d10e      	bne.n	8005f4a <_printf_float+0x42a>
 8005f2c:	e659      	b.n	8005be2 <_printf_float+0xc2>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4652      	mov	r2, sl
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	f43f ae52 	beq.w	8005be2 <_printf_float+0xc2>
 8005f3e:	f108 0801 	add.w	r8, r8, #1
 8005f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f44:	3b01      	subs	r3, #1
 8005f46:	4543      	cmp	r3, r8
 8005f48:	dcf1      	bgt.n	8005f2e <_printf_float+0x40e>
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f50:	e6dc      	b.n	8005d0c <_printf_float+0x1ec>
 8005f52:	f04f 0800 	mov.w	r8, #0
 8005f56:	f104 0a1a 	add.w	sl, r4, #26
 8005f5a:	e7f2      	b.n	8005f42 <_printf_float+0x422>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4642      	mov	r2, r8
 8005f60:	e7df      	b.n	8005f22 <_printf_float+0x402>
 8005f62:	2301      	movs	r3, #1
 8005f64:	464a      	mov	r2, r9
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	f43f ae38 	beq.w	8005be2 <_printf_float+0xc2>
 8005f72:	f108 0801 	add.w	r8, r8, #1
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f7a:	1a5b      	subs	r3, r3, r1
 8005f7c:	4543      	cmp	r3, r8
 8005f7e:	dcf0      	bgt.n	8005f62 <_printf_float+0x442>
 8005f80:	e6fa      	b.n	8005d78 <_printf_float+0x258>
 8005f82:	f04f 0800 	mov.w	r8, #0
 8005f86:	f104 0919 	add.w	r9, r4, #25
 8005f8a:	e7f4      	b.n	8005f76 <_printf_float+0x456>

08005f8c <_printf_common>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	4616      	mov	r6, r2
 8005f92:	4699      	mov	r9, r3
 8005f94:	688a      	ldr	r2, [r1, #8]
 8005f96:	690b      	ldr	r3, [r1, #16]
 8005f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bfb8      	it	lt
 8005fa0:	4613      	movlt	r3, r2
 8005fa2:	6033      	str	r3, [r6, #0]
 8005fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fa8:	4607      	mov	r7, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b10a      	cbz	r2, 8005fb2 <_printf_common+0x26>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0699      	lsls	r1, r3, #26
 8005fb6:	bf42      	ittt	mi
 8005fb8:	6833      	ldrmi	r3, [r6, #0]
 8005fba:	3302      	addmi	r3, #2
 8005fbc:	6033      	strmi	r3, [r6, #0]
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	f015 0506 	ands.w	r5, r5, #6
 8005fc4:	d106      	bne.n	8005fd4 <_printf_common+0x48>
 8005fc6:	f104 0a19 	add.w	sl, r4, #25
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	6832      	ldr	r2, [r6, #0]
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dc26      	bgt.n	8006022 <_printf_common+0x96>
 8005fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fd8:	1e13      	subs	r3, r2, #0
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	bf18      	it	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	0692      	lsls	r2, r2, #26
 8005fe2:	d42b      	bmi.n	800603c <_printf_common+0xb0>
 8005fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d01e      	beq.n	8006030 <_printf_common+0xa4>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	68e5      	ldr	r5, [r4, #12]
 8005ff6:	6832      	ldr	r2, [r6, #0]
 8005ff8:	f003 0306 	and.w	r3, r3, #6
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	bf08      	it	eq
 8006000:	1aad      	subeq	r5, r5, r2
 8006002:	68a3      	ldr	r3, [r4, #8]
 8006004:	6922      	ldr	r2, [r4, #16]
 8006006:	bf0c      	ite	eq
 8006008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800600c:	2500      	movne	r5, #0
 800600e:	4293      	cmp	r3, r2
 8006010:	bfc4      	itt	gt
 8006012:	1a9b      	subgt	r3, r3, r2
 8006014:	18ed      	addgt	r5, r5, r3
 8006016:	2600      	movs	r6, #0
 8006018:	341a      	adds	r4, #26
 800601a:	42b5      	cmp	r5, r6
 800601c:	d11a      	bne.n	8006054 <_printf_common+0xc8>
 800601e:	2000      	movs	r0, #0
 8006020:	e008      	b.n	8006034 <_printf_common+0xa8>
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4649      	mov	r1, r9
 8006028:	4638      	mov	r0, r7
 800602a:	47c0      	blx	r8
 800602c:	3001      	adds	r0, #1
 800602e:	d103      	bne.n	8006038 <_printf_common+0xac>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	3501      	adds	r5, #1
 800603a:	e7c6      	b.n	8005fca <_printf_common+0x3e>
 800603c:	18e1      	adds	r1, r4, r3
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	2030      	movs	r0, #48	; 0x30
 8006042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006046:	4422      	add	r2, r4
 8006048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800604c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006050:	3302      	adds	r3, #2
 8006052:	e7c7      	b.n	8005fe4 <_printf_common+0x58>
 8006054:	2301      	movs	r3, #1
 8006056:	4622      	mov	r2, r4
 8006058:	4649      	mov	r1, r9
 800605a:	4638      	mov	r0, r7
 800605c:	47c0      	blx	r8
 800605e:	3001      	adds	r0, #1
 8006060:	d0e6      	beq.n	8006030 <_printf_common+0xa4>
 8006062:	3601      	adds	r6, #1
 8006064:	e7d9      	b.n	800601a <_printf_common+0x8e>
	...

08006068 <_printf_i>:
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	4691      	mov	r9, r2
 8006070:	7e27      	ldrb	r7, [r4, #24]
 8006072:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006074:	2f78      	cmp	r7, #120	; 0x78
 8006076:	4680      	mov	r8, r0
 8006078:	469a      	mov	sl, r3
 800607a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800607e:	d807      	bhi.n	8006090 <_printf_i+0x28>
 8006080:	2f62      	cmp	r7, #98	; 0x62
 8006082:	d80a      	bhi.n	800609a <_printf_i+0x32>
 8006084:	2f00      	cmp	r7, #0
 8006086:	f000 80d8 	beq.w	800623a <_printf_i+0x1d2>
 800608a:	2f58      	cmp	r7, #88	; 0x58
 800608c:	f000 80a3 	beq.w	80061d6 <_printf_i+0x16e>
 8006090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006098:	e03a      	b.n	8006110 <_printf_i+0xa8>
 800609a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800609e:	2b15      	cmp	r3, #21
 80060a0:	d8f6      	bhi.n	8006090 <_printf_i+0x28>
 80060a2:	a001      	add	r0, pc, #4	; (adr r0, 80060a8 <_printf_i+0x40>)
 80060a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006091 	.word	0x08006091
 80060b4:	08006091 	.word	0x08006091
 80060b8:	08006091 	.word	0x08006091
 80060bc:	08006091 	.word	0x08006091
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006091 	.word	0x08006091
 80060c8:	08006091 	.word	0x08006091
 80060cc:	08006091 	.word	0x08006091
 80060d0:	08006091 	.word	0x08006091
 80060d4:	08006221 	.word	0x08006221
 80060d8:	08006145 	.word	0x08006145
 80060dc:	08006203 	.word	0x08006203
 80060e0:	08006091 	.word	0x08006091
 80060e4:	08006091 	.word	0x08006091
 80060e8:	08006243 	.word	0x08006243
 80060ec:	08006091 	.word	0x08006091
 80060f0:	08006145 	.word	0x08006145
 80060f4:	08006091 	.word	0x08006091
 80060f8:	08006091 	.word	0x08006091
 80060fc:	0800620b 	.word	0x0800620b
 8006100:	680b      	ldr	r3, [r1, #0]
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	600a      	str	r2, [r1, #0]
 8006108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800610c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006110:	2301      	movs	r3, #1
 8006112:	e0a3      	b.n	800625c <_printf_i+0x1f4>
 8006114:	6825      	ldr	r5, [r4, #0]
 8006116:	6808      	ldr	r0, [r1, #0]
 8006118:	062e      	lsls	r6, r5, #24
 800611a:	f100 0304 	add.w	r3, r0, #4
 800611e:	d50a      	bpl.n	8006136 <_printf_i+0xce>
 8006120:	6805      	ldr	r5, [r0, #0]
 8006122:	600b      	str	r3, [r1, #0]
 8006124:	2d00      	cmp	r5, #0
 8006126:	da03      	bge.n	8006130 <_printf_i+0xc8>
 8006128:	232d      	movs	r3, #45	; 0x2d
 800612a:	426d      	negs	r5, r5
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006130:	485e      	ldr	r0, [pc, #376]	; (80062ac <_printf_i+0x244>)
 8006132:	230a      	movs	r3, #10
 8006134:	e019      	b.n	800616a <_printf_i+0x102>
 8006136:	f015 0f40 	tst.w	r5, #64	; 0x40
 800613a:	6805      	ldr	r5, [r0, #0]
 800613c:	600b      	str	r3, [r1, #0]
 800613e:	bf18      	it	ne
 8006140:	b22d      	sxthne	r5, r5
 8006142:	e7ef      	b.n	8006124 <_printf_i+0xbc>
 8006144:	680b      	ldr	r3, [r1, #0]
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	1d18      	adds	r0, r3, #4
 800614a:	6008      	str	r0, [r1, #0]
 800614c:	0628      	lsls	r0, r5, #24
 800614e:	d501      	bpl.n	8006154 <_printf_i+0xec>
 8006150:	681d      	ldr	r5, [r3, #0]
 8006152:	e002      	b.n	800615a <_printf_i+0xf2>
 8006154:	0669      	lsls	r1, r5, #25
 8006156:	d5fb      	bpl.n	8006150 <_printf_i+0xe8>
 8006158:	881d      	ldrh	r5, [r3, #0]
 800615a:	4854      	ldr	r0, [pc, #336]	; (80062ac <_printf_i+0x244>)
 800615c:	2f6f      	cmp	r7, #111	; 0x6f
 800615e:	bf0c      	ite	eq
 8006160:	2308      	moveq	r3, #8
 8006162:	230a      	movne	r3, #10
 8006164:	2100      	movs	r1, #0
 8006166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800616a:	6866      	ldr	r6, [r4, #4]
 800616c:	60a6      	str	r6, [r4, #8]
 800616e:	2e00      	cmp	r6, #0
 8006170:	bfa2      	ittt	ge
 8006172:	6821      	ldrge	r1, [r4, #0]
 8006174:	f021 0104 	bicge.w	r1, r1, #4
 8006178:	6021      	strge	r1, [r4, #0]
 800617a:	b90d      	cbnz	r5, 8006180 <_printf_i+0x118>
 800617c:	2e00      	cmp	r6, #0
 800617e:	d04d      	beq.n	800621c <_printf_i+0x1b4>
 8006180:	4616      	mov	r6, r2
 8006182:	fbb5 f1f3 	udiv	r1, r5, r3
 8006186:	fb03 5711 	mls	r7, r3, r1, r5
 800618a:	5dc7      	ldrb	r7, [r0, r7]
 800618c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006190:	462f      	mov	r7, r5
 8006192:	42bb      	cmp	r3, r7
 8006194:	460d      	mov	r5, r1
 8006196:	d9f4      	bls.n	8006182 <_printf_i+0x11a>
 8006198:	2b08      	cmp	r3, #8
 800619a:	d10b      	bne.n	80061b4 <_printf_i+0x14c>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07df      	lsls	r7, r3, #31
 80061a0:	d508      	bpl.n	80061b4 <_printf_i+0x14c>
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	6861      	ldr	r1, [r4, #4]
 80061a6:	4299      	cmp	r1, r3
 80061a8:	bfde      	ittt	le
 80061aa:	2330      	movle	r3, #48	; 0x30
 80061ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061b4:	1b92      	subs	r2, r2, r6
 80061b6:	6122      	str	r2, [r4, #16]
 80061b8:	f8cd a000 	str.w	sl, [sp]
 80061bc:	464b      	mov	r3, r9
 80061be:	aa03      	add	r2, sp, #12
 80061c0:	4621      	mov	r1, r4
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7ff fee2 	bl	8005f8c <_printf_common>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d14c      	bne.n	8006266 <_printf_i+0x1fe>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	b004      	add	sp, #16
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	4835      	ldr	r0, [pc, #212]	; (80062ac <_printf_i+0x244>)
 80061d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	680e      	ldr	r6, [r1, #0]
 80061e0:	061f      	lsls	r7, r3, #24
 80061e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80061e6:	600e      	str	r6, [r1, #0]
 80061e8:	d514      	bpl.n	8006214 <_printf_i+0x1ac>
 80061ea:	07d9      	lsls	r1, r3, #31
 80061ec:	bf44      	itt	mi
 80061ee:	f043 0320 	orrmi.w	r3, r3, #32
 80061f2:	6023      	strmi	r3, [r4, #0]
 80061f4:	b91d      	cbnz	r5, 80061fe <_printf_i+0x196>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f023 0320 	bic.w	r3, r3, #32
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	2310      	movs	r3, #16
 8006200:	e7b0      	b.n	8006164 <_printf_i+0xfc>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	f043 0320 	orr.w	r3, r3, #32
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	2378      	movs	r3, #120	; 0x78
 800620c:	4828      	ldr	r0, [pc, #160]	; (80062b0 <_printf_i+0x248>)
 800620e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006212:	e7e3      	b.n	80061dc <_printf_i+0x174>
 8006214:	065e      	lsls	r6, r3, #25
 8006216:	bf48      	it	mi
 8006218:	b2ad      	uxthmi	r5, r5
 800621a:	e7e6      	b.n	80061ea <_printf_i+0x182>
 800621c:	4616      	mov	r6, r2
 800621e:	e7bb      	b.n	8006198 <_printf_i+0x130>
 8006220:	680b      	ldr	r3, [r1, #0]
 8006222:	6826      	ldr	r6, [r4, #0]
 8006224:	6960      	ldr	r0, [r4, #20]
 8006226:	1d1d      	adds	r5, r3, #4
 8006228:	600d      	str	r5, [r1, #0]
 800622a:	0635      	lsls	r5, r6, #24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	d501      	bpl.n	8006234 <_printf_i+0x1cc>
 8006230:	6018      	str	r0, [r3, #0]
 8006232:	e002      	b.n	800623a <_printf_i+0x1d2>
 8006234:	0671      	lsls	r1, r6, #25
 8006236:	d5fb      	bpl.n	8006230 <_printf_i+0x1c8>
 8006238:	8018      	strh	r0, [r3, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	4616      	mov	r6, r2
 8006240:	e7ba      	b.n	80061b8 <_printf_i+0x150>
 8006242:	680b      	ldr	r3, [r1, #0]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	600a      	str	r2, [r1, #0]
 8006248:	681e      	ldr	r6, [r3, #0]
 800624a:	6862      	ldr	r2, [r4, #4]
 800624c:	2100      	movs	r1, #0
 800624e:	4630      	mov	r0, r6
 8006250:	f7f9 ffe6 	bl	8000220 <memchr>
 8006254:	b108      	cbz	r0, 800625a <_printf_i+0x1f2>
 8006256:	1b80      	subs	r0, r0, r6
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2300      	movs	r3, #0
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	e7a8      	b.n	80061b8 <_printf_i+0x150>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	4632      	mov	r2, r6
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	47d0      	blx	sl
 8006270:	3001      	adds	r0, #1
 8006272:	d0ab      	beq.n	80061cc <_printf_i+0x164>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d413      	bmi.n	80062a2 <_printf_i+0x23a>
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	4298      	cmp	r0, r3
 8006280:	bfb8      	it	lt
 8006282:	4618      	movlt	r0, r3
 8006284:	e7a4      	b.n	80061d0 <_printf_i+0x168>
 8006286:	2301      	movs	r3, #1
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d09b      	beq.n	80061cc <_printf_i+0x164>
 8006294:	3501      	adds	r5, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	9903      	ldr	r1, [sp, #12]
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	42ab      	cmp	r3, r5
 800629e:	dcf2      	bgt.n	8006286 <_printf_i+0x21e>
 80062a0:	e7eb      	b.n	800627a <_printf_i+0x212>
 80062a2:	2500      	movs	r5, #0
 80062a4:	f104 0619 	add.w	r6, r4, #25
 80062a8:	e7f5      	b.n	8006296 <_printf_i+0x22e>
 80062aa:	bf00      	nop
 80062ac:	08008896 	.word	0x08008896
 80062b0:	080088a7 	.word	0x080088a7

080062b4 <iprintf>:
 80062b4:	b40f      	push	{r0, r1, r2, r3}
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <iprintf+0x2c>)
 80062b8:	b513      	push	{r0, r1, r4, lr}
 80062ba:	681c      	ldr	r4, [r3, #0]
 80062bc:	b124      	cbz	r4, 80062c8 <iprintf+0x14>
 80062be:	69a3      	ldr	r3, [r4, #24]
 80062c0:	b913      	cbnz	r3, 80062c8 <iprintf+0x14>
 80062c2:	4620      	mov	r0, r4
 80062c4:	f001 f9a6 	bl	8007614 <__sinit>
 80062c8:	ab05      	add	r3, sp, #20
 80062ca:	9a04      	ldr	r2, [sp, #16]
 80062cc:	68a1      	ldr	r1, [r4, #8]
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f001 ff21 	bl	8008118 <_vfiprintf_r>
 80062d6:	b002      	add	sp, #8
 80062d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062dc:	b004      	add	sp, #16
 80062de:	4770      	bx	lr
 80062e0:	2000003c 	.word	0x2000003c

080062e4 <_puts_r>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	460e      	mov	r6, r1
 80062e8:	4605      	mov	r5, r0
 80062ea:	b118      	cbz	r0, 80062f4 <_puts_r+0x10>
 80062ec:	6983      	ldr	r3, [r0, #24]
 80062ee:	b90b      	cbnz	r3, 80062f4 <_puts_r+0x10>
 80062f0:	f001 f990 	bl	8007614 <__sinit>
 80062f4:	69ab      	ldr	r3, [r5, #24]
 80062f6:	68ac      	ldr	r4, [r5, #8]
 80062f8:	b913      	cbnz	r3, 8006300 <_puts_r+0x1c>
 80062fa:	4628      	mov	r0, r5
 80062fc:	f001 f98a 	bl	8007614 <__sinit>
 8006300:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <_puts_r+0xd0>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d120      	bne.n	8006348 <_puts_r+0x64>
 8006306:	686c      	ldr	r4, [r5, #4]
 8006308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d405      	bmi.n	800631a <_puts_r+0x36>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	0598      	lsls	r0, r3, #22
 8006312:	d402      	bmi.n	800631a <_puts_r+0x36>
 8006314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006316:	f001 fa20 	bl	800775a <__retarget_lock_acquire_recursive>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	0719      	lsls	r1, r3, #28
 800631e:	d51d      	bpl.n	800635c <_puts_r+0x78>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	b1db      	cbz	r3, 800635c <_puts_r+0x78>
 8006324:	3e01      	subs	r6, #1
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800632c:	3b01      	subs	r3, #1
 800632e:	60a3      	str	r3, [r4, #8]
 8006330:	bb39      	cbnz	r1, 8006382 <_puts_r+0x9e>
 8006332:	2b00      	cmp	r3, #0
 8006334:	da38      	bge.n	80063a8 <_puts_r+0xc4>
 8006336:	4622      	mov	r2, r4
 8006338:	210a      	movs	r1, #10
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f916 	bl	800656c <__swbuf_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d011      	beq.n	8006368 <_puts_r+0x84>
 8006344:	250a      	movs	r5, #10
 8006346:	e011      	b.n	800636c <_puts_r+0x88>
 8006348:	4b1b      	ldr	r3, [pc, #108]	; (80063b8 <_puts_r+0xd4>)
 800634a:	429c      	cmp	r4, r3
 800634c:	d101      	bne.n	8006352 <_puts_r+0x6e>
 800634e:	68ac      	ldr	r4, [r5, #8]
 8006350:	e7da      	b.n	8006308 <_puts_r+0x24>
 8006352:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <_puts_r+0xd8>)
 8006354:	429c      	cmp	r4, r3
 8006356:	bf08      	it	eq
 8006358:	68ec      	ldreq	r4, [r5, #12]
 800635a:	e7d5      	b.n	8006308 <_puts_r+0x24>
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f956 	bl	8006610 <__swsetup_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	d0dd      	beq.n	8006324 <_puts_r+0x40>
 8006368:	f04f 35ff 	mov.w	r5, #4294967295
 800636c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800636e:	07da      	lsls	r2, r3, #31
 8006370:	d405      	bmi.n	800637e <_puts_r+0x9a>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	059b      	lsls	r3, r3, #22
 8006376:	d402      	bmi.n	800637e <_puts_r+0x9a>
 8006378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800637a:	f001 f9ef 	bl	800775c <__retarget_lock_release_recursive>
 800637e:	4628      	mov	r0, r5
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	2b00      	cmp	r3, #0
 8006384:	da04      	bge.n	8006390 <_puts_r+0xac>
 8006386:	69a2      	ldr	r2, [r4, #24]
 8006388:	429a      	cmp	r2, r3
 800638a:	dc06      	bgt.n	800639a <_puts_r+0xb6>
 800638c:	290a      	cmp	r1, #10
 800638e:	d004      	beq.n	800639a <_puts_r+0xb6>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	6022      	str	r2, [r4, #0]
 8006396:	7019      	strb	r1, [r3, #0]
 8006398:	e7c5      	b.n	8006326 <_puts_r+0x42>
 800639a:	4622      	mov	r2, r4
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f8e5 	bl	800656c <__swbuf_r>
 80063a2:	3001      	adds	r0, #1
 80063a4:	d1bf      	bne.n	8006326 <_puts_r+0x42>
 80063a6:	e7df      	b.n	8006368 <_puts_r+0x84>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	250a      	movs	r5, #10
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	6022      	str	r2, [r4, #0]
 80063b0:	701d      	strb	r5, [r3, #0]
 80063b2:	e7db      	b.n	800636c <_puts_r+0x88>
 80063b4:	0800896c 	.word	0x0800896c
 80063b8:	0800898c 	.word	0x0800898c
 80063bc:	0800894c 	.word	0x0800894c

080063c0 <puts>:
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <puts+0xc>)
 80063c2:	4601      	mov	r1, r0
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	f7ff bf8d 	b.w	80062e4 <_puts_r>
 80063ca:	bf00      	nop
 80063cc:	2000003c 	.word	0x2000003c

080063d0 <setbuf>:
 80063d0:	2900      	cmp	r1, #0
 80063d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d6:	bf0c      	ite	eq
 80063d8:	2202      	moveq	r2, #2
 80063da:	2200      	movne	r2, #0
 80063dc:	f000 b800 	b.w	80063e0 <setvbuf>

080063e0 <setvbuf>:
 80063e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	461d      	mov	r5, r3
 80063e6:	4b5d      	ldr	r3, [pc, #372]	; (800655c <setvbuf+0x17c>)
 80063e8:	681f      	ldr	r7, [r3, #0]
 80063ea:	4604      	mov	r4, r0
 80063ec:	460e      	mov	r6, r1
 80063ee:	4690      	mov	r8, r2
 80063f0:	b127      	cbz	r7, 80063fc <setvbuf+0x1c>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	b913      	cbnz	r3, 80063fc <setvbuf+0x1c>
 80063f6:	4638      	mov	r0, r7
 80063f8:	f001 f90c 	bl	8007614 <__sinit>
 80063fc:	4b58      	ldr	r3, [pc, #352]	; (8006560 <setvbuf+0x180>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d167      	bne.n	80064d2 <setvbuf+0xf2>
 8006402:	687c      	ldr	r4, [r7, #4]
 8006404:	f1b8 0f02 	cmp.w	r8, #2
 8006408:	d006      	beq.n	8006418 <setvbuf+0x38>
 800640a:	f1b8 0f01 	cmp.w	r8, #1
 800640e:	f200 809f 	bhi.w	8006550 <setvbuf+0x170>
 8006412:	2d00      	cmp	r5, #0
 8006414:	f2c0 809c 	blt.w	8006550 <setvbuf+0x170>
 8006418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800641a:	07db      	lsls	r3, r3, #31
 800641c:	d405      	bmi.n	800642a <setvbuf+0x4a>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	0598      	lsls	r0, r3, #22
 8006422:	d402      	bmi.n	800642a <setvbuf+0x4a>
 8006424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006426:	f001 f998 	bl	800775a <__retarget_lock_acquire_recursive>
 800642a:	4621      	mov	r1, r4
 800642c:	4638      	mov	r0, r7
 800642e:	f001 f85d 	bl	80074ec <_fflush_r>
 8006432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006434:	b141      	cbz	r1, 8006448 <setvbuf+0x68>
 8006436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643a:	4299      	cmp	r1, r3
 800643c:	d002      	beq.n	8006444 <setvbuf+0x64>
 800643e:	4638      	mov	r0, r7
 8006440:	f001 fd96 	bl	8007f70 <_free_r>
 8006444:	2300      	movs	r3, #0
 8006446:	6363      	str	r3, [r4, #52]	; 0x34
 8006448:	2300      	movs	r3, #0
 800644a:	61a3      	str	r3, [r4, #24]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	0619      	lsls	r1, r3, #24
 8006452:	d503      	bpl.n	800645c <setvbuf+0x7c>
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	4638      	mov	r0, r7
 8006458:	f001 fd8a 	bl	8007f70 <_free_r>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f1b8 0f02 	cmp.w	r8, #2
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	d06c      	beq.n	8006548 <setvbuf+0x168>
 800646e:	ab01      	add	r3, sp, #4
 8006470:	466a      	mov	r2, sp
 8006472:	4621      	mov	r1, r4
 8006474:	4638      	mov	r0, r7
 8006476:	f001 f972 	bl	800775e <__swhatbuf_r>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	4318      	orrs	r0, r3
 800647e:	81a0      	strh	r0, [r4, #12]
 8006480:	2d00      	cmp	r5, #0
 8006482:	d130      	bne.n	80064e6 <setvbuf+0x106>
 8006484:	9d00      	ldr	r5, [sp, #0]
 8006486:	4628      	mov	r0, r5
 8006488:	f001 f9ce 	bl	8007828 <malloc>
 800648c:	4606      	mov	r6, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d155      	bne.n	800653e <setvbuf+0x15e>
 8006492:	f8dd 9000 	ldr.w	r9, [sp]
 8006496:	45a9      	cmp	r9, r5
 8006498:	d14a      	bne.n	8006530 <setvbuf+0x150>
 800649a:	f04f 35ff 	mov.w	r5, #4294967295
 800649e:	2200      	movs	r2, #0
 80064a0:	60a2      	str	r2, [r4, #8]
 80064a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	6122      	str	r2, [r4, #16]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	6162      	str	r2, [r4, #20]
 80064b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	07d2      	lsls	r2, r2, #31
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	d405      	bmi.n	80064ca <setvbuf+0xea>
 80064be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80064c2:	d102      	bne.n	80064ca <setvbuf+0xea>
 80064c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c6:	f001 f949 	bl	800775c <__retarget_lock_release_recursive>
 80064ca:	4628      	mov	r0, r5
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d2:	4b24      	ldr	r3, [pc, #144]	; (8006564 <setvbuf+0x184>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d101      	bne.n	80064dc <setvbuf+0xfc>
 80064d8:	68bc      	ldr	r4, [r7, #8]
 80064da:	e793      	b.n	8006404 <setvbuf+0x24>
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <setvbuf+0x188>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	bf08      	it	eq
 80064e2:	68fc      	ldreq	r4, [r7, #12]
 80064e4:	e78e      	b.n	8006404 <setvbuf+0x24>
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d0cd      	beq.n	8006486 <setvbuf+0xa6>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	b913      	cbnz	r3, 80064f4 <setvbuf+0x114>
 80064ee:	4638      	mov	r0, r7
 80064f0:	f001 f890 	bl	8007614 <__sinit>
 80064f4:	f1b8 0f01 	cmp.w	r8, #1
 80064f8:	bf08      	it	eq
 80064fa:	89a3      	ldrheq	r3, [r4, #12]
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	bf04      	itt	eq
 8006500:	f043 0301 	orreq.w	r3, r3, #1
 8006504:	81a3      	strheq	r3, [r4, #12]
 8006506:	89a2      	ldrh	r2, [r4, #12]
 8006508:	f012 0308 	ands.w	r3, r2, #8
 800650c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006510:	d01c      	beq.n	800654c <setvbuf+0x16c>
 8006512:	07d3      	lsls	r3, r2, #31
 8006514:	bf41      	itttt	mi
 8006516:	2300      	movmi	r3, #0
 8006518:	426d      	negmi	r5, r5
 800651a:	60a3      	strmi	r3, [r4, #8]
 800651c:	61a5      	strmi	r5, [r4, #24]
 800651e:	bf58      	it	pl
 8006520:	60a5      	strpl	r5, [r4, #8]
 8006522:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006524:	f015 0501 	ands.w	r5, r5, #1
 8006528:	d115      	bne.n	8006556 <setvbuf+0x176>
 800652a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800652e:	e7c8      	b.n	80064c2 <setvbuf+0xe2>
 8006530:	4648      	mov	r0, r9
 8006532:	f001 f979 	bl	8007828 <malloc>
 8006536:	4606      	mov	r6, r0
 8006538:	2800      	cmp	r0, #0
 800653a:	d0ae      	beq.n	800649a <setvbuf+0xba>
 800653c:	464d      	mov	r5, r9
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e7d0      	b.n	80064ea <setvbuf+0x10a>
 8006548:	2500      	movs	r5, #0
 800654a:	e7a8      	b.n	800649e <setvbuf+0xbe>
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	e7e8      	b.n	8006522 <setvbuf+0x142>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295
 8006554:	e7b9      	b.n	80064ca <setvbuf+0xea>
 8006556:	2500      	movs	r5, #0
 8006558:	e7b7      	b.n	80064ca <setvbuf+0xea>
 800655a:	bf00      	nop
 800655c:	2000003c 	.word	0x2000003c
 8006560:	0800896c 	.word	0x0800896c
 8006564:	0800898c 	.word	0x0800898c
 8006568:	0800894c 	.word	0x0800894c

0800656c <__swbuf_r>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	460e      	mov	r6, r1
 8006570:	4614      	mov	r4, r2
 8006572:	4605      	mov	r5, r0
 8006574:	b118      	cbz	r0, 800657e <__swbuf_r+0x12>
 8006576:	6983      	ldr	r3, [r0, #24]
 8006578:	b90b      	cbnz	r3, 800657e <__swbuf_r+0x12>
 800657a:	f001 f84b 	bl	8007614 <__sinit>
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <__swbuf_r+0x98>)
 8006580:	429c      	cmp	r4, r3
 8006582:	d12b      	bne.n	80065dc <__swbuf_r+0x70>
 8006584:	686c      	ldr	r4, [r5, #4]
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	071a      	lsls	r2, r3, #28
 800658e:	d52f      	bpl.n	80065f0 <__swbuf_r+0x84>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	b36b      	cbz	r3, 80065f0 <__swbuf_r+0x84>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	1ac0      	subs	r0, r0, r3
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	b2f6      	uxtb	r6, r6
 800659e:	4283      	cmp	r3, r0
 80065a0:	4637      	mov	r7, r6
 80065a2:	dc04      	bgt.n	80065ae <__swbuf_r+0x42>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 ffa0 	bl	80074ec <_fflush_r>
 80065ac:	bb30      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	60a3      	str	r3, [r4, #8]
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	6022      	str	r2, [r4, #0]
 80065ba:	701e      	strb	r6, [r3, #0]
 80065bc:	6963      	ldr	r3, [r4, #20]
 80065be:	3001      	adds	r0, #1
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d004      	beq.n	80065ce <__swbuf_r+0x62>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d506      	bpl.n	80065d8 <__swbuf_r+0x6c>
 80065ca:	2e0a      	cmp	r6, #10
 80065cc:	d104      	bne.n	80065d8 <__swbuf_r+0x6c>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 ff8b 	bl	80074ec <_fflush_r>
 80065d6:	b988      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065d8:	4638      	mov	r0, r7
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <__swbuf_r+0x9c>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <__swbuf_r+0x7a>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7cf      	b.n	8006586 <__swbuf_r+0x1a>
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <__swbuf_r+0xa0>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7ca      	b.n	8006586 <__swbuf_r+0x1a>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f80c 	bl	8006610 <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0cb      	beq.n	8006594 <__swbuf_r+0x28>
 80065fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006600:	e7ea      	b.n	80065d8 <__swbuf_r+0x6c>
 8006602:	bf00      	nop
 8006604:	0800896c 	.word	0x0800896c
 8006608:	0800898c 	.word	0x0800898c
 800660c:	0800894c 	.word	0x0800894c

08006610 <__swsetup_r>:
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <__swsetup_r+0xcc>)
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	681d      	ldr	r5, [r3, #0]
 8006616:	4606      	mov	r6, r0
 8006618:	460c      	mov	r4, r1
 800661a:	b125      	cbz	r5, 8006626 <__swsetup_r+0x16>
 800661c:	69ab      	ldr	r3, [r5, #24]
 800661e:	b913      	cbnz	r3, 8006626 <__swsetup_r+0x16>
 8006620:	4628      	mov	r0, r5
 8006622:	f000 fff7 	bl	8007614 <__sinit>
 8006626:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <__swsetup_r+0xd0>)
 8006628:	429c      	cmp	r4, r3
 800662a:	d10f      	bne.n	800664c <__swsetup_r+0x3c>
 800662c:	686c      	ldr	r4, [r5, #4]
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006634:	0719      	lsls	r1, r3, #28
 8006636:	d42c      	bmi.n	8006692 <__swsetup_r+0x82>
 8006638:	06dd      	lsls	r5, r3, #27
 800663a:	d411      	bmi.n	8006660 <__swsetup_r+0x50>
 800663c:	2309      	movs	r3, #9
 800663e:	6033      	str	r3, [r6, #0]
 8006640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	f04f 30ff 	mov.w	r0, #4294967295
 800664a:	e03e      	b.n	80066ca <__swsetup_r+0xba>
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <__swsetup_r+0xd4>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d101      	bne.n	8006656 <__swsetup_r+0x46>
 8006652:	68ac      	ldr	r4, [r5, #8]
 8006654:	e7eb      	b.n	800662e <__swsetup_r+0x1e>
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <__swsetup_r+0xd8>)
 8006658:	429c      	cmp	r4, r3
 800665a:	bf08      	it	eq
 800665c:	68ec      	ldreq	r4, [r5, #12]
 800665e:	e7e6      	b.n	800662e <__swsetup_r+0x1e>
 8006660:	0758      	lsls	r0, r3, #29
 8006662:	d512      	bpl.n	800668a <__swsetup_r+0x7a>
 8006664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006666:	b141      	cbz	r1, 800667a <__swsetup_r+0x6a>
 8006668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__swsetup_r+0x66>
 8006670:	4630      	mov	r0, r6
 8006672:	f001 fc7d 	bl	8007f70 <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	; 0x34
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0308 	orr.w	r3, r3, #8
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	b94b      	cbnz	r3, 80066aa <__swsetup_r+0x9a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d003      	beq.n	80066aa <__swsetup_r+0x9a>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4630      	mov	r0, r6
 80066a6:	f001 f87f 	bl	80077a8 <__smakebuf_r>
 80066aa:	89a0      	ldrh	r0, [r4, #12]
 80066ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b0:	f010 0301 	ands.w	r3, r0, #1
 80066b4:	d00a      	beq.n	80066cc <__swsetup_r+0xbc>
 80066b6:	2300      	movs	r3, #0
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	425b      	negs	r3, r3
 80066be:	61a3      	str	r3, [r4, #24]
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	b943      	cbnz	r3, 80066d6 <__swsetup_r+0xc6>
 80066c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066c8:	d1ba      	bne.n	8006640 <__swsetup_r+0x30>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	0781      	lsls	r1, r0, #30
 80066ce:	bf58      	it	pl
 80066d0:	6963      	ldrpl	r3, [r4, #20]
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	e7f4      	b.n	80066c0 <__swsetup_r+0xb0>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e7f7      	b.n	80066ca <__swsetup_r+0xba>
 80066da:	bf00      	nop
 80066dc:	2000003c 	.word	0x2000003c
 80066e0:	0800896c 	.word	0x0800896c
 80066e4:	0800898c 	.word	0x0800898c
 80066e8:	0800894c 	.word	0x0800894c

080066ec <quorem>:
 80066ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	6903      	ldr	r3, [r0, #16]
 80066f2:	690c      	ldr	r4, [r1, #16]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	4607      	mov	r7, r0
 80066f8:	f2c0 8081 	blt.w	80067fe <quorem+0x112>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	f101 0814 	add.w	r8, r1, #20
 8006702:	f100 0514 	add.w	r5, r0, #20
 8006706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006714:	3301      	adds	r3, #1
 8006716:	429a      	cmp	r2, r3
 8006718:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800671c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006720:	fbb2 f6f3 	udiv	r6, r2, r3
 8006724:	d331      	bcc.n	800678a <quorem+0x9e>
 8006726:	f04f 0e00 	mov.w	lr, #0
 800672a:	4640      	mov	r0, r8
 800672c:	46ac      	mov	ip, r5
 800672e:	46f2      	mov	sl, lr
 8006730:	f850 2b04 	ldr.w	r2, [r0], #4
 8006734:	b293      	uxth	r3, r2
 8006736:	fb06 e303 	mla	r3, r6, r3, lr
 800673a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800673e:	b29b      	uxth	r3, r3
 8006740:	ebaa 0303 	sub.w	r3, sl, r3
 8006744:	0c12      	lsrs	r2, r2, #16
 8006746:	f8dc a000 	ldr.w	sl, [ip]
 800674a:	fb06 e202 	mla	r2, r6, r2, lr
 800674e:	fa13 f38a 	uxtah	r3, r3, sl
 8006752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006756:	fa1f fa82 	uxth.w	sl, r2
 800675a:	f8dc 2000 	ldr.w	r2, [ip]
 800675e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006762:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800676c:	4581      	cmp	r9, r0
 800676e:	f84c 3b04 	str.w	r3, [ip], #4
 8006772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006776:	d2db      	bcs.n	8006730 <quorem+0x44>
 8006778:	f855 300b 	ldr.w	r3, [r5, fp]
 800677c:	b92b      	cbnz	r3, 800678a <quorem+0x9e>
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	3b04      	subs	r3, #4
 8006782:	429d      	cmp	r5, r3
 8006784:	461a      	mov	r2, r3
 8006786:	d32e      	bcc.n	80067e6 <quorem+0xfa>
 8006788:	613c      	str	r4, [r7, #16]
 800678a:	4638      	mov	r0, r7
 800678c:	f001 fae0 	bl	8007d50 <__mcmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	db24      	blt.n	80067de <quorem+0xf2>
 8006794:	3601      	adds	r6, #1
 8006796:	4628      	mov	r0, r5
 8006798:	f04f 0c00 	mov.w	ip, #0
 800679c:	f858 2b04 	ldr.w	r2, [r8], #4
 80067a0:	f8d0 e000 	ldr.w	lr, [r0]
 80067a4:	b293      	uxth	r3, r2
 80067a6:	ebac 0303 	sub.w	r3, ip, r3
 80067aa:	0c12      	lsrs	r2, r2, #16
 80067ac:	fa13 f38e 	uxtah	r3, r3, lr
 80067b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067be:	45c1      	cmp	r9, r8
 80067c0:	f840 3b04 	str.w	r3, [r0], #4
 80067c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067c8:	d2e8      	bcs.n	800679c <quorem+0xb0>
 80067ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067d2:	b922      	cbnz	r2, 80067de <quorem+0xf2>
 80067d4:	3b04      	subs	r3, #4
 80067d6:	429d      	cmp	r5, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	d30a      	bcc.n	80067f2 <quorem+0x106>
 80067dc:	613c      	str	r4, [r7, #16]
 80067de:	4630      	mov	r0, r6
 80067e0:	b003      	add	sp, #12
 80067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	2a00      	cmp	r2, #0
 80067ec:	d1cc      	bne.n	8006788 <quorem+0x9c>
 80067ee:	3c01      	subs	r4, #1
 80067f0:	e7c7      	b.n	8006782 <quorem+0x96>
 80067f2:	6812      	ldr	r2, [r2, #0]
 80067f4:	3b04      	subs	r3, #4
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d1f0      	bne.n	80067dc <quorem+0xf0>
 80067fa:	3c01      	subs	r4, #1
 80067fc:	e7eb      	b.n	80067d6 <quorem+0xea>
 80067fe:	2000      	movs	r0, #0
 8006800:	e7ee      	b.n	80067e0 <quorem+0xf4>
 8006802:	0000      	movs	r0, r0
 8006804:	0000      	movs	r0, r0
	...

08006808 <_dtoa_r>:
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	ed2d 8b02 	vpush	{d8}
 8006810:	ec57 6b10 	vmov	r6, r7, d0
 8006814:	b095      	sub	sp, #84	; 0x54
 8006816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006818:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800681c:	9105      	str	r1, [sp, #20]
 800681e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006822:	4604      	mov	r4, r0
 8006824:	9209      	str	r2, [sp, #36]	; 0x24
 8006826:	930f      	str	r3, [sp, #60]	; 0x3c
 8006828:	b975      	cbnz	r5, 8006848 <_dtoa_r+0x40>
 800682a:	2010      	movs	r0, #16
 800682c:	f000 fffc 	bl	8007828 <malloc>
 8006830:	4602      	mov	r2, r0
 8006832:	6260      	str	r0, [r4, #36]	; 0x24
 8006834:	b920      	cbnz	r0, 8006840 <_dtoa_r+0x38>
 8006836:	4bb2      	ldr	r3, [pc, #712]	; (8006b00 <_dtoa_r+0x2f8>)
 8006838:	21ea      	movs	r1, #234	; 0xea
 800683a:	48b2      	ldr	r0, [pc, #712]	; (8006b04 <_dtoa_r+0x2fc>)
 800683c:	f001 fe02 	bl	8008444 <__assert_func>
 8006840:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006844:	6005      	str	r5, [r0, #0]
 8006846:	60c5      	str	r5, [r0, #12]
 8006848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800684a:	6819      	ldr	r1, [r3, #0]
 800684c:	b151      	cbz	r1, 8006864 <_dtoa_r+0x5c>
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	604a      	str	r2, [r1, #4]
 8006852:	2301      	movs	r3, #1
 8006854:	4093      	lsls	r3, r2
 8006856:	608b      	str	r3, [r1, #8]
 8006858:	4620      	mov	r0, r4
 800685a:	f001 f83b 	bl	80078d4 <_Bfree>
 800685e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	1e3b      	subs	r3, r7, #0
 8006866:	bfb9      	ittee	lt
 8006868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800686c:	9303      	strlt	r3, [sp, #12]
 800686e:	2300      	movge	r3, #0
 8006870:	f8c8 3000 	strge.w	r3, [r8]
 8006874:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006878:	4ba3      	ldr	r3, [pc, #652]	; (8006b08 <_dtoa_r+0x300>)
 800687a:	bfbc      	itt	lt
 800687c:	2201      	movlt	r2, #1
 800687e:	f8c8 2000 	strlt.w	r2, [r8]
 8006882:	ea33 0309 	bics.w	r3, r3, r9
 8006886:	d11b      	bne.n	80068c0 <_dtoa_r+0xb8>
 8006888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800688a:	f242 730f 	movw	r3, #9999	; 0x270f
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006894:	4333      	orrs	r3, r6
 8006896:	f000 857a 	beq.w	800738e <_dtoa_r+0xb86>
 800689a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800689c:	b963      	cbnz	r3, 80068b8 <_dtoa_r+0xb0>
 800689e:	4b9b      	ldr	r3, [pc, #620]	; (8006b0c <_dtoa_r+0x304>)
 80068a0:	e024      	b.n	80068ec <_dtoa_r+0xe4>
 80068a2:	4b9b      	ldr	r3, [pc, #620]	; (8006b10 <_dtoa_r+0x308>)
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	9800      	ldr	r0, [sp, #0]
 80068ae:	b015      	add	sp, #84	; 0x54
 80068b0:	ecbd 8b02 	vpop	{d8}
 80068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b8:	4b94      	ldr	r3, [pc, #592]	; (8006b0c <_dtoa_r+0x304>)
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	3303      	adds	r3, #3
 80068be:	e7f3      	b.n	80068a8 <_dtoa_r+0xa0>
 80068c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	ec51 0b17 	vmov	r0, r1, d7
 80068ca:	2300      	movs	r3, #0
 80068cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80068d0:	f7fa f91a 	bl	8000b08 <__aeabi_dcmpeq>
 80068d4:	4680      	mov	r8, r0
 80068d6:	b158      	cbz	r0, 80068f0 <_dtoa_r+0xe8>
 80068d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068da:	2301      	movs	r3, #1
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8551 	beq.w	8007388 <_dtoa_r+0xb80>
 80068e6:	488b      	ldr	r0, [pc, #556]	; (8006b14 <_dtoa_r+0x30c>)
 80068e8:	6018      	str	r0, [r3, #0]
 80068ea:	1e43      	subs	r3, r0, #1
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	e7dd      	b.n	80068ac <_dtoa_r+0xa4>
 80068f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80068f4:	aa12      	add	r2, sp, #72	; 0x48
 80068f6:	a913      	add	r1, sp, #76	; 0x4c
 80068f8:	4620      	mov	r0, r4
 80068fa:	f001 facd 	bl	8007e98 <__d2b>
 80068fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006902:	4683      	mov	fp, r0
 8006904:	2d00      	cmp	r5, #0
 8006906:	d07c      	beq.n	8006a02 <_dtoa_r+0x1fa>
 8006908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800690e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006912:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006916:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800691a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800691e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006922:	4b7d      	ldr	r3, [pc, #500]	; (8006b18 <_dtoa_r+0x310>)
 8006924:	2200      	movs	r2, #0
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fccd 	bl	80002c8 <__aeabi_dsub>
 800692e:	a36e      	add	r3, pc, #440	; (adr r3, 8006ae8 <_dtoa_r+0x2e0>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fe80 	bl	8000638 <__aeabi_dmul>
 8006938:	a36d      	add	r3, pc, #436	; (adr r3, 8006af0 <_dtoa_r+0x2e8>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 fcc5 	bl	80002cc <__adddf3>
 8006942:	4606      	mov	r6, r0
 8006944:	4628      	mov	r0, r5
 8006946:	460f      	mov	r7, r1
 8006948:	f7f9 fe0c 	bl	8000564 <__aeabi_i2d>
 800694c:	a36a      	add	r3, pc, #424	; (adr r3, 8006af8 <_dtoa_r+0x2f0>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fe71 	bl	8000638 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4630      	mov	r0, r6
 800695c:	4639      	mov	r1, r7
 800695e:	f7f9 fcb5 	bl	80002cc <__adddf3>
 8006962:	4606      	mov	r6, r0
 8006964:	460f      	mov	r7, r1
 8006966:	f7fa f917 	bl	8000b98 <__aeabi_d2iz>
 800696a:	2200      	movs	r2, #0
 800696c:	4682      	mov	sl, r0
 800696e:	2300      	movs	r3, #0
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f7fa f8d2 	bl	8000b1c <__aeabi_dcmplt>
 8006978:	b148      	cbz	r0, 800698e <_dtoa_r+0x186>
 800697a:	4650      	mov	r0, sl
 800697c:	f7f9 fdf2 	bl	8000564 <__aeabi_i2d>
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	f7fa f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 8006988:	b908      	cbnz	r0, 800698e <_dtoa_r+0x186>
 800698a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800698e:	f1ba 0f16 	cmp.w	sl, #22
 8006992:	d854      	bhi.n	8006a3e <_dtoa_r+0x236>
 8006994:	4b61      	ldr	r3, [pc, #388]	; (8006b1c <_dtoa_r+0x314>)
 8006996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069a2:	f7fa f8bb 	bl	8000b1c <__aeabi_dcmplt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d04b      	beq.n	8006a42 <_dtoa_r+0x23a>
 80069aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ae:	2300      	movs	r3, #0
 80069b0:	930e      	str	r3, [sp, #56]	; 0x38
 80069b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069b4:	1b5d      	subs	r5, r3, r5
 80069b6:	1e6b      	subs	r3, r5, #1
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	bf43      	ittte	mi
 80069bc:	2300      	movmi	r3, #0
 80069be:	f1c5 0801 	rsbmi	r8, r5, #1
 80069c2:	9304      	strmi	r3, [sp, #16]
 80069c4:	f04f 0800 	movpl.w	r8, #0
 80069c8:	f1ba 0f00 	cmp.w	sl, #0
 80069cc:	db3b      	blt.n	8006a46 <_dtoa_r+0x23e>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80069d4:	4453      	add	r3, sl
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	2300      	movs	r3, #0
 80069da:	9306      	str	r3, [sp, #24]
 80069dc:	9b05      	ldr	r3, [sp, #20]
 80069de:	2b09      	cmp	r3, #9
 80069e0:	d869      	bhi.n	8006ab6 <_dtoa_r+0x2ae>
 80069e2:	2b05      	cmp	r3, #5
 80069e4:	bfc4      	itt	gt
 80069e6:	3b04      	subgt	r3, #4
 80069e8:	9305      	strgt	r3, [sp, #20]
 80069ea:	9b05      	ldr	r3, [sp, #20]
 80069ec:	f1a3 0302 	sub.w	r3, r3, #2
 80069f0:	bfcc      	ite	gt
 80069f2:	2500      	movgt	r5, #0
 80069f4:	2501      	movle	r5, #1
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d869      	bhi.n	8006ace <_dtoa_r+0x2c6>
 80069fa:	e8df f003 	tbb	[pc, r3]
 80069fe:	4e2c      	.short	0x4e2c
 8006a00:	5a4c      	.short	0x5a4c
 8006a02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a06:	441d      	add	r5, r3
 8006a08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	bfc1      	itttt	gt
 8006a10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a18:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a20:	bfda      	itte	le
 8006a22:	f1c3 0320 	rsble	r3, r3, #32
 8006a26:	fa06 f003 	lslle.w	r0, r6, r3
 8006a2a:	4318      	orrgt	r0, r3
 8006a2c:	f7f9 fd8a 	bl	8000544 <__aeabi_ui2d>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4606      	mov	r6, r0
 8006a34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a38:	3d01      	subs	r5, #1
 8006a3a:	9310      	str	r3, [sp, #64]	; 0x40
 8006a3c:	e771      	b.n	8006922 <_dtoa_r+0x11a>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e7b6      	b.n	80069b0 <_dtoa_r+0x1a8>
 8006a42:	900e      	str	r0, [sp, #56]	; 0x38
 8006a44:	e7b5      	b.n	80069b2 <_dtoa_r+0x1aa>
 8006a46:	f1ca 0300 	rsb	r3, sl, #0
 8006a4a:	9306      	str	r3, [sp, #24]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	eba8 080a 	sub.w	r8, r8, sl
 8006a52:	930d      	str	r3, [sp, #52]	; 0x34
 8006a54:	e7c2      	b.n	80069dc <_dtoa_r+0x1d4>
 8006a56:	2300      	movs	r3, #0
 8006a58:	9308      	str	r3, [sp, #32]
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dc39      	bgt.n	8006ad4 <_dtoa_r+0x2cc>
 8006a60:	f04f 0901 	mov.w	r9, #1
 8006a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a68:	464b      	mov	r3, r9
 8006a6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a70:	2200      	movs	r2, #0
 8006a72:	6042      	str	r2, [r0, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	f102 0614 	add.w	r6, r2, #20
 8006a7a:	429e      	cmp	r6, r3
 8006a7c:	6841      	ldr	r1, [r0, #4]
 8006a7e:	d92f      	bls.n	8006ae0 <_dtoa_r+0x2d8>
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fee7 	bl	8007854 <_Balloc>
 8006a86:	9000      	str	r0, [sp, #0]
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d14b      	bne.n	8006b24 <_dtoa_r+0x31c>
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <_dtoa_r+0x318>)
 8006a8e:	4602      	mov	r2, r0
 8006a90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a94:	e6d1      	b.n	800683a <_dtoa_r+0x32>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e7de      	b.n	8006a58 <_dtoa_r+0x250>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9308      	str	r3, [sp, #32]
 8006a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa0:	eb0a 0903 	add.w	r9, sl, r3
 8006aa4:	f109 0301 	add.w	r3, r9, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	bfb8      	it	lt
 8006aae:	2301      	movlt	r3, #1
 8006ab0:	e7dd      	b.n	8006a6e <_dtoa_r+0x266>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e7f2      	b.n	8006a9c <_dtoa_r+0x294>
 8006ab6:	2501      	movs	r5, #1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9305      	str	r3, [sp, #20]
 8006abc:	9508      	str	r5, [sp, #32]
 8006abe:	f04f 39ff 	mov.w	r9, #4294967295
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ac8:	2312      	movs	r3, #18
 8006aca:	9209      	str	r2, [sp, #36]	; 0x24
 8006acc:	e7cf      	b.n	8006a6e <_dtoa_r+0x266>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	9308      	str	r3, [sp, #32]
 8006ad2:	e7f4      	b.n	8006abe <_dtoa_r+0x2b6>
 8006ad4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ad8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006adc:	464b      	mov	r3, r9
 8006ade:	e7c6      	b.n	8006a6e <_dtoa_r+0x266>
 8006ae0:	3101      	adds	r1, #1
 8006ae2:	6041      	str	r1, [r0, #4]
 8006ae4:	0052      	lsls	r2, r2, #1
 8006ae6:	e7c6      	b.n	8006a76 <_dtoa_r+0x26e>
 8006ae8:	636f4361 	.word	0x636f4361
 8006aec:	3fd287a7 	.word	0x3fd287a7
 8006af0:	8b60c8b3 	.word	0x8b60c8b3
 8006af4:	3fc68a28 	.word	0x3fc68a28
 8006af8:	509f79fb 	.word	0x509f79fb
 8006afc:	3fd34413 	.word	0x3fd34413
 8006b00:	080088c5 	.word	0x080088c5
 8006b04:	080088dc 	.word	0x080088dc
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	080088c1 	.word	0x080088c1
 8006b10:	080088b8 	.word	0x080088b8
 8006b14:	08008895 	.word	0x08008895
 8006b18:	3ff80000 	.word	0x3ff80000
 8006b1c:	08008a38 	.word	0x08008a38
 8006b20:	0800893b 	.word	0x0800893b
 8006b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b26:	9a00      	ldr	r2, [sp, #0]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	2b0e      	cmp	r3, #14
 8006b2e:	f200 80ad 	bhi.w	8006c8c <_dtoa_r+0x484>
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	f000 80aa 	beq.w	8006c8c <_dtoa_r+0x484>
 8006b38:	f1ba 0f00 	cmp.w	sl, #0
 8006b3c:	dd36      	ble.n	8006bac <_dtoa_r+0x3a4>
 8006b3e:	4ac3      	ldr	r2, [pc, #780]	; (8006e4c <_dtoa_r+0x644>)
 8006b40:	f00a 030f 	and.w	r3, sl, #15
 8006b44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b48:	ed93 7b00 	vldr	d7, [r3]
 8006b4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b50:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006b54:	eeb0 8a47 	vmov.f32	s16, s14
 8006b58:	eef0 8a67 	vmov.f32	s17, s15
 8006b5c:	d016      	beq.n	8006b8c <_dtoa_r+0x384>
 8006b5e:	4bbc      	ldr	r3, [pc, #752]	; (8006e50 <_dtoa_r+0x648>)
 8006b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b68:	f7f9 fe90 	bl	800088c <__aeabi_ddiv>
 8006b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b70:	f007 070f 	and.w	r7, r7, #15
 8006b74:	2503      	movs	r5, #3
 8006b76:	4eb6      	ldr	r6, [pc, #728]	; (8006e50 <_dtoa_r+0x648>)
 8006b78:	b957      	cbnz	r7, 8006b90 <_dtoa_r+0x388>
 8006b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b7e:	ec53 2b18 	vmov	r2, r3, d8
 8006b82:	f7f9 fe83 	bl	800088c <__aeabi_ddiv>
 8006b86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b8a:	e029      	b.n	8006be0 <_dtoa_r+0x3d8>
 8006b8c:	2502      	movs	r5, #2
 8006b8e:	e7f2      	b.n	8006b76 <_dtoa_r+0x36e>
 8006b90:	07f9      	lsls	r1, r7, #31
 8006b92:	d508      	bpl.n	8006ba6 <_dtoa_r+0x39e>
 8006b94:	ec51 0b18 	vmov	r0, r1, d8
 8006b98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b9c:	f7f9 fd4c 	bl	8000638 <__aeabi_dmul>
 8006ba0:	ec41 0b18 	vmov	d8, r0, r1
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	107f      	asrs	r7, r7, #1
 8006ba8:	3608      	adds	r6, #8
 8006baa:	e7e5      	b.n	8006b78 <_dtoa_r+0x370>
 8006bac:	f000 80a6 	beq.w	8006cfc <_dtoa_r+0x4f4>
 8006bb0:	f1ca 0600 	rsb	r6, sl, #0
 8006bb4:	4ba5      	ldr	r3, [pc, #660]	; (8006e4c <_dtoa_r+0x644>)
 8006bb6:	4fa6      	ldr	r7, [pc, #664]	; (8006e50 <_dtoa_r+0x648>)
 8006bb8:	f006 020f 	and.w	r2, r6, #15
 8006bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bc8:	f7f9 fd36 	bl	8000638 <__aeabi_dmul>
 8006bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd0:	1136      	asrs	r6, r6, #4
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2502      	movs	r5, #2
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	f040 8085 	bne.w	8006ce6 <_dtoa_r+0x4de>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1d2      	bne.n	8006b86 <_dtoa_r+0x37e>
 8006be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 808c 	beq.w	8006d00 <_dtoa_r+0x4f8>
 8006be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bec:	4b99      	ldr	r3, [pc, #612]	; (8006e54 <_dtoa_r+0x64c>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 ff92 	bl	8000b1c <__aeabi_dcmplt>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	f000 8081 	beq.w	8006d00 <_dtoa_r+0x4f8>
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d07d      	beq.n	8006d00 <_dtoa_r+0x4f8>
 8006c04:	f1b9 0f00 	cmp.w	r9, #0
 8006c08:	dd3c      	ble.n	8006c84 <_dtoa_r+0x47c>
 8006c0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c0e:	9307      	str	r3, [sp, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	4b91      	ldr	r3, [pc, #580]	; (8006e58 <_dtoa_r+0x650>)
 8006c14:	4630      	mov	r0, r6
 8006c16:	4639      	mov	r1, r7
 8006c18:	f7f9 fd0e 	bl	8000638 <__aeabi_dmul>
 8006c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c20:	3501      	adds	r5, #1
 8006c22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006c26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7f9 fc9a 	bl	8000564 <__aeabi_i2d>
 8006c30:	4632      	mov	r2, r6
 8006c32:	463b      	mov	r3, r7
 8006c34:	f7f9 fd00 	bl	8000638 <__aeabi_dmul>
 8006c38:	4b88      	ldr	r3, [pc, #544]	; (8006e5c <_dtoa_r+0x654>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f7f9 fb46 	bl	80002cc <__adddf3>
 8006c40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d15c      	bne.n	8006d0a <_dtoa_r+0x502>
 8006c50:	4b83      	ldr	r3, [pc, #524]	; (8006e60 <_dtoa_r+0x658>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 fb36 	bl	80002c8 <__aeabi_dsub>
 8006c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c60:	4606      	mov	r6, r0
 8006c62:	460f      	mov	r7, r1
 8006c64:	f7f9 ff78 	bl	8000b58 <__aeabi_dcmpgt>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	f040 8296 	bne.w	800719a <_dtoa_r+0x992>
 8006c6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c72:	4630      	mov	r0, r6
 8006c74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f040 8288 	bne.w	8007194 <_dtoa_r+0x98c>
 8006c84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f2c0 8158 	blt.w	8006f44 <_dtoa_r+0x73c>
 8006c94:	f1ba 0f0e 	cmp.w	sl, #14
 8006c98:	f300 8154 	bgt.w	8006f44 <_dtoa_r+0x73c>
 8006c9c:	4b6b      	ldr	r3, [pc, #428]	; (8006e4c <_dtoa_r+0x644>)
 8006c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ca2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f280 80e3 	bge.w	8006e74 <_dtoa_r+0x66c>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f300 80df 	bgt.w	8006e74 <_dtoa_r+0x66c>
 8006cb6:	f040 826d 	bne.w	8007194 <_dtoa_r+0x98c>
 8006cba:	4b69      	ldr	r3, [pc, #420]	; (8006e60 <_dtoa_r+0x658>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 fcb9 	bl	8000638 <__aeabi_dmul>
 8006cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cca:	f7f9 ff3b 	bl	8000b44 <__aeabi_dcmpge>
 8006cce:	9e01      	ldr	r6, [sp, #4]
 8006cd0:	4637      	mov	r7, r6
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	f040 8243 	bne.w	800715e <_dtoa_r+0x956>
 8006cd8:	9d00      	ldr	r5, [sp, #0]
 8006cda:	2331      	movs	r3, #49	; 0x31
 8006cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8006ce0:	f10a 0a01 	add.w	sl, sl, #1
 8006ce4:	e23f      	b.n	8007166 <_dtoa_r+0x95e>
 8006ce6:	07f2      	lsls	r2, r6, #31
 8006ce8:	d505      	bpl.n	8006cf6 <_dtoa_r+0x4ee>
 8006cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cee:	f7f9 fca3 	bl	8000638 <__aeabi_dmul>
 8006cf2:	3501      	adds	r5, #1
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	1076      	asrs	r6, r6, #1
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	e76c      	b.n	8006bd6 <_dtoa_r+0x3ce>
 8006cfc:	2502      	movs	r5, #2
 8006cfe:	e76f      	b.n	8006be0 <_dtoa_r+0x3d8>
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d06:	930c      	str	r3, [sp, #48]	; 0x30
 8006d08:	e78d      	b.n	8006c26 <_dtoa_r+0x41e>
 8006d0a:	9900      	ldr	r1, [sp, #0]
 8006d0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d10:	4b4e      	ldr	r3, [pc, #312]	; (8006e4c <_dtoa_r+0x644>)
 8006d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d16:	4401      	add	r1, r0
 8006d18:	9102      	str	r1, [sp, #8]
 8006d1a:	9908      	ldr	r1, [sp, #32]
 8006d1c:	eeb0 8a47 	vmov.f32	s16, s14
 8006d20:	eef0 8a67 	vmov.f32	s17, s15
 8006d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d045      	beq.n	8006dbc <_dtoa_r+0x5b4>
 8006d30:	494c      	ldr	r1, [pc, #304]	; (8006e64 <_dtoa_r+0x65c>)
 8006d32:	2000      	movs	r0, #0
 8006d34:	f7f9 fdaa 	bl	800088c <__aeabi_ddiv>
 8006d38:	ec53 2b18 	vmov	r2, r3, d8
 8006d3c:	f7f9 fac4 	bl	80002c8 <__aeabi_dsub>
 8006d40:	9d00      	ldr	r5, [sp, #0]
 8006d42:	ec41 0b18 	vmov	d8, r0, r1
 8006d46:	4639      	mov	r1, r7
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7f9 ff25 	bl	8000b98 <__aeabi_d2iz>
 8006d4e:	900c      	str	r0, [sp, #48]	; 0x30
 8006d50:	f7f9 fc08 	bl	8000564 <__aeabi_i2d>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fab4 	bl	80002c8 <__aeabi_dsub>
 8006d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d62:	3330      	adds	r3, #48	; 0x30
 8006d64:	f805 3b01 	strb.w	r3, [r5], #1
 8006d68:	ec53 2b18 	vmov	r2, r3, d8
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	460f      	mov	r7, r1
 8006d70:	f7f9 fed4 	bl	8000b1c <__aeabi_dcmplt>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d165      	bne.n	8006e44 <_dtoa_r+0x63c>
 8006d78:	4632      	mov	r2, r6
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	4935      	ldr	r1, [pc, #212]	; (8006e54 <_dtoa_r+0x64c>)
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f7f9 faa2 	bl	80002c8 <__aeabi_dsub>
 8006d84:	ec53 2b18 	vmov	r2, r3, d8
 8006d88:	f7f9 fec8 	bl	8000b1c <__aeabi_dcmplt>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f040 80b9 	bne.w	8006f04 <_dtoa_r+0x6fc>
 8006d92:	9b02      	ldr	r3, [sp, #8]
 8006d94:	429d      	cmp	r5, r3
 8006d96:	f43f af75 	beq.w	8006c84 <_dtoa_r+0x47c>
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <_dtoa_r+0x650>)
 8006d9c:	ec51 0b18 	vmov	r0, r1, d8
 8006da0:	2200      	movs	r2, #0
 8006da2:	f7f9 fc49 	bl	8000638 <__aeabi_dmul>
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <_dtoa_r+0x650>)
 8006da8:	ec41 0b18 	vmov	d8, r0, r1
 8006dac:	2200      	movs	r2, #0
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fc41 	bl	8000638 <__aeabi_dmul>
 8006db6:	4606      	mov	r6, r0
 8006db8:	460f      	mov	r7, r1
 8006dba:	e7c4      	b.n	8006d46 <_dtoa_r+0x53e>
 8006dbc:	ec51 0b17 	vmov	r0, r1, d7
 8006dc0:	f7f9 fc3a 	bl	8000638 <__aeabi_dmul>
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	9d00      	ldr	r5, [sp, #0]
 8006dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8006dca:	ec41 0b18 	vmov	d8, r0, r1
 8006dce:	4639      	mov	r1, r7
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7f9 fee1 	bl	8000b98 <__aeabi_d2iz>
 8006dd6:	9011      	str	r0, [sp, #68]	; 0x44
 8006dd8:	f7f9 fbc4 	bl	8000564 <__aeabi_i2d>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fa70 	bl	80002c8 <__aeabi_dsub>
 8006de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dea:	3330      	adds	r3, #48	; 0x30
 8006dec:	f805 3b01 	strb.w	r3, [r5], #1
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	429d      	cmp	r5, r3
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	d134      	bne.n	8006e68 <_dtoa_r+0x660>
 8006dfe:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <_dtoa_r+0x65c>)
 8006e00:	ec51 0b18 	vmov	r0, r1, d8
 8006e04:	f7f9 fa62 	bl	80002cc <__adddf3>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4639      	mov	r1, r7
 8006e10:	f7f9 fea2 	bl	8000b58 <__aeabi_dcmpgt>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d175      	bne.n	8006f04 <_dtoa_r+0x6fc>
 8006e18:	ec53 2b18 	vmov	r2, r3, d8
 8006e1c:	4911      	ldr	r1, [pc, #68]	; (8006e64 <_dtoa_r+0x65c>)
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f7f9 fa52 	bl	80002c8 <__aeabi_dsub>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	f7f9 fe76 	bl	8000b1c <__aeabi_dcmplt>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f43f af27 	beq.w	8006c84 <_dtoa_r+0x47c>
 8006e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e38:	1e6b      	subs	r3, r5, #1
 8006e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e40:	2b30      	cmp	r3, #48	; 0x30
 8006e42:	d0f8      	beq.n	8006e36 <_dtoa_r+0x62e>
 8006e44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e48:	e04a      	b.n	8006ee0 <_dtoa_r+0x6d8>
 8006e4a:	bf00      	nop
 8006e4c:	08008a38 	.word	0x08008a38
 8006e50:	08008a10 	.word	0x08008a10
 8006e54:	3ff00000 	.word	0x3ff00000
 8006e58:	40240000 	.word	0x40240000
 8006e5c:	401c0000 	.word	0x401c0000
 8006e60:	40140000 	.word	0x40140000
 8006e64:	3fe00000 	.word	0x3fe00000
 8006e68:	4baf      	ldr	r3, [pc, #700]	; (8007128 <_dtoa_r+0x920>)
 8006e6a:	f7f9 fbe5 	bl	8000638 <__aeabi_dmul>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	e7ac      	b.n	8006dce <_dtoa_r+0x5c6>
 8006e74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e78:	9d00      	ldr	r5, [sp, #0]
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4639      	mov	r1, r7
 8006e82:	f7f9 fd03 	bl	800088c <__aeabi_ddiv>
 8006e86:	f7f9 fe87 	bl	8000b98 <__aeabi_d2iz>
 8006e8a:	9002      	str	r0, [sp, #8]
 8006e8c:	f7f9 fb6a 	bl	8000564 <__aeabi_i2d>
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	f7f9 fbd0 	bl	8000638 <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fa12 	bl	80002c8 <__aeabi_dsub>
 8006ea4:	9e02      	ldr	r6, [sp, #8]
 8006ea6:	9f01      	ldr	r7, [sp, #4]
 8006ea8:	3630      	adds	r6, #48	; 0x30
 8006eaa:	f805 6b01 	strb.w	r6, [r5], #1
 8006eae:	9e00      	ldr	r6, [sp, #0]
 8006eb0:	1bae      	subs	r6, r5, r6
 8006eb2:	42b7      	cmp	r7, r6
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	d137      	bne.n	8006f2a <_dtoa_r+0x722>
 8006eba:	f7f9 fa07 	bl	80002cc <__adddf3>
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460f      	mov	r7, r1
 8006ec6:	f7f9 fe47 	bl	8000b58 <__aeabi_dcmpgt>
 8006eca:	b9c8      	cbnz	r0, 8006f00 <_dtoa_r+0x6f8>
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	f7f9 fe18 	bl	8000b08 <__aeabi_dcmpeq>
 8006ed8:	b110      	cbz	r0, 8006ee0 <_dtoa_r+0x6d8>
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	07d9      	lsls	r1, r3, #31
 8006ede:	d40f      	bmi.n	8006f00 <_dtoa_r+0x6f8>
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4659      	mov	r1, fp
 8006ee4:	f000 fcf6 	bl	80078d4 <_Bfree>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	702b      	strb	r3, [r5, #0]
 8006eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eee:	f10a 0001 	add.w	r0, sl, #1
 8006ef2:	6018      	str	r0, [r3, #0]
 8006ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f43f acd8 	beq.w	80068ac <_dtoa_r+0xa4>
 8006efc:	601d      	str	r5, [r3, #0]
 8006efe:	e4d5      	b.n	80068ac <_dtoa_r+0xa4>
 8006f00:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f04:	462b      	mov	r3, r5
 8006f06:	461d      	mov	r5, r3
 8006f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f0c:	2a39      	cmp	r2, #57	; 0x39
 8006f0e:	d108      	bne.n	8006f22 <_dtoa_r+0x71a>
 8006f10:	9a00      	ldr	r2, [sp, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d1f7      	bne.n	8006f06 <_dtoa_r+0x6fe>
 8006f16:	9a07      	ldr	r2, [sp, #28]
 8006f18:	9900      	ldr	r1, [sp, #0]
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	9207      	str	r2, [sp, #28]
 8006f1e:	2230      	movs	r2, #48	; 0x30
 8006f20:	700a      	strb	r2, [r1, #0]
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	3201      	adds	r2, #1
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	e78c      	b.n	8006e44 <_dtoa_r+0x63c>
 8006f2a:	4b7f      	ldr	r3, [pc, #508]	; (8007128 <_dtoa_r+0x920>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f7f9 fb83 	bl	8000638 <__aeabi_dmul>
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	4606      	mov	r6, r0
 8006f38:	460f      	mov	r7, r1
 8006f3a:	f7f9 fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d09b      	beq.n	8006e7a <_dtoa_r+0x672>
 8006f42:	e7cd      	b.n	8006ee0 <_dtoa_r+0x6d8>
 8006f44:	9a08      	ldr	r2, [sp, #32]
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	f000 80c4 	beq.w	80070d4 <_dtoa_r+0x8cc>
 8006f4c:	9a05      	ldr	r2, [sp, #20]
 8006f4e:	2a01      	cmp	r2, #1
 8006f50:	f300 80a8 	bgt.w	80070a4 <_dtoa_r+0x89c>
 8006f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	f000 80a0 	beq.w	800709c <_dtoa_r+0x894>
 8006f5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f60:	9e06      	ldr	r6, [sp, #24]
 8006f62:	4645      	mov	r5, r8
 8006f64:	9a04      	ldr	r2, [sp, #16]
 8006f66:	2101      	movs	r1, #1
 8006f68:	441a      	add	r2, r3
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4498      	add	r8, r3
 8006f6e:	9204      	str	r2, [sp, #16]
 8006f70:	f000 fd6c 	bl	8007a4c <__i2b>
 8006f74:	4607      	mov	r7, r0
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	dd0b      	ble.n	8006f92 <_dtoa_r+0x78a>
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd08      	ble.n	8006f92 <_dtoa_r+0x78a>
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	9a04      	ldr	r2, [sp, #16]
 8006f84:	bfa8      	it	ge
 8006f86:	462b      	movge	r3, r5
 8006f88:	eba8 0803 	sub.w	r8, r8, r3
 8006f8c:	1aed      	subs	r5, r5, r3
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	9b06      	ldr	r3, [sp, #24]
 8006f94:	b1fb      	cbz	r3, 8006fd6 <_dtoa_r+0x7ce>
 8006f96:	9b08      	ldr	r3, [sp, #32]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 809f 	beq.w	80070dc <_dtoa_r+0x8d4>
 8006f9e:	2e00      	cmp	r6, #0
 8006fa0:	dd11      	ble.n	8006fc6 <_dtoa_r+0x7be>
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fe0c 	bl	8007bc4 <__pow5mult>
 8006fac:	465a      	mov	r2, fp
 8006fae:	4601      	mov	r1, r0
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fd60 	bl	8007a78 <__multiply>
 8006fb8:	4659      	mov	r1, fp
 8006fba:	9007      	str	r0, [sp, #28]
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fc89 	bl	80078d4 <_Bfree>
 8006fc2:	9b07      	ldr	r3, [sp, #28]
 8006fc4:	469b      	mov	fp, r3
 8006fc6:	9b06      	ldr	r3, [sp, #24]
 8006fc8:	1b9a      	subs	r2, r3, r6
 8006fca:	d004      	beq.n	8006fd6 <_dtoa_r+0x7ce>
 8006fcc:	4659      	mov	r1, fp
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 fdf8 	bl	8007bc4 <__pow5mult>
 8006fd4:	4683      	mov	fp, r0
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fd37 	bl	8007a4c <__i2b>
 8006fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	dd7c      	ble.n	80070e0 <_dtoa_r+0x8d8>
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 fdea 	bl	8007bc4 <__pow5mult>
 8006ff0:	9b05      	ldr	r3, [sp, #20]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	dd76      	ble.n	80070e6 <_dtoa_r+0x8de>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9306      	str	r3, [sp, #24]
 8006ffc:	6933      	ldr	r3, [r6, #16]
 8006ffe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007002:	6918      	ldr	r0, [r3, #16]
 8007004:	f000 fcd2 	bl	80079ac <__hi0bits>
 8007008:	f1c0 0020 	rsb	r0, r0, #32
 800700c:	9b04      	ldr	r3, [sp, #16]
 800700e:	4418      	add	r0, r3
 8007010:	f010 001f 	ands.w	r0, r0, #31
 8007014:	f000 8086 	beq.w	8007124 <_dtoa_r+0x91c>
 8007018:	f1c0 0320 	rsb	r3, r0, #32
 800701c:	2b04      	cmp	r3, #4
 800701e:	dd7f      	ble.n	8007120 <_dtoa_r+0x918>
 8007020:	f1c0 001c 	rsb	r0, r0, #28
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	4403      	add	r3, r0
 8007028:	4480      	add	r8, r0
 800702a:	4405      	add	r5, r0
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	f1b8 0f00 	cmp.w	r8, #0
 8007032:	dd05      	ble.n	8007040 <_dtoa_r+0x838>
 8007034:	4659      	mov	r1, fp
 8007036:	4642      	mov	r2, r8
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fe1d 	bl	8007c78 <__lshift>
 800703e:	4683      	mov	fp, r0
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	dd05      	ble.n	8007052 <_dtoa_r+0x84a>
 8007046:	4631      	mov	r1, r6
 8007048:	461a      	mov	r2, r3
 800704a:	4620      	mov	r0, r4
 800704c:	f000 fe14 	bl	8007c78 <__lshift>
 8007050:	4606      	mov	r6, r0
 8007052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d069      	beq.n	800712c <_dtoa_r+0x924>
 8007058:	4631      	mov	r1, r6
 800705a:	4658      	mov	r0, fp
 800705c:	f000 fe78 	bl	8007d50 <__mcmp>
 8007060:	2800      	cmp	r0, #0
 8007062:	da63      	bge.n	800712c <_dtoa_r+0x924>
 8007064:	2300      	movs	r3, #0
 8007066:	4659      	mov	r1, fp
 8007068:	220a      	movs	r2, #10
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fc54 	bl	8007918 <__multadd>
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007076:	4683      	mov	fp, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 818f 	beq.w	800739c <_dtoa_r+0xb94>
 800707e:	4639      	mov	r1, r7
 8007080:	2300      	movs	r3, #0
 8007082:	220a      	movs	r2, #10
 8007084:	4620      	mov	r0, r4
 8007086:	f000 fc47 	bl	8007918 <__multadd>
 800708a:	f1b9 0f00 	cmp.w	r9, #0
 800708e:	4607      	mov	r7, r0
 8007090:	f300 808e 	bgt.w	80071b0 <_dtoa_r+0x9a8>
 8007094:	9b05      	ldr	r3, [sp, #20]
 8007096:	2b02      	cmp	r3, #2
 8007098:	dc50      	bgt.n	800713c <_dtoa_r+0x934>
 800709a:	e089      	b.n	80071b0 <_dtoa_r+0x9a8>
 800709c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800709e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070a2:	e75d      	b.n	8006f60 <_dtoa_r+0x758>
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	1e5e      	subs	r6, r3, #1
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	42b3      	cmp	r3, r6
 80070ac:	bfbf      	itttt	lt
 80070ae:	9b06      	ldrlt	r3, [sp, #24]
 80070b0:	9606      	strlt	r6, [sp, #24]
 80070b2:	1af2      	sublt	r2, r6, r3
 80070b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80070b6:	bfb6      	itet	lt
 80070b8:	189b      	addlt	r3, r3, r2
 80070ba:	1b9e      	subge	r6, r3, r6
 80070bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	bfb8      	it	lt
 80070c2:	2600      	movlt	r6, #0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfb5      	itete	lt
 80070c8:	eba8 0503 	sublt.w	r5, r8, r3
 80070cc:	9b01      	ldrge	r3, [sp, #4]
 80070ce:	2300      	movlt	r3, #0
 80070d0:	4645      	movge	r5, r8
 80070d2:	e747      	b.n	8006f64 <_dtoa_r+0x75c>
 80070d4:	9e06      	ldr	r6, [sp, #24]
 80070d6:	9f08      	ldr	r7, [sp, #32]
 80070d8:	4645      	mov	r5, r8
 80070da:	e74c      	b.n	8006f76 <_dtoa_r+0x76e>
 80070dc:	9a06      	ldr	r2, [sp, #24]
 80070de:	e775      	b.n	8006fcc <_dtoa_r+0x7c4>
 80070e0:	9b05      	ldr	r3, [sp, #20]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	dc18      	bgt.n	8007118 <_dtoa_r+0x910>
 80070e6:	9b02      	ldr	r3, [sp, #8]
 80070e8:	b9b3      	cbnz	r3, 8007118 <_dtoa_r+0x910>
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f0:	b9a3      	cbnz	r3, 800711c <_dtoa_r+0x914>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070f8:	0d1b      	lsrs	r3, r3, #20
 80070fa:	051b      	lsls	r3, r3, #20
 80070fc:	b12b      	cbz	r3, 800710a <_dtoa_r+0x902>
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	3301      	adds	r3, #1
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	f108 0801 	add.w	r8, r8, #1
 8007108:	2301      	movs	r3, #1
 800710a:	9306      	str	r3, [sp, #24]
 800710c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	f47f af74 	bne.w	8006ffc <_dtoa_r+0x7f4>
 8007114:	2001      	movs	r0, #1
 8007116:	e779      	b.n	800700c <_dtoa_r+0x804>
 8007118:	2300      	movs	r3, #0
 800711a:	e7f6      	b.n	800710a <_dtoa_r+0x902>
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	e7f4      	b.n	800710a <_dtoa_r+0x902>
 8007120:	d085      	beq.n	800702e <_dtoa_r+0x826>
 8007122:	4618      	mov	r0, r3
 8007124:	301c      	adds	r0, #28
 8007126:	e77d      	b.n	8007024 <_dtoa_r+0x81c>
 8007128:	40240000 	.word	0x40240000
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	dc38      	bgt.n	80071a4 <_dtoa_r+0x99c>
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	2b02      	cmp	r3, #2
 8007136:	dd35      	ble.n	80071a4 <_dtoa_r+0x99c>
 8007138:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800713c:	f1b9 0f00 	cmp.w	r9, #0
 8007140:	d10d      	bne.n	800715e <_dtoa_r+0x956>
 8007142:	4631      	mov	r1, r6
 8007144:	464b      	mov	r3, r9
 8007146:	2205      	movs	r2, #5
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fbe5 	bl	8007918 <__multadd>
 800714e:	4601      	mov	r1, r0
 8007150:	4606      	mov	r6, r0
 8007152:	4658      	mov	r0, fp
 8007154:	f000 fdfc 	bl	8007d50 <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	f73f adbd 	bgt.w	8006cd8 <_dtoa_r+0x4d0>
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	9d00      	ldr	r5, [sp, #0]
 8007162:	ea6f 0a03 	mvn.w	sl, r3
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	4631      	mov	r1, r6
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fbb1 	bl	80078d4 <_Bfree>
 8007172:	2f00      	cmp	r7, #0
 8007174:	f43f aeb4 	beq.w	8006ee0 <_dtoa_r+0x6d8>
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	d005      	beq.n	800718a <_dtoa_r+0x982>
 800717e:	45b8      	cmp	r8, r7
 8007180:	d003      	beq.n	800718a <_dtoa_r+0x982>
 8007182:	4641      	mov	r1, r8
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fba5 	bl	80078d4 <_Bfree>
 800718a:	4639      	mov	r1, r7
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fba1 	bl	80078d4 <_Bfree>
 8007192:	e6a5      	b.n	8006ee0 <_dtoa_r+0x6d8>
 8007194:	2600      	movs	r6, #0
 8007196:	4637      	mov	r7, r6
 8007198:	e7e1      	b.n	800715e <_dtoa_r+0x956>
 800719a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800719c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071a0:	4637      	mov	r7, r6
 80071a2:	e599      	b.n	8006cd8 <_dtoa_r+0x4d0>
 80071a4:	9b08      	ldr	r3, [sp, #32]
 80071a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80fd 	beq.w	80073aa <_dtoa_r+0xba2>
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	dd05      	ble.n	80071c0 <_dtoa_r+0x9b8>
 80071b4:	4639      	mov	r1, r7
 80071b6:	462a      	mov	r2, r5
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fd5d 	bl	8007c78 <__lshift>
 80071be:	4607      	mov	r7, r0
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d05c      	beq.n	8007280 <_dtoa_r+0xa78>
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fb43 	bl	8007854 <_Balloc>
 80071ce:	4605      	mov	r5, r0
 80071d0:	b928      	cbnz	r0, 80071de <_dtoa_r+0x9d6>
 80071d2:	4b80      	ldr	r3, [pc, #512]	; (80073d4 <_dtoa_r+0xbcc>)
 80071d4:	4602      	mov	r2, r0
 80071d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071da:	f7ff bb2e 	b.w	800683a <_dtoa_r+0x32>
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	3202      	adds	r2, #2
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	f107 010c 	add.w	r1, r7, #12
 80071e8:	300c      	adds	r0, #12
 80071ea:	f000 fb25 	bl	8007838 <memcpy>
 80071ee:	2201      	movs	r2, #1
 80071f0:	4629      	mov	r1, r5
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fd40 	bl	8007c78 <__lshift>
 80071f8:	9b00      	ldr	r3, [sp, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	9b00      	ldr	r3, [sp, #0]
 8007200:	444b      	add	r3, r9
 8007202:	9307      	str	r3, [sp, #28]
 8007204:	9b02      	ldr	r3, [sp, #8]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	46b8      	mov	r8, r7
 800720c:	9306      	str	r3, [sp, #24]
 800720e:	4607      	mov	r7, r0
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	4631      	mov	r1, r6
 8007214:	3b01      	subs	r3, #1
 8007216:	4658      	mov	r0, fp
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	f7ff fa67 	bl	80066ec <quorem>
 800721e:	4603      	mov	r3, r0
 8007220:	3330      	adds	r3, #48	; 0x30
 8007222:	9004      	str	r0, [sp, #16]
 8007224:	4641      	mov	r1, r8
 8007226:	4658      	mov	r0, fp
 8007228:	9308      	str	r3, [sp, #32]
 800722a:	f000 fd91 	bl	8007d50 <__mcmp>
 800722e:	463a      	mov	r2, r7
 8007230:	4681      	mov	r9, r0
 8007232:	4631      	mov	r1, r6
 8007234:	4620      	mov	r0, r4
 8007236:	f000 fda7 	bl	8007d88 <__mdiff>
 800723a:	68c2      	ldr	r2, [r0, #12]
 800723c:	9b08      	ldr	r3, [sp, #32]
 800723e:	4605      	mov	r5, r0
 8007240:	bb02      	cbnz	r2, 8007284 <_dtoa_r+0xa7c>
 8007242:	4601      	mov	r1, r0
 8007244:	4658      	mov	r0, fp
 8007246:	f000 fd83 	bl	8007d50 <__mcmp>
 800724a:	9b08      	ldr	r3, [sp, #32]
 800724c:	4602      	mov	r2, r0
 800724e:	4629      	mov	r1, r5
 8007250:	4620      	mov	r0, r4
 8007252:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007256:	f000 fb3d 	bl	80078d4 <_Bfree>
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725e:	9d01      	ldr	r5, [sp, #4]
 8007260:	ea43 0102 	orr.w	r1, r3, r2
 8007264:	9b06      	ldr	r3, [sp, #24]
 8007266:	430b      	orrs	r3, r1
 8007268:	9b08      	ldr	r3, [sp, #32]
 800726a:	d10d      	bne.n	8007288 <_dtoa_r+0xa80>
 800726c:	2b39      	cmp	r3, #57	; 0x39
 800726e:	d029      	beq.n	80072c4 <_dtoa_r+0xabc>
 8007270:	f1b9 0f00 	cmp.w	r9, #0
 8007274:	dd01      	ble.n	800727a <_dtoa_r+0xa72>
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	3331      	adds	r3, #49	; 0x31
 800727a:	9a02      	ldr	r2, [sp, #8]
 800727c:	7013      	strb	r3, [r2, #0]
 800727e:	e774      	b.n	800716a <_dtoa_r+0x962>
 8007280:	4638      	mov	r0, r7
 8007282:	e7b9      	b.n	80071f8 <_dtoa_r+0x9f0>
 8007284:	2201      	movs	r2, #1
 8007286:	e7e2      	b.n	800724e <_dtoa_r+0xa46>
 8007288:	f1b9 0f00 	cmp.w	r9, #0
 800728c:	db06      	blt.n	800729c <_dtoa_r+0xa94>
 800728e:	9905      	ldr	r1, [sp, #20]
 8007290:	ea41 0909 	orr.w	r9, r1, r9
 8007294:	9906      	ldr	r1, [sp, #24]
 8007296:	ea59 0101 	orrs.w	r1, r9, r1
 800729a:	d120      	bne.n	80072de <_dtoa_r+0xad6>
 800729c:	2a00      	cmp	r2, #0
 800729e:	ddec      	ble.n	800727a <_dtoa_r+0xa72>
 80072a0:	4659      	mov	r1, fp
 80072a2:	2201      	movs	r2, #1
 80072a4:	4620      	mov	r0, r4
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	f000 fce6 	bl	8007c78 <__lshift>
 80072ac:	4631      	mov	r1, r6
 80072ae:	4683      	mov	fp, r0
 80072b0:	f000 fd4e 	bl	8007d50 <__mcmp>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	dc02      	bgt.n	80072c0 <_dtoa_r+0xab8>
 80072ba:	d1de      	bne.n	800727a <_dtoa_r+0xa72>
 80072bc:	07da      	lsls	r2, r3, #31
 80072be:	d5dc      	bpl.n	800727a <_dtoa_r+0xa72>
 80072c0:	2b39      	cmp	r3, #57	; 0x39
 80072c2:	d1d8      	bne.n	8007276 <_dtoa_r+0xa6e>
 80072c4:	9a02      	ldr	r2, [sp, #8]
 80072c6:	2339      	movs	r3, #57	; 0x39
 80072c8:	7013      	strb	r3, [r2, #0]
 80072ca:	462b      	mov	r3, r5
 80072cc:	461d      	mov	r5, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072d4:	2a39      	cmp	r2, #57	; 0x39
 80072d6:	d050      	beq.n	800737a <_dtoa_r+0xb72>
 80072d8:	3201      	adds	r2, #1
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e745      	b.n	800716a <_dtoa_r+0x962>
 80072de:	2a00      	cmp	r2, #0
 80072e0:	dd03      	ble.n	80072ea <_dtoa_r+0xae2>
 80072e2:	2b39      	cmp	r3, #57	; 0x39
 80072e4:	d0ee      	beq.n	80072c4 <_dtoa_r+0xabc>
 80072e6:	3301      	adds	r3, #1
 80072e8:	e7c7      	b.n	800727a <_dtoa_r+0xa72>
 80072ea:	9a01      	ldr	r2, [sp, #4]
 80072ec:	9907      	ldr	r1, [sp, #28]
 80072ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072f2:	428a      	cmp	r2, r1
 80072f4:	d02a      	beq.n	800734c <_dtoa_r+0xb44>
 80072f6:	4659      	mov	r1, fp
 80072f8:	2300      	movs	r3, #0
 80072fa:	220a      	movs	r2, #10
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 fb0b 	bl	8007918 <__multadd>
 8007302:	45b8      	cmp	r8, r7
 8007304:	4683      	mov	fp, r0
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	f04f 020a 	mov.w	r2, #10
 800730e:	4641      	mov	r1, r8
 8007310:	4620      	mov	r0, r4
 8007312:	d107      	bne.n	8007324 <_dtoa_r+0xb1c>
 8007314:	f000 fb00 	bl	8007918 <__multadd>
 8007318:	4680      	mov	r8, r0
 800731a:	4607      	mov	r7, r0
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	3301      	adds	r3, #1
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	e775      	b.n	8007210 <_dtoa_r+0xa08>
 8007324:	f000 faf8 	bl	8007918 <__multadd>
 8007328:	4639      	mov	r1, r7
 800732a:	4680      	mov	r8, r0
 800732c:	2300      	movs	r3, #0
 800732e:	220a      	movs	r2, #10
 8007330:	4620      	mov	r0, r4
 8007332:	f000 faf1 	bl	8007918 <__multadd>
 8007336:	4607      	mov	r7, r0
 8007338:	e7f0      	b.n	800731c <_dtoa_r+0xb14>
 800733a:	f1b9 0f00 	cmp.w	r9, #0
 800733e:	9a00      	ldr	r2, [sp, #0]
 8007340:	bfcc      	ite	gt
 8007342:	464d      	movgt	r5, r9
 8007344:	2501      	movle	r5, #1
 8007346:	4415      	add	r5, r2
 8007348:	f04f 0800 	mov.w	r8, #0
 800734c:	4659      	mov	r1, fp
 800734e:	2201      	movs	r2, #1
 8007350:	4620      	mov	r0, r4
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	f000 fc90 	bl	8007c78 <__lshift>
 8007358:	4631      	mov	r1, r6
 800735a:	4683      	mov	fp, r0
 800735c:	f000 fcf8 	bl	8007d50 <__mcmp>
 8007360:	2800      	cmp	r0, #0
 8007362:	dcb2      	bgt.n	80072ca <_dtoa_r+0xac2>
 8007364:	d102      	bne.n	800736c <_dtoa_r+0xb64>
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	07db      	lsls	r3, r3, #31
 800736a:	d4ae      	bmi.n	80072ca <_dtoa_r+0xac2>
 800736c:	462b      	mov	r3, r5
 800736e:	461d      	mov	r5, r3
 8007370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007374:	2a30      	cmp	r2, #48	; 0x30
 8007376:	d0fa      	beq.n	800736e <_dtoa_r+0xb66>
 8007378:	e6f7      	b.n	800716a <_dtoa_r+0x962>
 800737a:	9a00      	ldr	r2, [sp, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d1a5      	bne.n	80072cc <_dtoa_r+0xac4>
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	2331      	movs	r3, #49	; 0x31
 8007386:	e779      	b.n	800727c <_dtoa_r+0xa74>
 8007388:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <_dtoa_r+0xbd0>)
 800738a:	f7ff baaf 	b.w	80068ec <_dtoa_r+0xe4>
 800738e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007390:	2b00      	cmp	r3, #0
 8007392:	f47f aa86 	bne.w	80068a2 <_dtoa_r+0x9a>
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <_dtoa_r+0xbd4>)
 8007398:	f7ff baa8 	b.w	80068ec <_dtoa_r+0xe4>
 800739c:	f1b9 0f00 	cmp.w	r9, #0
 80073a0:	dc03      	bgt.n	80073aa <_dtoa_r+0xba2>
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	f73f aec9 	bgt.w	800713c <_dtoa_r+0x934>
 80073aa:	9d00      	ldr	r5, [sp, #0]
 80073ac:	4631      	mov	r1, r6
 80073ae:	4658      	mov	r0, fp
 80073b0:	f7ff f99c 	bl	80066ec <quorem>
 80073b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073b8:	f805 3b01 	strb.w	r3, [r5], #1
 80073bc:	9a00      	ldr	r2, [sp, #0]
 80073be:	1aaa      	subs	r2, r5, r2
 80073c0:	4591      	cmp	r9, r2
 80073c2:	ddba      	ble.n	800733a <_dtoa_r+0xb32>
 80073c4:	4659      	mov	r1, fp
 80073c6:	2300      	movs	r3, #0
 80073c8:	220a      	movs	r2, #10
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 faa4 	bl	8007918 <__multadd>
 80073d0:	4683      	mov	fp, r0
 80073d2:	e7eb      	b.n	80073ac <_dtoa_r+0xba4>
 80073d4:	0800893b 	.word	0x0800893b
 80073d8:	08008894 	.word	0x08008894
 80073dc:	080088b8 	.word	0x080088b8

080073e0 <__sflush_r>:
 80073e0:	898a      	ldrh	r2, [r1, #12]
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	4605      	mov	r5, r0
 80073e8:	0710      	lsls	r0, r2, #28
 80073ea:	460c      	mov	r4, r1
 80073ec:	d458      	bmi.n	80074a0 <__sflush_r+0xc0>
 80073ee:	684b      	ldr	r3, [r1, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc05      	bgt.n	8007400 <__sflush_r+0x20>
 80073f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dc02      	bgt.n	8007400 <__sflush_r+0x20>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007402:	2e00      	cmp	r6, #0
 8007404:	d0f9      	beq.n	80073fa <__sflush_r+0x1a>
 8007406:	2300      	movs	r3, #0
 8007408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800740c:	682f      	ldr	r7, [r5, #0]
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	d032      	beq.n	8007478 <__sflush_r+0x98>
 8007412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	075a      	lsls	r2, r3, #29
 8007418:	d505      	bpl.n	8007426 <__sflush_r+0x46>
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	1ac0      	subs	r0, r0, r3
 800741e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007420:	b10b      	cbz	r3, 8007426 <__sflush_r+0x46>
 8007422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007424:	1ac0      	subs	r0, r0, r3
 8007426:	2300      	movs	r3, #0
 8007428:	4602      	mov	r2, r0
 800742a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800742c:	6a21      	ldr	r1, [r4, #32]
 800742e:	4628      	mov	r0, r5
 8007430:	47b0      	blx	r6
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	d106      	bne.n	8007446 <__sflush_r+0x66>
 8007438:	6829      	ldr	r1, [r5, #0]
 800743a:	291d      	cmp	r1, #29
 800743c:	d82c      	bhi.n	8007498 <__sflush_r+0xb8>
 800743e:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <__sflush_r+0x108>)
 8007440:	40ca      	lsrs	r2, r1
 8007442:	07d6      	lsls	r6, r2, #31
 8007444:	d528      	bpl.n	8007498 <__sflush_r+0xb8>
 8007446:	2200      	movs	r2, #0
 8007448:	6062      	str	r2, [r4, #4]
 800744a:	04d9      	lsls	r1, r3, #19
 800744c:	6922      	ldr	r2, [r4, #16]
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	d504      	bpl.n	800745c <__sflush_r+0x7c>
 8007452:	1c42      	adds	r2, r0, #1
 8007454:	d101      	bne.n	800745a <__sflush_r+0x7a>
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	b903      	cbnz	r3, 800745c <__sflush_r+0x7c>
 800745a:	6560      	str	r0, [r4, #84]	; 0x54
 800745c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800745e:	602f      	str	r7, [r5, #0]
 8007460:	2900      	cmp	r1, #0
 8007462:	d0ca      	beq.n	80073fa <__sflush_r+0x1a>
 8007464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007468:	4299      	cmp	r1, r3
 800746a:	d002      	beq.n	8007472 <__sflush_r+0x92>
 800746c:	4628      	mov	r0, r5
 800746e:	f000 fd7f 	bl	8007f70 <_free_r>
 8007472:	2000      	movs	r0, #0
 8007474:	6360      	str	r0, [r4, #52]	; 0x34
 8007476:	e7c1      	b.n	80073fc <__sflush_r+0x1c>
 8007478:	6a21      	ldr	r1, [r4, #32]
 800747a:	2301      	movs	r3, #1
 800747c:	4628      	mov	r0, r5
 800747e:	47b0      	blx	r6
 8007480:	1c41      	adds	r1, r0, #1
 8007482:	d1c7      	bne.n	8007414 <__sflush_r+0x34>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0c4      	beq.n	8007414 <__sflush_r+0x34>
 800748a:	2b1d      	cmp	r3, #29
 800748c:	d001      	beq.n	8007492 <__sflush_r+0xb2>
 800748e:	2b16      	cmp	r3, #22
 8007490:	d101      	bne.n	8007496 <__sflush_r+0xb6>
 8007492:	602f      	str	r7, [r5, #0]
 8007494:	e7b1      	b.n	80073fa <__sflush_r+0x1a>
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	e7ad      	b.n	80073fc <__sflush_r+0x1c>
 80074a0:	690f      	ldr	r7, [r1, #16]
 80074a2:	2f00      	cmp	r7, #0
 80074a4:	d0a9      	beq.n	80073fa <__sflush_r+0x1a>
 80074a6:	0793      	lsls	r3, r2, #30
 80074a8:	680e      	ldr	r6, [r1, #0]
 80074aa:	bf08      	it	eq
 80074ac:	694b      	ldreq	r3, [r1, #20]
 80074ae:	600f      	str	r7, [r1, #0]
 80074b0:	bf18      	it	ne
 80074b2:	2300      	movne	r3, #0
 80074b4:	eba6 0807 	sub.w	r8, r6, r7
 80074b8:	608b      	str	r3, [r1, #8]
 80074ba:	f1b8 0f00 	cmp.w	r8, #0
 80074be:	dd9c      	ble.n	80073fa <__sflush_r+0x1a>
 80074c0:	6a21      	ldr	r1, [r4, #32]
 80074c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074c4:	4643      	mov	r3, r8
 80074c6:	463a      	mov	r2, r7
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dc06      	bgt.n	80074de <__sflush_r+0xfe>
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	e78e      	b.n	80073fc <__sflush_r+0x1c>
 80074de:	4407      	add	r7, r0
 80074e0:	eba8 0800 	sub.w	r8, r8, r0
 80074e4:	e7e9      	b.n	80074ba <__sflush_r+0xda>
 80074e6:	bf00      	nop
 80074e8:	20400001 	.word	0x20400001

080074ec <_fflush_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	b913      	cbnz	r3, 80074fc <_fflush_r+0x10>
 80074f6:	2500      	movs	r5, #0
 80074f8:	4628      	mov	r0, r5
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	b118      	cbz	r0, 8007506 <_fflush_r+0x1a>
 80074fe:	6983      	ldr	r3, [r0, #24]
 8007500:	b90b      	cbnz	r3, 8007506 <_fflush_r+0x1a>
 8007502:	f000 f887 	bl	8007614 <__sinit>
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <_fflush_r+0x6c>)
 8007508:	429c      	cmp	r4, r3
 800750a:	d11b      	bne.n	8007544 <_fflush_r+0x58>
 800750c:	686c      	ldr	r4, [r5, #4]
 800750e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0ef      	beq.n	80074f6 <_fflush_r+0xa>
 8007516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007518:	07d0      	lsls	r0, r2, #31
 800751a:	d404      	bmi.n	8007526 <_fflush_r+0x3a>
 800751c:	0599      	lsls	r1, r3, #22
 800751e:	d402      	bmi.n	8007526 <_fflush_r+0x3a>
 8007520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007522:	f000 f91a 	bl	800775a <__retarget_lock_acquire_recursive>
 8007526:	4628      	mov	r0, r5
 8007528:	4621      	mov	r1, r4
 800752a:	f7ff ff59 	bl	80073e0 <__sflush_r>
 800752e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007530:	07da      	lsls	r2, r3, #31
 8007532:	4605      	mov	r5, r0
 8007534:	d4e0      	bmi.n	80074f8 <_fflush_r+0xc>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	059b      	lsls	r3, r3, #22
 800753a:	d4dd      	bmi.n	80074f8 <_fflush_r+0xc>
 800753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753e:	f000 f90d 	bl	800775c <__retarget_lock_release_recursive>
 8007542:	e7d9      	b.n	80074f8 <_fflush_r+0xc>
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <_fflush_r+0x70>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <_fflush_r+0x62>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7df      	b.n	800750e <_fflush_r+0x22>
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <_fflush_r+0x74>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7da      	b.n	800750e <_fflush_r+0x22>
 8007558:	0800896c 	.word	0x0800896c
 800755c:	0800898c 	.word	0x0800898c
 8007560:	0800894c 	.word	0x0800894c

08007564 <std>:
 8007564:	2300      	movs	r3, #0
 8007566:	b510      	push	{r4, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	e9c0 3300 	strd	r3, r3, [r0]
 800756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	8181      	strh	r1, [r0, #12]
 8007576:	6643      	str	r3, [r0, #100]	; 0x64
 8007578:	81c2      	strh	r2, [r0, #14]
 800757a:	6183      	str	r3, [r0, #24]
 800757c:	4619      	mov	r1, r3
 800757e:	2208      	movs	r2, #8
 8007580:	305c      	adds	r0, #92	; 0x5c
 8007582:	f7fe fa25 	bl	80059d0 <memset>
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x38>)
 8007588:	6263      	str	r3, [r4, #36]	; 0x24
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <std+0x3c>)
 800758c:	62a3      	str	r3, [r4, #40]	; 0x28
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <std+0x40>)
 8007590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <std+0x44>)
 8007594:	6224      	str	r4, [r4, #32]
 8007596:	6323      	str	r3, [r4, #48]	; 0x30
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	08008399 	.word	0x08008399
 80075a0:	080083bb 	.word	0x080083bb
 80075a4:	080083f3 	.word	0x080083f3
 80075a8:	08008417 	.word	0x08008417

080075ac <_cleanup_r>:
 80075ac:	4901      	ldr	r1, [pc, #4]	; (80075b4 <_cleanup_r+0x8>)
 80075ae:	f000 b8af 	b.w	8007710 <_fwalk_reent>
 80075b2:	bf00      	nop
 80075b4:	080074ed 	.word	0x080074ed

080075b8 <__sfmoreglue>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	1e4a      	subs	r2, r1, #1
 80075bc:	2568      	movs	r5, #104	; 0x68
 80075be:	4355      	muls	r5, r2
 80075c0:	460e      	mov	r6, r1
 80075c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075c6:	f000 fd23 	bl	8008010 <_malloc_r>
 80075ca:	4604      	mov	r4, r0
 80075cc:	b140      	cbz	r0, 80075e0 <__sfmoreglue+0x28>
 80075ce:	2100      	movs	r1, #0
 80075d0:	e9c0 1600 	strd	r1, r6, [r0]
 80075d4:	300c      	adds	r0, #12
 80075d6:	60a0      	str	r0, [r4, #8]
 80075d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075dc:	f7fe f9f8 	bl	80059d0 <memset>
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}

080075e4 <__sfp_lock_acquire>:
 80075e4:	4801      	ldr	r0, [pc, #4]	; (80075ec <__sfp_lock_acquire+0x8>)
 80075e6:	f000 b8b8 	b.w	800775a <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20000394 	.word	0x20000394

080075f0 <__sfp_lock_release>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__sfp_lock_release+0x8>)
 80075f2:	f000 b8b3 	b.w	800775c <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20000394 	.word	0x20000394

080075fc <__sinit_lock_acquire>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sinit_lock_acquire+0x8>)
 80075fe:	f000 b8ac 	b.w	800775a <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	2000038f 	.word	0x2000038f

08007608 <__sinit_lock_release>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sinit_lock_release+0x8>)
 800760a:	f000 b8a7 	b.w	800775c <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	2000038f 	.word	0x2000038f

08007614 <__sinit>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4604      	mov	r4, r0
 8007618:	f7ff fff0 	bl	80075fc <__sinit_lock_acquire>
 800761c:	69a3      	ldr	r3, [r4, #24]
 800761e:	b11b      	cbz	r3, 8007628 <__sinit+0x14>
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f7ff bff0 	b.w	8007608 <__sinit_lock_release>
 8007628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800762c:	6523      	str	r3, [r4, #80]	; 0x50
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <__sinit+0x68>)
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <__sinit+0x6c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	62a2      	str	r2, [r4, #40]	; 0x28
 8007636:	42a3      	cmp	r3, r4
 8007638:	bf04      	itt	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	61a3      	streq	r3, [r4, #24]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f820 	bl	8007684 <__sfp>
 8007644:	6060      	str	r0, [r4, #4]
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f81c 	bl	8007684 <__sfp>
 800764c:	60a0      	str	r0, [r4, #8]
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f818 	bl	8007684 <__sfp>
 8007654:	2200      	movs	r2, #0
 8007656:	60e0      	str	r0, [r4, #12]
 8007658:	2104      	movs	r1, #4
 800765a:	6860      	ldr	r0, [r4, #4]
 800765c:	f7ff ff82 	bl	8007564 <std>
 8007660:	68a0      	ldr	r0, [r4, #8]
 8007662:	2201      	movs	r2, #1
 8007664:	2109      	movs	r1, #9
 8007666:	f7ff ff7d 	bl	8007564 <std>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	2202      	movs	r2, #2
 800766e:	2112      	movs	r1, #18
 8007670:	f7ff ff78 	bl	8007564 <std>
 8007674:	2301      	movs	r3, #1
 8007676:	61a3      	str	r3, [r4, #24]
 8007678:	e7d2      	b.n	8007620 <__sinit+0xc>
 800767a:	bf00      	nop
 800767c:	08008880 	.word	0x08008880
 8007680:	080075ad 	.word	0x080075ad

08007684 <__sfp>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	4607      	mov	r7, r0
 8007688:	f7ff ffac 	bl	80075e4 <__sfp_lock_acquire>
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <__sfp+0x84>)
 800768e:	681e      	ldr	r6, [r3, #0]
 8007690:	69b3      	ldr	r3, [r6, #24]
 8007692:	b913      	cbnz	r3, 800769a <__sfp+0x16>
 8007694:	4630      	mov	r0, r6
 8007696:	f7ff ffbd 	bl	8007614 <__sinit>
 800769a:	3648      	adds	r6, #72	; 0x48
 800769c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	d503      	bpl.n	80076ac <__sfp+0x28>
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	b30b      	cbz	r3, 80076ec <__sfp+0x68>
 80076a8:	6836      	ldr	r6, [r6, #0]
 80076aa:	e7f7      	b.n	800769c <__sfp+0x18>
 80076ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076b0:	b9d5      	cbnz	r5, 80076e8 <__sfp+0x64>
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <__sfp+0x88>)
 80076b4:	60e3      	str	r3, [r4, #12]
 80076b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076ba:	6665      	str	r5, [r4, #100]	; 0x64
 80076bc:	f000 f84c 	bl	8007758 <__retarget_lock_init_recursive>
 80076c0:	f7ff ff96 	bl	80075f0 <__sfp_lock_release>
 80076c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076cc:	6025      	str	r5, [r4, #0]
 80076ce:	61a5      	str	r5, [r4, #24]
 80076d0:	2208      	movs	r2, #8
 80076d2:	4629      	mov	r1, r5
 80076d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d8:	f7fe f97a 	bl	80059d0 <memset>
 80076dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076e4:	4620      	mov	r0, r4
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	3468      	adds	r4, #104	; 0x68
 80076ea:	e7d9      	b.n	80076a0 <__sfp+0x1c>
 80076ec:	2104      	movs	r1, #4
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff62 	bl	80075b8 <__sfmoreglue>
 80076f4:	4604      	mov	r4, r0
 80076f6:	6030      	str	r0, [r6, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1d5      	bne.n	80076a8 <__sfp+0x24>
 80076fc:	f7ff ff78 	bl	80075f0 <__sfp_lock_release>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	e7ee      	b.n	80076e4 <__sfp+0x60>
 8007706:	bf00      	nop
 8007708:	08008880 	.word	0x08008880
 800770c:	ffff0001 	.word	0xffff0001

08007710 <_fwalk_reent>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	4688      	mov	r8, r1
 8007718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800771c:	2700      	movs	r7, #0
 800771e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007722:	f1b9 0901 	subs.w	r9, r9, #1
 8007726:	d505      	bpl.n	8007734 <_fwalk_reent+0x24>
 8007728:	6824      	ldr	r4, [r4, #0]
 800772a:	2c00      	cmp	r4, #0
 800772c:	d1f7      	bne.n	800771e <_fwalk_reent+0xe>
 800772e:	4638      	mov	r0, r7
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d907      	bls.n	800774a <_fwalk_reent+0x3a>
 800773a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800773e:	3301      	adds	r3, #1
 8007740:	d003      	beq.n	800774a <_fwalk_reent+0x3a>
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	47c0      	blx	r8
 8007748:	4307      	orrs	r7, r0
 800774a:	3568      	adds	r5, #104	; 0x68
 800774c:	e7e9      	b.n	8007722 <_fwalk_reent+0x12>
	...

08007750 <_localeconv_r>:
 8007750:	4800      	ldr	r0, [pc, #0]	; (8007754 <_localeconv_r+0x4>)
 8007752:	4770      	bx	lr
 8007754:	20000190 	.word	0x20000190

08007758 <__retarget_lock_init_recursive>:
 8007758:	4770      	bx	lr

0800775a <__retarget_lock_acquire_recursive>:
 800775a:	4770      	bx	lr

0800775c <__retarget_lock_release_recursive>:
 800775c:	4770      	bx	lr

0800775e <__swhatbuf_r>:
 800775e:	b570      	push	{r4, r5, r6, lr}
 8007760:	460e      	mov	r6, r1
 8007762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007766:	2900      	cmp	r1, #0
 8007768:	b096      	sub	sp, #88	; 0x58
 800776a:	4614      	mov	r4, r2
 800776c:	461d      	mov	r5, r3
 800776e:	da07      	bge.n	8007780 <__swhatbuf_r+0x22>
 8007770:	2300      	movs	r3, #0
 8007772:	602b      	str	r3, [r5, #0]
 8007774:	89b3      	ldrh	r3, [r6, #12]
 8007776:	061a      	lsls	r2, r3, #24
 8007778:	d410      	bmi.n	800779c <__swhatbuf_r+0x3e>
 800777a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777e:	e00e      	b.n	800779e <__swhatbuf_r+0x40>
 8007780:	466a      	mov	r2, sp
 8007782:	f000 fe9f 	bl	80084c4 <_fstat_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	dbf2      	blt.n	8007770 <__swhatbuf_r+0x12>
 800778a:	9a01      	ldr	r2, [sp, #4]
 800778c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007794:	425a      	negs	r2, r3
 8007796:	415a      	adcs	r2, r3
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	e7ee      	b.n	800777a <__swhatbuf_r+0x1c>
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	2000      	movs	r0, #0
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	b016      	add	sp, #88	; 0x58
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080077a8 <__smakebuf_r>:
 80077a8:	898b      	ldrh	r3, [r1, #12]
 80077aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077ac:	079d      	lsls	r5, r3, #30
 80077ae:	4606      	mov	r6, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	d507      	bpl.n	80077c4 <__smakebuf_r+0x1c>
 80077b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	2301      	movs	r3, #1
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	b002      	add	sp, #8
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	ab01      	add	r3, sp, #4
 80077c6:	466a      	mov	r2, sp
 80077c8:	f7ff ffc9 	bl	800775e <__swhatbuf_r>
 80077cc:	9900      	ldr	r1, [sp, #0]
 80077ce:	4605      	mov	r5, r0
 80077d0:	4630      	mov	r0, r6
 80077d2:	f000 fc1d 	bl	8008010 <_malloc_r>
 80077d6:	b948      	cbnz	r0, 80077ec <__smakebuf_r+0x44>
 80077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077dc:	059a      	lsls	r2, r3, #22
 80077de:	d4ef      	bmi.n	80077c0 <__smakebuf_r+0x18>
 80077e0:	f023 0303 	bic.w	r3, r3, #3
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	e7e3      	b.n	80077b4 <__smakebuf_r+0xc>
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <__smakebuf_r+0x7c>)
 80077ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	6020      	str	r0, [r4, #0]
 80077f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	6163      	str	r3, [r4, #20]
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	6120      	str	r0, [r4, #16]
 8007802:	b15b      	cbz	r3, 800781c <__smakebuf_r+0x74>
 8007804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007808:	4630      	mov	r0, r6
 800780a:	f000 fe6d 	bl	80084e8 <_isatty_r>
 800780e:	b128      	cbz	r0, 800781c <__smakebuf_r+0x74>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	89a0      	ldrh	r0, [r4, #12]
 800781e:	4305      	orrs	r5, r0
 8007820:	81a5      	strh	r5, [r4, #12]
 8007822:	e7cd      	b.n	80077c0 <__smakebuf_r+0x18>
 8007824:	080075ad 	.word	0x080075ad

08007828 <malloc>:
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <malloc+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f000 bbef 	b.w	8008010 <_malloc_r>
 8007832:	bf00      	nop
 8007834:	2000003c 	.word	0x2000003c

08007838 <memcpy>:
 8007838:	440a      	add	r2, r1
 800783a:	4291      	cmp	r1, r2
 800783c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007840:	d100      	bne.n	8007844 <memcpy+0xc>
 8007842:	4770      	bx	lr
 8007844:	b510      	push	{r4, lr}
 8007846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800784a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800784e:	4291      	cmp	r1, r2
 8007850:	d1f9      	bne.n	8007846 <memcpy+0xe>
 8007852:	bd10      	pop	{r4, pc}

08007854 <_Balloc>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007858:	4604      	mov	r4, r0
 800785a:	460d      	mov	r5, r1
 800785c:	b976      	cbnz	r6, 800787c <_Balloc+0x28>
 800785e:	2010      	movs	r0, #16
 8007860:	f7ff ffe2 	bl	8007828 <malloc>
 8007864:	4602      	mov	r2, r0
 8007866:	6260      	str	r0, [r4, #36]	; 0x24
 8007868:	b920      	cbnz	r0, 8007874 <_Balloc+0x20>
 800786a:	4b18      	ldr	r3, [pc, #96]	; (80078cc <_Balloc+0x78>)
 800786c:	4818      	ldr	r0, [pc, #96]	; (80078d0 <_Balloc+0x7c>)
 800786e:	2166      	movs	r1, #102	; 0x66
 8007870:	f000 fde8 	bl	8008444 <__assert_func>
 8007874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007878:	6006      	str	r6, [r0, #0]
 800787a:	60c6      	str	r6, [r0, #12]
 800787c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800787e:	68f3      	ldr	r3, [r6, #12]
 8007880:	b183      	cbz	r3, 80078a4 <_Balloc+0x50>
 8007882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800788a:	b9b8      	cbnz	r0, 80078bc <_Balloc+0x68>
 800788c:	2101      	movs	r1, #1
 800788e:	fa01 f605 	lsl.w	r6, r1, r5
 8007892:	1d72      	adds	r2, r6, #5
 8007894:	0092      	lsls	r2, r2, #2
 8007896:	4620      	mov	r0, r4
 8007898:	f000 fb5a 	bl	8007f50 <_calloc_r>
 800789c:	b160      	cbz	r0, 80078b8 <_Balloc+0x64>
 800789e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078a2:	e00e      	b.n	80078c2 <_Balloc+0x6e>
 80078a4:	2221      	movs	r2, #33	; 0x21
 80078a6:	2104      	movs	r1, #4
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fb51 	bl	8007f50 <_calloc_r>
 80078ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b0:	60f0      	str	r0, [r6, #12]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e4      	bne.n	8007882 <_Balloc+0x2e>
 80078b8:	2000      	movs	r0, #0
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	6802      	ldr	r2, [r0, #0]
 80078be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078c2:	2300      	movs	r3, #0
 80078c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078c8:	e7f7      	b.n	80078ba <_Balloc+0x66>
 80078ca:	bf00      	nop
 80078cc:	080088c5 	.word	0x080088c5
 80078d0:	080089ac 	.word	0x080089ac

080078d4 <_Bfree>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078d8:	4605      	mov	r5, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	b976      	cbnz	r6, 80078fc <_Bfree+0x28>
 80078de:	2010      	movs	r0, #16
 80078e0:	f7ff ffa2 	bl	8007828 <malloc>
 80078e4:	4602      	mov	r2, r0
 80078e6:	6268      	str	r0, [r5, #36]	; 0x24
 80078e8:	b920      	cbnz	r0, 80078f4 <_Bfree+0x20>
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <_Bfree+0x3c>)
 80078ec:	4809      	ldr	r0, [pc, #36]	; (8007914 <_Bfree+0x40>)
 80078ee:	218a      	movs	r1, #138	; 0x8a
 80078f0:	f000 fda8 	bl	8008444 <__assert_func>
 80078f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f8:	6006      	str	r6, [r0, #0]
 80078fa:	60c6      	str	r6, [r0, #12]
 80078fc:	b13c      	cbz	r4, 800790e <_Bfree+0x3a>
 80078fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007900:	6862      	ldr	r2, [r4, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007908:	6021      	str	r1, [r4, #0]
 800790a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	080088c5 	.word	0x080088c5
 8007914:	080089ac 	.word	0x080089ac

08007918 <__multadd>:
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	690e      	ldr	r6, [r1, #16]
 800791e:	4607      	mov	r7, r0
 8007920:	4698      	mov	r8, r3
 8007922:	460c      	mov	r4, r1
 8007924:	f101 0014 	add.w	r0, r1, #20
 8007928:	2300      	movs	r3, #0
 800792a:	6805      	ldr	r5, [r0, #0]
 800792c:	b2a9      	uxth	r1, r5
 800792e:	fb02 8101 	mla	r1, r2, r1, r8
 8007932:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007936:	0c2d      	lsrs	r5, r5, #16
 8007938:	fb02 c505 	mla	r5, r2, r5, ip
 800793c:	b289      	uxth	r1, r1
 800793e:	3301      	adds	r3, #1
 8007940:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007944:	429e      	cmp	r6, r3
 8007946:	f840 1b04 	str.w	r1, [r0], #4
 800794a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800794e:	dcec      	bgt.n	800792a <__multadd+0x12>
 8007950:	f1b8 0f00 	cmp.w	r8, #0
 8007954:	d022      	beq.n	800799c <__multadd+0x84>
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	42b3      	cmp	r3, r6
 800795a:	dc19      	bgt.n	8007990 <__multadd+0x78>
 800795c:	6861      	ldr	r1, [r4, #4]
 800795e:	4638      	mov	r0, r7
 8007960:	3101      	adds	r1, #1
 8007962:	f7ff ff77 	bl	8007854 <_Balloc>
 8007966:	4605      	mov	r5, r0
 8007968:	b928      	cbnz	r0, 8007976 <__multadd+0x5e>
 800796a:	4602      	mov	r2, r0
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <__multadd+0x8c>)
 800796e:	480e      	ldr	r0, [pc, #56]	; (80079a8 <__multadd+0x90>)
 8007970:	21b5      	movs	r1, #181	; 0xb5
 8007972:	f000 fd67 	bl	8008444 <__assert_func>
 8007976:	6922      	ldr	r2, [r4, #16]
 8007978:	3202      	adds	r2, #2
 800797a:	f104 010c 	add.w	r1, r4, #12
 800797e:	0092      	lsls	r2, r2, #2
 8007980:	300c      	adds	r0, #12
 8007982:	f7ff ff59 	bl	8007838 <memcpy>
 8007986:	4621      	mov	r1, r4
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ffa3 	bl	80078d4 <_Bfree>
 800798e:	462c      	mov	r4, r5
 8007990:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007994:	3601      	adds	r6, #1
 8007996:	f8c3 8014 	str.w	r8, [r3, #20]
 800799a:	6126      	str	r6, [r4, #16]
 800799c:	4620      	mov	r0, r4
 800799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a2:	bf00      	nop
 80079a4:	0800893b 	.word	0x0800893b
 80079a8:	080089ac 	.word	0x080089ac

080079ac <__hi0bits>:
 80079ac:	0c03      	lsrs	r3, r0, #16
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	b9d3      	cbnz	r3, 80079e8 <__hi0bits+0x3c>
 80079b2:	0400      	lsls	r0, r0, #16
 80079b4:	2310      	movs	r3, #16
 80079b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079ba:	bf04      	itt	eq
 80079bc:	0200      	lsleq	r0, r0, #8
 80079be:	3308      	addeq	r3, #8
 80079c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079c4:	bf04      	itt	eq
 80079c6:	0100      	lsleq	r0, r0, #4
 80079c8:	3304      	addeq	r3, #4
 80079ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079ce:	bf04      	itt	eq
 80079d0:	0080      	lsleq	r0, r0, #2
 80079d2:	3302      	addeq	r3, #2
 80079d4:	2800      	cmp	r0, #0
 80079d6:	db05      	blt.n	80079e4 <__hi0bits+0x38>
 80079d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079dc:	f103 0301 	add.w	r3, r3, #1
 80079e0:	bf08      	it	eq
 80079e2:	2320      	moveq	r3, #32
 80079e4:	4618      	mov	r0, r3
 80079e6:	4770      	bx	lr
 80079e8:	2300      	movs	r3, #0
 80079ea:	e7e4      	b.n	80079b6 <__hi0bits+0xa>

080079ec <__lo0bits>:
 80079ec:	6803      	ldr	r3, [r0, #0]
 80079ee:	f013 0207 	ands.w	r2, r3, #7
 80079f2:	4601      	mov	r1, r0
 80079f4:	d00b      	beq.n	8007a0e <__lo0bits+0x22>
 80079f6:	07da      	lsls	r2, r3, #31
 80079f8:	d424      	bmi.n	8007a44 <__lo0bits+0x58>
 80079fa:	0798      	lsls	r0, r3, #30
 80079fc:	bf49      	itett	mi
 80079fe:	085b      	lsrmi	r3, r3, #1
 8007a00:	089b      	lsrpl	r3, r3, #2
 8007a02:	2001      	movmi	r0, #1
 8007a04:	600b      	strmi	r3, [r1, #0]
 8007a06:	bf5c      	itt	pl
 8007a08:	600b      	strpl	r3, [r1, #0]
 8007a0a:	2002      	movpl	r0, #2
 8007a0c:	4770      	bx	lr
 8007a0e:	b298      	uxth	r0, r3
 8007a10:	b9b0      	cbnz	r0, 8007a40 <__lo0bits+0x54>
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	2010      	movs	r0, #16
 8007a16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a1a:	bf04      	itt	eq
 8007a1c:	0a1b      	lsreq	r3, r3, #8
 8007a1e:	3008      	addeq	r0, #8
 8007a20:	071a      	lsls	r2, r3, #28
 8007a22:	bf04      	itt	eq
 8007a24:	091b      	lsreq	r3, r3, #4
 8007a26:	3004      	addeq	r0, #4
 8007a28:	079a      	lsls	r2, r3, #30
 8007a2a:	bf04      	itt	eq
 8007a2c:	089b      	lsreq	r3, r3, #2
 8007a2e:	3002      	addeq	r0, #2
 8007a30:	07da      	lsls	r2, r3, #31
 8007a32:	d403      	bmi.n	8007a3c <__lo0bits+0x50>
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	f100 0001 	add.w	r0, r0, #1
 8007a3a:	d005      	beq.n	8007a48 <__lo0bits+0x5c>
 8007a3c:	600b      	str	r3, [r1, #0]
 8007a3e:	4770      	bx	lr
 8007a40:	4610      	mov	r0, r2
 8007a42:	e7e8      	b.n	8007a16 <__lo0bits+0x2a>
 8007a44:	2000      	movs	r0, #0
 8007a46:	4770      	bx	lr
 8007a48:	2020      	movs	r0, #32
 8007a4a:	4770      	bx	lr

08007a4c <__i2b>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	460c      	mov	r4, r1
 8007a50:	2101      	movs	r1, #1
 8007a52:	f7ff feff 	bl	8007854 <_Balloc>
 8007a56:	4602      	mov	r2, r0
 8007a58:	b928      	cbnz	r0, 8007a66 <__i2b+0x1a>
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <__i2b+0x24>)
 8007a5c:	4805      	ldr	r0, [pc, #20]	; (8007a74 <__i2b+0x28>)
 8007a5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a62:	f000 fcef 	bl	8008444 <__assert_func>
 8007a66:	2301      	movs	r3, #1
 8007a68:	6144      	str	r4, [r0, #20]
 8007a6a:	6103      	str	r3, [r0, #16]
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	0800893b 	.word	0x0800893b
 8007a74:	080089ac 	.word	0x080089ac

08007a78 <__multiply>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	690a      	ldr	r2, [r1, #16]
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	bfb8      	it	lt
 8007a86:	460b      	movlt	r3, r1
 8007a88:	460d      	mov	r5, r1
 8007a8a:	bfbc      	itt	lt
 8007a8c:	4625      	movlt	r5, r4
 8007a8e:	461c      	movlt	r4, r3
 8007a90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007a94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a98:	68ab      	ldr	r3, [r5, #8]
 8007a9a:	6869      	ldr	r1, [r5, #4]
 8007a9c:	eb0a 0709 	add.w	r7, sl, r9
 8007aa0:	42bb      	cmp	r3, r7
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	bfb8      	it	lt
 8007aa6:	3101      	addlt	r1, #1
 8007aa8:	f7ff fed4 	bl	8007854 <_Balloc>
 8007aac:	b930      	cbnz	r0, 8007abc <__multiply+0x44>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <__multiply+0x144>)
 8007ab2:	4843      	ldr	r0, [pc, #268]	; (8007bc0 <__multiply+0x148>)
 8007ab4:	f240 115d 	movw	r1, #349	; 0x15d
 8007ab8:	f000 fcc4 	bl	8008444 <__assert_func>
 8007abc:	f100 0614 	add.w	r6, r0, #20
 8007ac0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ac4:	4633      	mov	r3, r6
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	d31e      	bcc.n	8007b0a <__multiply+0x92>
 8007acc:	f105 0c14 	add.w	ip, r5, #20
 8007ad0:	f104 0314 	add.w	r3, r4, #20
 8007ad4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007ad8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007adc:	9202      	str	r2, [sp, #8]
 8007ade:	ebac 0205 	sub.w	r2, ip, r5
 8007ae2:	3a15      	subs	r2, #21
 8007ae4:	f022 0203 	bic.w	r2, r2, #3
 8007ae8:	3204      	adds	r2, #4
 8007aea:	f105 0115 	add.w	r1, r5, #21
 8007aee:	458c      	cmp	ip, r1
 8007af0:	bf38      	it	cc
 8007af2:	2204      	movcc	r2, #4
 8007af4:	9201      	str	r2, [sp, #4]
 8007af6:	9a02      	ldr	r2, [sp, #8]
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d808      	bhi.n	8007b10 <__multiply+0x98>
 8007afe:	2f00      	cmp	r7, #0
 8007b00:	dc55      	bgt.n	8007bae <__multiply+0x136>
 8007b02:	6107      	str	r7, [r0, #16]
 8007b04:	b005      	add	sp, #20
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	f843 2b04 	str.w	r2, [r3], #4
 8007b0e:	e7db      	b.n	8007ac8 <__multiply+0x50>
 8007b10:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b14:	f1ba 0f00 	cmp.w	sl, #0
 8007b18:	d020      	beq.n	8007b5c <__multiply+0xe4>
 8007b1a:	f105 0e14 	add.w	lr, r5, #20
 8007b1e:	46b1      	mov	r9, r6
 8007b20:	2200      	movs	r2, #0
 8007b22:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007b26:	f8d9 b000 	ldr.w	fp, [r9]
 8007b2a:	b2a1      	uxth	r1, r4
 8007b2c:	fa1f fb8b 	uxth.w	fp, fp
 8007b30:	fb0a b101 	mla	r1, sl, r1, fp
 8007b34:	4411      	add	r1, r2
 8007b36:	f8d9 2000 	ldr.w	r2, [r9]
 8007b3a:	0c24      	lsrs	r4, r4, #16
 8007b3c:	0c12      	lsrs	r2, r2, #16
 8007b3e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007b42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007b46:	b289      	uxth	r1, r1
 8007b48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007b4c:	45f4      	cmp	ip, lr
 8007b4e:	f849 1b04 	str.w	r1, [r9], #4
 8007b52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007b56:	d8e4      	bhi.n	8007b22 <__multiply+0xaa>
 8007b58:	9901      	ldr	r1, [sp, #4]
 8007b5a:	5072      	str	r2, [r6, r1]
 8007b5c:	9a03      	ldr	r2, [sp, #12]
 8007b5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b62:	3304      	adds	r3, #4
 8007b64:	f1b9 0f00 	cmp.w	r9, #0
 8007b68:	d01f      	beq.n	8007baa <__multiply+0x132>
 8007b6a:	6834      	ldr	r4, [r6, #0]
 8007b6c:	f105 0114 	add.w	r1, r5, #20
 8007b70:	46b6      	mov	lr, r6
 8007b72:	f04f 0a00 	mov.w	sl, #0
 8007b76:	880a      	ldrh	r2, [r1, #0]
 8007b78:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007b7c:	fb09 b202 	mla	r2, r9, r2, fp
 8007b80:	4492      	add	sl, r2
 8007b82:	b2a4      	uxth	r4, r4
 8007b84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007b88:	f84e 4b04 	str.w	r4, [lr], #4
 8007b8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b90:	f8be 2000 	ldrh.w	r2, [lr]
 8007b94:	0c24      	lsrs	r4, r4, #16
 8007b96:	fb09 2404 	mla	r4, r9, r4, r2
 8007b9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007b9e:	458c      	cmp	ip, r1
 8007ba0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ba4:	d8e7      	bhi.n	8007b76 <__multiply+0xfe>
 8007ba6:	9a01      	ldr	r2, [sp, #4]
 8007ba8:	50b4      	str	r4, [r6, r2]
 8007baa:	3604      	adds	r6, #4
 8007bac:	e7a3      	b.n	8007af6 <__multiply+0x7e>
 8007bae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1a5      	bne.n	8007b02 <__multiply+0x8a>
 8007bb6:	3f01      	subs	r7, #1
 8007bb8:	e7a1      	b.n	8007afe <__multiply+0x86>
 8007bba:	bf00      	nop
 8007bbc:	0800893b 	.word	0x0800893b
 8007bc0:	080089ac 	.word	0x080089ac

08007bc4 <__pow5mult>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4615      	mov	r5, r2
 8007bca:	f012 0203 	ands.w	r2, r2, #3
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	d007      	beq.n	8007be4 <__pow5mult+0x20>
 8007bd4:	4c25      	ldr	r4, [pc, #148]	; (8007c6c <__pow5mult+0xa8>)
 8007bd6:	3a01      	subs	r2, #1
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bde:	f7ff fe9b 	bl	8007918 <__multadd>
 8007be2:	4607      	mov	r7, r0
 8007be4:	10ad      	asrs	r5, r5, #2
 8007be6:	d03d      	beq.n	8007c64 <__pow5mult+0xa0>
 8007be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bea:	b97c      	cbnz	r4, 8007c0c <__pow5mult+0x48>
 8007bec:	2010      	movs	r0, #16
 8007bee:	f7ff fe1b 	bl	8007828 <malloc>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6270      	str	r0, [r6, #36]	; 0x24
 8007bf6:	b928      	cbnz	r0, 8007c04 <__pow5mult+0x40>
 8007bf8:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <__pow5mult+0xac>)
 8007bfa:	481e      	ldr	r0, [pc, #120]	; (8007c74 <__pow5mult+0xb0>)
 8007bfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c00:	f000 fc20 	bl	8008444 <__assert_func>
 8007c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c08:	6004      	str	r4, [r0, #0]
 8007c0a:	60c4      	str	r4, [r0, #12]
 8007c0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c14:	b94c      	cbnz	r4, 8007c2a <__pow5mult+0x66>
 8007c16:	f240 2171 	movw	r1, #625	; 0x271
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ff16 	bl	8007a4c <__i2b>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c26:	4604      	mov	r4, r0
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	f04f 0900 	mov.w	r9, #0
 8007c2e:	07eb      	lsls	r3, r5, #31
 8007c30:	d50a      	bpl.n	8007c48 <__pow5mult+0x84>
 8007c32:	4639      	mov	r1, r7
 8007c34:	4622      	mov	r2, r4
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7ff ff1e 	bl	8007a78 <__multiply>
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff fe47 	bl	80078d4 <_Bfree>
 8007c46:	4647      	mov	r7, r8
 8007c48:	106d      	asrs	r5, r5, #1
 8007c4a:	d00b      	beq.n	8007c64 <__pow5mult+0xa0>
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	b938      	cbnz	r0, 8007c60 <__pow5mult+0x9c>
 8007c50:	4622      	mov	r2, r4
 8007c52:	4621      	mov	r1, r4
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff ff0f 	bl	8007a78 <__multiply>
 8007c5a:	6020      	str	r0, [r4, #0]
 8007c5c:	f8c0 9000 	str.w	r9, [r0]
 8007c60:	4604      	mov	r4, r0
 8007c62:	e7e4      	b.n	8007c2e <__pow5mult+0x6a>
 8007c64:	4638      	mov	r0, r7
 8007c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08008b00 	.word	0x08008b00
 8007c70:	080088c5 	.word	0x080088c5
 8007c74:	080089ac 	.word	0x080089ac

08007c78 <__lshift>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6849      	ldr	r1, [r1, #4]
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4691      	mov	r9, r2
 8007c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c90:	f108 0601 	add.w	r6, r8, #1
 8007c94:	42b3      	cmp	r3, r6
 8007c96:	db0b      	blt.n	8007cb0 <__lshift+0x38>
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fddb 	bl	8007854 <_Balloc>
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	b948      	cbnz	r0, 8007cb6 <__lshift+0x3e>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <__lshift+0xd0>)
 8007ca6:	4829      	ldr	r0, [pc, #164]	; (8007d4c <__lshift+0xd4>)
 8007ca8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cac:	f000 fbca 	bl	8008444 <__assert_func>
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	e7ee      	b.n	8007c94 <__lshift+0x1c>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f100 0114 	add.w	r1, r0, #20
 8007cbc:	f100 0210 	add.w	r2, r0, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	4553      	cmp	r3, sl
 8007cc4:	db33      	blt.n	8007d2e <__lshift+0xb6>
 8007cc6:	6920      	ldr	r0, [r4, #16]
 8007cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ccc:	f104 0314 	add.w	r3, r4, #20
 8007cd0:	f019 091f 	ands.w	r9, r9, #31
 8007cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cdc:	d02b      	beq.n	8007d36 <__lshift+0xbe>
 8007cde:	f1c9 0e20 	rsb	lr, r9, #32
 8007ce2:	468a      	mov	sl, r1
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	fa00 f009 	lsl.w	r0, r0, r9
 8007cec:	4302      	orrs	r2, r0
 8007cee:	f84a 2b04 	str.w	r2, [sl], #4
 8007cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf6:	459c      	cmp	ip, r3
 8007cf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cfc:	d8f3      	bhi.n	8007ce6 <__lshift+0x6e>
 8007cfe:	ebac 0304 	sub.w	r3, ip, r4
 8007d02:	3b15      	subs	r3, #21
 8007d04:	f023 0303 	bic.w	r3, r3, #3
 8007d08:	3304      	adds	r3, #4
 8007d0a:	f104 0015 	add.w	r0, r4, #21
 8007d0e:	4584      	cmp	ip, r0
 8007d10:	bf38      	it	cc
 8007d12:	2304      	movcc	r3, #4
 8007d14:	50ca      	str	r2, [r1, r3]
 8007d16:	b10a      	cbz	r2, 8007d1c <__lshift+0xa4>
 8007d18:	f108 0602 	add.w	r6, r8, #2
 8007d1c:	3e01      	subs	r6, #1
 8007d1e:	4638      	mov	r0, r7
 8007d20:	612e      	str	r6, [r5, #16]
 8007d22:	4621      	mov	r1, r4
 8007d24:	f7ff fdd6 	bl	80078d4 <_Bfree>
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d32:	3301      	adds	r3, #1
 8007d34:	e7c5      	b.n	8007cc2 <__lshift+0x4a>
 8007d36:	3904      	subs	r1, #4
 8007d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d40:	459c      	cmp	ip, r3
 8007d42:	d8f9      	bhi.n	8007d38 <__lshift+0xc0>
 8007d44:	e7ea      	b.n	8007d1c <__lshift+0xa4>
 8007d46:	bf00      	nop
 8007d48:	0800893b 	.word	0x0800893b
 8007d4c:	080089ac 	.word	0x080089ac

08007d50 <__mcmp>:
 8007d50:	b530      	push	{r4, r5, lr}
 8007d52:	6902      	ldr	r2, [r0, #16]
 8007d54:	690c      	ldr	r4, [r1, #16]
 8007d56:	1b12      	subs	r2, r2, r4
 8007d58:	d10e      	bne.n	8007d78 <__mcmp+0x28>
 8007d5a:	f100 0314 	add.w	r3, r0, #20
 8007d5e:	3114      	adds	r1, #20
 8007d60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d70:	42a5      	cmp	r5, r4
 8007d72:	d003      	beq.n	8007d7c <__mcmp+0x2c>
 8007d74:	d305      	bcc.n	8007d82 <__mcmp+0x32>
 8007d76:	2201      	movs	r2, #1
 8007d78:	4610      	mov	r0, r2
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	4283      	cmp	r3, r0
 8007d7e:	d3f3      	bcc.n	8007d68 <__mcmp+0x18>
 8007d80:	e7fa      	b.n	8007d78 <__mcmp+0x28>
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	e7f7      	b.n	8007d78 <__mcmp+0x28>

08007d88 <__mdiff>:
 8007d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	4606      	mov	r6, r0
 8007d90:	4611      	mov	r1, r2
 8007d92:	4620      	mov	r0, r4
 8007d94:	4617      	mov	r7, r2
 8007d96:	f7ff ffdb 	bl	8007d50 <__mcmp>
 8007d9a:	1e05      	subs	r5, r0, #0
 8007d9c:	d110      	bne.n	8007dc0 <__mdiff+0x38>
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff fd57 	bl	8007854 <_Balloc>
 8007da6:	b930      	cbnz	r0, 8007db6 <__mdiff+0x2e>
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <__mdiff+0x108>)
 8007daa:	4602      	mov	r2, r0
 8007dac:	f240 2132 	movw	r1, #562	; 0x232
 8007db0:	4838      	ldr	r0, [pc, #224]	; (8007e94 <__mdiff+0x10c>)
 8007db2:	f000 fb47 	bl	8008444 <__assert_func>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc0:	bfa4      	itt	ge
 8007dc2:	463b      	movge	r3, r7
 8007dc4:	4627      	movge	r7, r4
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	bfa6      	itte	ge
 8007dcc:	461c      	movge	r4, r3
 8007dce:	2500      	movge	r5, #0
 8007dd0:	2501      	movlt	r5, #1
 8007dd2:	f7ff fd3f 	bl	8007854 <_Balloc>
 8007dd6:	b920      	cbnz	r0, 8007de2 <__mdiff+0x5a>
 8007dd8:	4b2d      	ldr	r3, [pc, #180]	; (8007e90 <__mdiff+0x108>)
 8007dda:	4602      	mov	r2, r0
 8007ddc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007de0:	e7e6      	b.n	8007db0 <__mdiff+0x28>
 8007de2:	693e      	ldr	r6, [r7, #16]
 8007de4:	60c5      	str	r5, [r0, #12]
 8007de6:	6925      	ldr	r5, [r4, #16]
 8007de8:	f107 0114 	add.w	r1, r7, #20
 8007dec:	f104 0914 	add.w	r9, r4, #20
 8007df0:	f100 0e14 	add.w	lr, r0, #20
 8007df4:	f107 0210 	add.w	r2, r7, #16
 8007df8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007dfc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007e00:	46f2      	mov	sl, lr
 8007e02:	2700      	movs	r7, #0
 8007e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e0c:	fa1f f883 	uxth.w	r8, r3
 8007e10:	fa17 f78b 	uxtah	r7, r7, fp
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	eba7 0808 	sub.w	r8, r7, r8
 8007e1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e22:	fa1f f888 	uxth.w	r8, r8
 8007e26:	141f      	asrs	r7, r3, #16
 8007e28:	454d      	cmp	r5, r9
 8007e2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e2e:	f84a 3b04 	str.w	r3, [sl], #4
 8007e32:	d8e7      	bhi.n	8007e04 <__mdiff+0x7c>
 8007e34:	1b2b      	subs	r3, r5, r4
 8007e36:	3b15      	subs	r3, #21
 8007e38:	f023 0303 	bic.w	r3, r3, #3
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	3415      	adds	r4, #21
 8007e40:	42a5      	cmp	r5, r4
 8007e42:	bf38      	it	cc
 8007e44:	2304      	movcc	r3, #4
 8007e46:	4419      	add	r1, r3
 8007e48:	4473      	add	r3, lr
 8007e4a:	469e      	mov	lr, r3
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	4565      	cmp	r5, ip
 8007e50:	d30e      	bcc.n	8007e70 <__mdiff+0xe8>
 8007e52:	f10c 0203 	add.w	r2, ip, #3
 8007e56:	1a52      	subs	r2, r2, r1
 8007e58:	f022 0203 	bic.w	r2, r2, #3
 8007e5c:	3903      	subs	r1, #3
 8007e5e:	458c      	cmp	ip, r1
 8007e60:	bf38      	it	cc
 8007e62:	2200      	movcc	r2, #0
 8007e64:	441a      	add	r2, r3
 8007e66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e6a:	b17b      	cbz	r3, 8007e8c <__mdiff+0x104>
 8007e6c:	6106      	str	r6, [r0, #16]
 8007e6e:	e7a5      	b.n	8007dbc <__mdiff+0x34>
 8007e70:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e74:	fa17 f488 	uxtah	r4, r7, r8
 8007e78:	1422      	asrs	r2, r4, #16
 8007e7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007e7e:	b2a4      	uxth	r4, r4
 8007e80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007e84:	f84e 4b04 	str.w	r4, [lr], #4
 8007e88:	1417      	asrs	r7, r2, #16
 8007e8a:	e7e0      	b.n	8007e4e <__mdiff+0xc6>
 8007e8c:	3e01      	subs	r6, #1
 8007e8e:	e7ea      	b.n	8007e66 <__mdiff+0xde>
 8007e90:	0800893b 	.word	0x0800893b
 8007e94:	080089ac 	.word	0x080089ac

08007e98 <__d2b>:
 8007e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	ec57 6b10 	vmov	r6, r7, d0
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	f7ff fcd5 	bl	8007854 <_Balloc>
 8007eaa:	4604      	mov	r4, r0
 8007eac:	b930      	cbnz	r0, 8007ebc <__d2b+0x24>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <__d2b+0xb0>)
 8007eb2:	4826      	ldr	r0, [pc, #152]	; (8007f4c <__d2b+0xb4>)
 8007eb4:	f240 310a 	movw	r1, #778	; 0x30a
 8007eb8:	f000 fac4 	bl	8008444 <__assert_func>
 8007ebc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ec4:	bb35      	cbnz	r5, 8007f14 <__d2b+0x7c>
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	d028      	beq.n	8007f1e <__d2b+0x86>
 8007ecc:	4668      	mov	r0, sp
 8007ece:	9600      	str	r6, [sp, #0]
 8007ed0:	f7ff fd8c 	bl	80079ec <__lo0bits>
 8007ed4:	9900      	ldr	r1, [sp, #0]
 8007ed6:	b300      	cbz	r0, 8007f1a <__d2b+0x82>
 8007ed8:	9a01      	ldr	r2, [sp, #4]
 8007eda:	f1c0 0320 	rsb	r3, r0, #32
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	40c2      	lsrs	r2, r0
 8007ee6:	6163      	str	r3, [r4, #20]
 8007ee8:	9201      	str	r2, [sp, #4]
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	61a3      	str	r3, [r4, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	2202      	movne	r2, #2
 8007ef4:	2201      	moveq	r2, #1
 8007ef6:	6122      	str	r2, [r4, #16]
 8007ef8:	b1d5      	cbz	r5, 8007f30 <__d2b+0x98>
 8007efa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007efe:	4405      	add	r5, r0
 8007f00:	f8c9 5000 	str.w	r5, [r9]
 8007f04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f08:	f8c8 0000 	str.w	r0, [r8]
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	b003      	add	sp, #12
 8007f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f18:	e7d5      	b.n	8007ec6 <__d2b+0x2e>
 8007f1a:	6161      	str	r1, [r4, #20]
 8007f1c:	e7e5      	b.n	8007eea <__d2b+0x52>
 8007f1e:	a801      	add	r0, sp, #4
 8007f20:	f7ff fd64 	bl	80079ec <__lo0bits>
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	6163      	str	r3, [r4, #20]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	6122      	str	r2, [r4, #16]
 8007f2c:	3020      	adds	r0, #32
 8007f2e:	e7e3      	b.n	8007ef8 <__d2b+0x60>
 8007f30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f38:	f8c9 0000 	str.w	r0, [r9]
 8007f3c:	6918      	ldr	r0, [r3, #16]
 8007f3e:	f7ff fd35 	bl	80079ac <__hi0bits>
 8007f42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f46:	e7df      	b.n	8007f08 <__d2b+0x70>
 8007f48:	0800893b 	.word	0x0800893b
 8007f4c:	080089ac 	.word	0x080089ac

08007f50 <_calloc_r>:
 8007f50:	b513      	push	{r0, r1, r4, lr}
 8007f52:	434a      	muls	r2, r1
 8007f54:	4611      	mov	r1, r2
 8007f56:	9201      	str	r2, [sp, #4]
 8007f58:	f000 f85a 	bl	8008010 <_malloc_r>
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	b118      	cbz	r0, 8007f68 <_calloc_r+0x18>
 8007f60:	9a01      	ldr	r2, [sp, #4]
 8007f62:	2100      	movs	r1, #0
 8007f64:	f7fd fd34 	bl	80059d0 <memset>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	b002      	add	sp, #8
 8007f6c:	bd10      	pop	{r4, pc}
	...

08007f70 <_free_r>:
 8007f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d048      	beq.n	8008008 <_free_r+0x98>
 8007f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7a:	9001      	str	r0, [sp, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f82:	bfb8      	it	lt
 8007f84:	18e4      	addlt	r4, r4, r3
 8007f86:	f000 fae3 	bl	8008550 <__malloc_lock>
 8007f8a:	4a20      	ldr	r2, [pc, #128]	; (800800c <_free_r+0x9c>)
 8007f8c:	9801      	ldr	r0, [sp, #4]
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	4615      	mov	r5, r2
 8007f92:	b933      	cbnz	r3, 8007fa2 <_free_r+0x32>
 8007f94:	6063      	str	r3, [r4, #4]
 8007f96:	6014      	str	r4, [r2, #0]
 8007f98:	b003      	add	sp, #12
 8007f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f9e:	f000 badd 	b.w	800855c <__malloc_unlock>
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	d90b      	bls.n	8007fbe <_free_r+0x4e>
 8007fa6:	6821      	ldr	r1, [r4, #0]
 8007fa8:	1862      	adds	r2, r4, r1
 8007faa:	4293      	cmp	r3, r2
 8007fac:	bf04      	itt	eq
 8007fae:	681a      	ldreq	r2, [r3, #0]
 8007fb0:	685b      	ldreq	r3, [r3, #4]
 8007fb2:	6063      	str	r3, [r4, #4]
 8007fb4:	bf04      	itt	eq
 8007fb6:	1852      	addeq	r2, r2, r1
 8007fb8:	6022      	streq	r2, [r4, #0]
 8007fba:	602c      	str	r4, [r5, #0]
 8007fbc:	e7ec      	b.n	8007f98 <_free_r+0x28>
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b10b      	cbz	r3, 8007fc8 <_free_r+0x58>
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	d9fa      	bls.n	8007fbe <_free_r+0x4e>
 8007fc8:	6811      	ldr	r1, [r2, #0]
 8007fca:	1855      	adds	r5, r2, r1
 8007fcc:	42a5      	cmp	r5, r4
 8007fce:	d10b      	bne.n	8007fe8 <_free_r+0x78>
 8007fd0:	6824      	ldr	r4, [r4, #0]
 8007fd2:	4421      	add	r1, r4
 8007fd4:	1854      	adds	r4, r2, r1
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	6011      	str	r1, [r2, #0]
 8007fda:	d1dd      	bne.n	8007f98 <_free_r+0x28>
 8007fdc:	681c      	ldr	r4, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	6053      	str	r3, [r2, #4]
 8007fe2:	4421      	add	r1, r4
 8007fe4:	6011      	str	r1, [r2, #0]
 8007fe6:	e7d7      	b.n	8007f98 <_free_r+0x28>
 8007fe8:	d902      	bls.n	8007ff0 <_free_r+0x80>
 8007fea:	230c      	movs	r3, #12
 8007fec:	6003      	str	r3, [r0, #0]
 8007fee:	e7d3      	b.n	8007f98 <_free_r+0x28>
 8007ff0:	6825      	ldr	r5, [r4, #0]
 8007ff2:	1961      	adds	r1, r4, r5
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	bf04      	itt	eq
 8007ff8:	6819      	ldreq	r1, [r3, #0]
 8007ffa:	685b      	ldreq	r3, [r3, #4]
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	bf04      	itt	eq
 8008000:	1949      	addeq	r1, r1, r5
 8008002:	6021      	streq	r1, [r4, #0]
 8008004:	6054      	str	r4, [r2, #4]
 8008006:	e7c7      	b.n	8007f98 <_free_r+0x28>
 8008008:	b003      	add	sp, #12
 800800a:	bd30      	pop	{r4, r5, pc}
 800800c:	20000294 	.word	0x20000294

08008010 <_malloc_r>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	1ccd      	adds	r5, r1, #3
 8008014:	f025 0503 	bic.w	r5, r5, #3
 8008018:	3508      	adds	r5, #8
 800801a:	2d0c      	cmp	r5, #12
 800801c:	bf38      	it	cc
 800801e:	250c      	movcc	r5, #12
 8008020:	2d00      	cmp	r5, #0
 8008022:	4606      	mov	r6, r0
 8008024:	db01      	blt.n	800802a <_malloc_r+0x1a>
 8008026:	42a9      	cmp	r1, r5
 8008028:	d903      	bls.n	8008032 <_malloc_r+0x22>
 800802a:	230c      	movs	r3, #12
 800802c:	6033      	str	r3, [r6, #0]
 800802e:	2000      	movs	r0, #0
 8008030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008032:	f000 fa8d 	bl	8008550 <__malloc_lock>
 8008036:	4921      	ldr	r1, [pc, #132]	; (80080bc <_malloc_r+0xac>)
 8008038:	680a      	ldr	r2, [r1, #0]
 800803a:	4614      	mov	r4, r2
 800803c:	b99c      	cbnz	r4, 8008066 <_malloc_r+0x56>
 800803e:	4f20      	ldr	r7, [pc, #128]	; (80080c0 <_malloc_r+0xb0>)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	b923      	cbnz	r3, 800804e <_malloc_r+0x3e>
 8008044:	4621      	mov	r1, r4
 8008046:	4630      	mov	r0, r6
 8008048:	f000 f996 	bl	8008378 <_sbrk_r>
 800804c:	6038      	str	r0, [r7, #0]
 800804e:	4629      	mov	r1, r5
 8008050:	4630      	mov	r0, r6
 8008052:	f000 f991 	bl	8008378 <_sbrk_r>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	d123      	bne.n	80080a2 <_malloc_r+0x92>
 800805a:	230c      	movs	r3, #12
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	4630      	mov	r0, r6
 8008060:	f000 fa7c 	bl	800855c <__malloc_unlock>
 8008064:	e7e3      	b.n	800802e <_malloc_r+0x1e>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	1b5b      	subs	r3, r3, r5
 800806a:	d417      	bmi.n	800809c <_malloc_r+0x8c>
 800806c:	2b0b      	cmp	r3, #11
 800806e:	d903      	bls.n	8008078 <_malloc_r+0x68>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	441c      	add	r4, r3
 8008074:	6025      	str	r5, [r4, #0]
 8008076:	e004      	b.n	8008082 <_malloc_r+0x72>
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	42a2      	cmp	r2, r4
 800807c:	bf0c      	ite	eq
 800807e:	600b      	streq	r3, [r1, #0]
 8008080:	6053      	strne	r3, [r2, #4]
 8008082:	4630      	mov	r0, r6
 8008084:	f000 fa6a 	bl	800855c <__malloc_unlock>
 8008088:	f104 000b 	add.w	r0, r4, #11
 800808c:	1d23      	adds	r3, r4, #4
 800808e:	f020 0007 	bic.w	r0, r0, #7
 8008092:	1ac2      	subs	r2, r0, r3
 8008094:	d0cc      	beq.n	8008030 <_malloc_r+0x20>
 8008096:	1a1b      	subs	r3, r3, r0
 8008098:	50a3      	str	r3, [r4, r2]
 800809a:	e7c9      	b.n	8008030 <_malloc_r+0x20>
 800809c:	4622      	mov	r2, r4
 800809e:	6864      	ldr	r4, [r4, #4]
 80080a0:	e7cc      	b.n	800803c <_malloc_r+0x2c>
 80080a2:	1cc4      	adds	r4, r0, #3
 80080a4:	f024 0403 	bic.w	r4, r4, #3
 80080a8:	42a0      	cmp	r0, r4
 80080aa:	d0e3      	beq.n	8008074 <_malloc_r+0x64>
 80080ac:	1a21      	subs	r1, r4, r0
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 f962 	bl	8008378 <_sbrk_r>
 80080b4:	3001      	adds	r0, #1
 80080b6:	d1dd      	bne.n	8008074 <_malloc_r+0x64>
 80080b8:	e7cf      	b.n	800805a <_malloc_r+0x4a>
 80080ba:	bf00      	nop
 80080bc:	20000294 	.word	0x20000294
 80080c0:	20000298 	.word	0x20000298

080080c4 <__sfputc_r>:
 80080c4:	6893      	ldr	r3, [r2, #8]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	b410      	push	{r4}
 80080cc:	6093      	str	r3, [r2, #8]
 80080ce:	da08      	bge.n	80080e2 <__sfputc_r+0x1e>
 80080d0:	6994      	ldr	r4, [r2, #24]
 80080d2:	42a3      	cmp	r3, r4
 80080d4:	db01      	blt.n	80080da <__sfputc_r+0x16>
 80080d6:	290a      	cmp	r1, #10
 80080d8:	d103      	bne.n	80080e2 <__sfputc_r+0x1e>
 80080da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080de:	f7fe ba45 	b.w	800656c <__swbuf_r>
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	1c58      	adds	r0, r3, #1
 80080e6:	6010      	str	r0, [r2, #0]
 80080e8:	7019      	strb	r1, [r3, #0]
 80080ea:	4608      	mov	r0, r1
 80080ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <__sfputs_r>:
 80080f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f4:	4606      	mov	r6, r0
 80080f6:	460f      	mov	r7, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	18d5      	adds	r5, r2, r3
 80080fc:	42ac      	cmp	r4, r5
 80080fe:	d101      	bne.n	8008104 <__sfputs_r+0x12>
 8008100:	2000      	movs	r0, #0
 8008102:	e007      	b.n	8008114 <__sfputs_r+0x22>
 8008104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008108:	463a      	mov	r2, r7
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff ffda 	bl	80080c4 <__sfputc_r>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d1f3      	bne.n	80080fc <__sfputs_r+0xa>
 8008114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008118 <_vfiprintf_r>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	460d      	mov	r5, r1
 800811e:	b09d      	sub	sp, #116	; 0x74
 8008120:	4614      	mov	r4, r2
 8008122:	4698      	mov	r8, r3
 8008124:	4606      	mov	r6, r0
 8008126:	b118      	cbz	r0, 8008130 <_vfiprintf_r+0x18>
 8008128:	6983      	ldr	r3, [r0, #24]
 800812a:	b90b      	cbnz	r3, 8008130 <_vfiprintf_r+0x18>
 800812c:	f7ff fa72 	bl	8007614 <__sinit>
 8008130:	4b89      	ldr	r3, [pc, #548]	; (8008358 <_vfiprintf_r+0x240>)
 8008132:	429d      	cmp	r5, r3
 8008134:	d11b      	bne.n	800816e <_vfiprintf_r+0x56>
 8008136:	6875      	ldr	r5, [r6, #4]
 8008138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813a:	07d9      	lsls	r1, r3, #31
 800813c:	d405      	bmi.n	800814a <_vfiprintf_r+0x32>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	059a      	lsls	r2, r3, #22
 8008142:	d402      	bmi.n	800814a <_vfiprintf_r+0x32>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f7ff fb08 	bl	800775a <__retarget_lock_acquire_recursive>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	071b      	lsls	r3, r3, #28
 800814e:	d501      	bpl.n	8008154 <_vfiprintf_r+0x3c>
 8008150:	692b      	ldr	r3, [r5, #16]
 8008152:	b9eb      	cbnz	r3, 8008190 <_vfiprintf_r+0x78>
 8008154:	4629      	mov	r1, r5
 8008156:	4630      	mov	r0, r6
 8008158:	f7fe fa5a 	bl	8006610 <__swsetup_r>
 800815c:	b1c0      	cbz	r0, 8008190 <_vfiprintf_r+0x78>
 800815e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008160:	07dc      	lsls	r4, r3, #31
 8008162:	d50e      	bpl.n	8008182 <_vfiprintf_r+0x6a>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	b01d      	add	sp, #116	; 0x74
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	4b7b      	ldr	r3, [pc, #492]	; (800835c <_vfiprintf_r+0x244>)
 8008170:	429d      	cmp	r5, r3
 8008172:	d101      	bne.n	8008178 <_vfiprintf_r+0x60>
 8008174:	68b5      	ldr	r5, [r6, #8]
 8008176:	e7df      	b.n	8008138 <_vfiprintf_r+0x20>
 8008178:	4b79      	ldr	r3, [pc, #484]	; (8008360 <_vfiprintf_r+0x248>)
 800817a:	429d      	cmp	r5, r3
 800817c:	bf08      	it	eq
 800817e:	68f5      	ldreq	r5, [r6, #12]
 8008180:	e7da      	b.n	8008138 <_vfiprintf_r+0x20>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	0598      	lsls	r0, r3, #22
 8008186:	d4ed      	bmi.n	8008164 <_vfiprintf_r+0x4c>
 8008188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800818a:	f7ff fae7 	bl	800775c <__retarget_lock_release_recursive>
 800818e:	e7e9      	b.n	8008164 <_vfiprintf_r+0x4c>
 8008190:	2300      	movs	r3, #0
 8008192:	9309      	str	r3, [sp, #36]	; 0x24
 8008194:	2320      	movs	r3, #32
 8008196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800819a:	f8cd 800c 	str.w	r8, [sp, #12]
 800819e:	2330      	movs	r3, #48	; 0x30
 80081a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008364 <_vfiprintf_r+0x24c>
 80081a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a8:	f04f 0901 	mov.w	r9, #1
 80081ac:	4623      	mov	r3, r4
 80081ae:	469a      	mov	sl, r3
 80081b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b4:	b10a      	cbz	r2, 80081ba <_vfiprintf_r+0xa2>
 80081b6:	2a25      	cmp	r2, #37	; 0x25
 80081b8:	d1f9      	bne.n	80081ae <_vfiprintf_r+0x96>
 80081ba:	ebba 0b04 	subs.w	fp, sl, r4
 80081be:	d00b      	beq.n	80081d8 <_vfiprintf_r+0xc0>
 80081c0:	465b      	mov	r3, fp
 80081c2:	4622      	mov	r2, r4
 80081c4:	4629      	mov	r1, r5
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ff93 	bl	80080f2 <__sfputs_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	f000 80aa 	beq.w	8008326 <_vfiprintf_r+0x20e>
 80081d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d4:	445a      	add	r2, fp
 80081d6:	9209      	str	r2, [sp, #36]	; 0x24
 80081d8:	f89a 3000 	ldrb.w	r3, [sl]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80a2 	beq.w	8008326 <_vfiprintf_r+0x20e>
 80081e2:	2300      	movs	r3, #0
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ec:	f10a 0a01 	add.w	sl, sl, #1
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f8:	931a      	str	r3, [sp, #104]	; 0x68
 80081fa:	4654      	mov	r4, sl
 80081fc:	2205      	movs	r2, #5
 80081fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008202:	4858      	ldr	r0, [pc, #352]	; (8008364 <_vfiprintf_r+0x24c>)
 8008204:	f7f8 f80c 	bl	8000220 <memchr>
 8008208:	9a04      	ldr	r2, [sp, #16]
 800820a:	b9d8      	cbnz	r0, 8008244 <_vfiprintf_r+0x12c>
 800820c:	06d1      	lsls	r1, r2, #27
 800820e:	bf44      	itt	mi
 8008210:	2320      	movmi	r3, #32
 8008212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008216:	0713      	lsls	r3, r2, #28
 8008218:	bf44      	itt	mi
 800821a:	232b      	movmi	r3, #43	; 0x2b
 800821c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008220:	f89a 3000 	ldrb.w	r3, [sl]
 8008224:	2b2a      	cmp	r3, #42	; 0x2a
 8008226:	d015      	beq.n	8008254 <_vfiprintf_r+0x13c>
 8008228:	9a07      	ldr	r2, [sp, #28]
 800822a:	4654      	mov	r4, sl
 800822c:	2000      	movs	r0, #0
 800822e:	f04f 0c0a 	mov.w	ip, #10
 8008232:	4621      	mov	r1, r4
 8008234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008238:	3b30      	subs	r3, #48	; 0x30
 800823a:	2b09      	cmp	r3, #9
 800823c:	d94e      	bls.n	80082dc <_vfiprintf_r+0x1c4>
 800823e:	b1b0      	cbz	r0, 800826e <_vfiprintf_r+0x156>
 8008240:	9207      	str	r2, [sp, #28]
 8008242:	e014      	b.n	800826e <_vfiprintf_r+0x156>
 8008244:	eba0 0308 	sub.w	r3, r0, r8
 8008248:	fa09 f303 	lsl.w	r3, r9, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	46a2      	mov	sl, r4
 8008252:	e7d2      	b.n	80081fa <_vfiprintf_r+0xe2>
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	1d19      	adds	r1, r3, #4
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	9103      	str	r1, [sp, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	bfbb      	ittet	lt
 8008260:	425b      	neglt	r3, r3
 8008262:	f042 0202 	orrlt.w	r2, r2, #2
 8008266:	9307      	strge	r3, [sp, #28]
 8008268:	9307      	strlt	r3, [sp, #28]
 800826a:	bfb8      	it	lt
 800826c:	9204      	strlt	r2, [sp, #16]
 800826e:	7823      	ldrb	r3, [r4, #0]
 8008270:	2b2e      	cmp	r3, #46	; 0x2e
 8008272:	d10c      	bne.n	800828e <_vfiprintf_r+0x176>
 8008274:	7863      	ldrb	r3, [r4, #1]
 8008276:	2b2a      	cmp	r3, #42	; 0x2a
 8008278:	d135      	bne.n	80082e6 <_vfiprintf_r+0x1ce>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	9203      	str	r2, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfb8      	it	lt
 8008286:	f04f 33ff 	movlt.w	r3, #4294967295
 800828a:	3402      	adds	r4, #2
 800828c:	9305      	str	r3, [sp, #20]
 800828e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008374 <_vfiprintf_r+0x25c>
 8008292:	7821      	ldrb	r1, [r4, #0]
 8008294:	2203      	movs	r2, #3
 8008296:	4650      	mov	r0, sl
 8008298:	f7f7 ffc2 	bl	8000220 <memchr>
 800829c:	b140      	cbz	r0, 80082b0 <_vfiprintf_r+0x198>
 800829e:	2340      	movs	r3, #64	; 0x40
 80082a0:	eba0 000a 	sub.w	r0, r0, sl
 80082a4:	fa03 f000 	lsl.w	r0, r3, r0
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	4303      	orrs	r3, r0
 80082ac:	3401      	adds	r4, #1
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	482c      	ldr	r0, [pc, #176]	; (8008368 <_vfiprintf_r+0x250>)
 80082b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ba:	2206      	movs	r2, #6
 80082bc:	f7f7 ffb0 	bl	8000220 <memchr>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d03f      	beq.n	8008344 <_vfiprintf_r+0x22c>
 80082c4:	4b29      	ldr	r3, [pc, #164]	; (800836c <_vfiprintf_r+0x254>)
 80082c6:	bb1b      	cbnz	r3, 8008310 <_vfiprintf_r+0x1f8>
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	3307      	adds	r3, #7
 80082cc:	f023 0307 	bic.w	r3, r3, #7
 80082d0:	3308      	adds	r3, #8
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	443b      	add	r3, r7
 80082d8:	9309      	str	r3, [sp, #36]	; 0x24
 80082da:	e767      	b.n	80081ac <_vfiprintf_r+0x94>
 80082dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e0:	460c      	mov	r4, r1
 80082e2:	2001      	movs	r0, #1
 80082e4:	e7a5      	b.n	8008232 <_vfiprintf_r+0x11a>
 80082e6:	2300      	movs	r3, #0
 80082e8:	3401      	adds	r4, #1
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	4619      	mov	r1, r3
 80082ee:	f04f 0c0a 	mov.w	ip, #10
 80082f2:	4620      	mov	r0, r4
 80082f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f8:	3a30      	subs	r2, #48	; 0x30
 80082fa:	2a09      	cmp	r2, #9
 80082fc:	d903      	bls.n	8008306 <_vfiprintf_r+0x1ee>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0c5      	beq.n	800828e <_vfiprintf_r+0x176>
 8008302:	9105      	str	r1, [sp, #20]
 8008304:	e7c3      	b.n	800828e <_vfiprintf_r+0x176>
 8008306:	fb0c 2101 	mla	r1, ip, r1, r2
 800830a:	4604      	mov	r4, r0
 800830c:	2301      	movs	r3, #1
 800830e:	e7f0      	b.n	80082f2 <_vfiprintf_r+0x1da>
 8008310:	ab03      	add	r3, sp, #12
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	462a      	mov	r2, r5
 8008316:	4b16      	ldr	r3, [pc, #88]	; (8008370 <_vfiprintf_r+0x258>)
 8008318:	a904      	add	r1, sp, #16
 800831a:	4630      	mov	r0, r6
 800831c:	f7fd fc00 	bl	8005b20 <_printf_float>
 8008320:	4607      	mov	r7, r0
 8008322:	1c78      	adds	r0, r7, #1
 8008324:	d1d6      	bne.n	80082d4 <_vfiprintf_r+0x1bc>
 8008326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008328:	07d9      	lsls	r1, r3, #31
 800832a:	d405      	bmi.n	8008338 <_vfiprintf_r+0x220>
 800832c:	89ab      	ldrh	r3, [r5, #12]
 800832e:	059a      	lsls	r2, r3, #22
 8008330:	d402      	bmi.n	8008338 <_vfiprintf_r+0x220>
 8008332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008334:	f7ff fa12 	bl	800775c <__retarget_lock_release_recursive>
 8008338:	89ab      	ldrh	r3, [r5, #12]
 800833a:	065b      	lsls	r3, r3, #25
 800833c:	f53f af12 	bmi.w	8008164 <_vfiprintf_r+0x4c>
 8008340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008342:	e711      	b.n	8008168 <_vfiprintf_r+0x50>
 8008344:	ab03      	add	r3, sp, #12
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	462a      	mov	r2, r5
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <_vfiprintf_r+0x258>)
 800834c:	a904      	add	r1, sp, #16
 800834e:	4630      	mov	r0, r6
 8008350:	f7fd fe8a 	bl	8006068 <_printf_i>
 8008354:	e7e4      	b.n	8008320 <_vfiprintf_r+0x208>
 8008356:	bf00      	nop
 8008358:	0800896c 	.word	0x0800896c
 800835c:	0800898c 	.word	0x0800898c
 8008360:	0800894c 	.word	0x0800894c
 8008364:	08008b0c 	.word	0x08008b0c
 8008368:	08008b16 	.word	0x08008b16
 800836c:	08005b21 	.word	0x08005b21
 8008370:	080080f3 	.word	0x080080f3
 8008374:	08008b12 	.word	0x08008b12

08008378 <_sbrk_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d06      	ldr	r5, [pc, #24]	; (8008394 <_sbrk_r+0x1c>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	f7f9 fe32 	bl	8001fec <_sbrk>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_sbrk_r+0x1a>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_sbrk_r+0x1a>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20000398 	.word	0x20000398

08008398 <__sread>:
 8008398:	b510      	push	{r4, lr}
 800839a:	460c      	mov	r4, r1
 800839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a0:	f000 f8e2 	bl	8008568 <_read_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	bfab      	itete	ge
 80083a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083aa:	89a3      	ldrhlt	r3, [r4, #12]
 80083ac:	181b      	addge	r3, r3, r0
 80083ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083b2:	bfac      	ite	ge
 80083b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80083b6:	81a3      	strhlt	r3, [r4, #12]
 80083b8:	bd10      	pop	{r4, pc}

080083ba <__swrite>:
 80083ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083be:	461f      	mov	r7, r3
 80083c0:	898b      	ldrh	r3, [r1, #12]
 80083c2:	05db      	lsls	r3, r3, #23
 80083c4:	4605      	mov	r5, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	4616      	mov	r6, r2
 80083ca:	d505      	bpl.n	80083d8 <__swrite+0x1e>
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	2302      	movs	r3, #2
 80083d2:	2200      	movs	r2, #0
 80083d4:	f000 f898 	bl	8008508 <_lseek_r>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	4632      	mov	r2, r6
 80083e6:	463b      	mov	r3, r7
 80083e8:	4628      	mov	r0, r5
 80083ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ee:	f000 b817 	b.w	8008420 <_write_r>

080083f2 <__sseek>:
 80083f2:	b510      	push	{r4, lr}
 80083f4:	460c      	mov	r4, r1
 80083f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fa:	f000 f885 	bl	8008508 <_lseek_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	bf15      	itete	ne
 8008404:	6560      	strne	r0, [r4, #84]	; 0x54
 8008406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800840a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800840e:	81a3      	strheq	r3, [r4, #12]
 8008410:	bf18      	it	ne
 8008412:	81a3      	strhne	r3, [r4, #12]
 8008414:	bd10      	pop	{r4, pc}

08008416 <__sclose>:
 8008416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841a:	f000 b831 	b.w	8008480 <_close_r>
	...

08008420 <_write_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	; (8008440 <_write_r+0x20>)
 8008424:	4604      	mov	r4, r0
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	2200      	movs	r2, #0
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	f7f9 fbea 	bl	8001c08 <_write>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_write_r+0x1e>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_write_r+0x1e>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	20000398 	.word	0x20000398

08008444 <__assert_func>:
 8008444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008446:	4614      	mov	r4, r2
 8008448:	461a      	mov	r2, r3
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <__assert_func+0x2c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4605      	mov	r5, r0
 8008450:	68d8      	ldr	r0, [r3, #12]
 8008452:	b14c      	cbz	r4, 8008468 <__assert_func+0x24>
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <__assert_func+0x30>)
 8008456:	9100      	str	r1, [sp, #0]
 8008458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800845c:	4906      	ldr	r1, [pc, #24]	; (8008478 <__assert_func+0x34>)
 800845e:	462b      	mov	r3, r5
 8008460:	f000 f81e 	bl	80084a0 <fiprintf>
 8008464:	f000 f89f 	bl	80085a6 <abort>
 8008468:	4b04      	ldr	r3, [pc, #16]	; (800847c <__assert_func+0x38>)
 800846a:	461c      	mov	r4, r3
 800846c:	e7f3      	b.n	8008456 <__assert_func+0x12>
 800846e:	bf00      	nop
 8008470:	2000003c 	.word	0x2000003c
 8008474:	08008b1d 	.word	0x08008b1d
 8008478:	08008b2a 	.word	0x08008b2a
 800847c:	08008b58 	.word	0x08008b58

08008480 <_close_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	; (800849c <_close_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 fd79 	bl	8001f82 <_close>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_close_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_close_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000398 	.word	0x20000398

080084a0 <fiprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b503      	push	{r0, r1, lr}
 80084a4:	4601      	mov	r1, r0
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <fiprintf+0x20>)
 80084aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f7ff fe31 	bl	8008118 <_vfiprintf_r>
 80084b6:	b002      	add	sp, #8
 80084b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084bc:	b003      	add	sp, #12
 80084be:	4770      	bx	lr
 80084c0:	2000003c 	.word	0x2000003c

080084c4 <_fstat_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d07      	ldr	r5, [pc, #28]	; (80084e4 <_fstat_r+0x20>)
 80084c8:	2300      	movs	r3, #0
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	f7f9 fd62 	bl	8001f9a <_fstat>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	d102      	bne.n	80084e0 <_fstat_r+0x1c>
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	b103      	cbz	r3, 80084e0 <_fstat_r+0x1c>
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	20000398 	.word	0x20000398

080084e8 <_isatty_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d06      	ldr	r5, [pc, #24]	; (8008504 <_isatty_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7f9 fd61 	bl	8001fba <_isatty>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_isatty_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_isatty_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	20000398 	.word	0x20000398

08008508 <_lseek_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d07      	ldr	r5, [pc, #28]	; (8008528 <_lseek_r+0x20>)
 800850c:	4604      	mov	r4, r0
 800850e:	4608      	mov	r0, r1
 8008510:	4611      	mov	r1, r2
 8008512:	2200      	movs	r2, #0
 8008514:	602a      	str	r2, [r5, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	f7f9 fd5a 	bl	8001fd0 <_lseek>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <_lseek_r+0x1e>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	b103      	cbz	r3, 8008526 <_lseek_r+0x1e>
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	20000398 	.word	0x20000398

0800852c <__ascii_mbtowc>:
 800852c:	b082      	sub	sp, #8
 800852e:	b901      	cbnz	r1, 8008532 <__ascii_mbtowc+0x6>
 8008530:	a901      	add	r1, sp, #4
 8008532:	b142      	cbz	r2, 8008546 <__ascii_mbtowc+0x1a>
 8008534:	b14b      	cbz	r3, 800854a <__ascii_mbtowc+0x1e>
 8008536:	7813      	ldrb	r3, [r2, #0]
 8008538:	600b      	str	r3, [r1, #0]
 800853a:	7812      	ldrb	r2, [r2, #0]
 800853c:	1e10      	subs	r0, r2, #0
 800853e:	bf18      	it	ne
 8008540:	2001      	movne	r0, #1
 8008542:	b002      	add	sp, #8
 8008544:	4770      	bx	lr
 8008546:	4610      	mov	r0, r2
 8008548:	e7fb      	b.n	8008542 <__ascii_mbtowc+0x16>
 800854a:	f06f 0001 	mvn.w	r0, #1
 800854e:	e7f8      	b.n	8008542 <__ascii_mbtowc+0x16>

08008550 <__malloc_lock>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__malloc_lock+0x8>)
 8008552:	f7ff b902 	b.w	800775a <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	20000390 	.word	0x20000390

0800855c <__malloc_unlock>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__malloc_unlock+0x8>)
 800855e:	f7ff b8fd 	b.w	800775c <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	20000390 	.word	0x20000390

08008568 <_read_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	; (8008588 <_read_r+0x20>)
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f9 fce6 	bl	8001f48 <_read>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_read_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_read_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20000398 	.word	0x20000398

0800858c <__ascii_wctomb>:
 800858c:	b149      	cbz	r1, 80085a2 <__ascii_wctomb+0x16>
 800858e:	2aff      	cmp	r2, #255	; 0xff
 8008590:	bf85      	ittet	hi
 8008592:	238a      	movhi	r3, #138	; 0x8a
 8008594:	6003      	strhi	r3, [r0, #0]
 8008596:	700a      	strbls	r2, [r1, #0]
 8008598:	f04f 30ff 	movhi.w	r0, #4294967295
 800859c:	bf98      	it	ls
 800859e:	2001      	movls	r0, #1
 80085a0:	4770      	bx	lr
 80085a2:	4608      	mov	r0, r1
 80085a4:	4770      	bx	lr

080085a6 <abort>:
 80085a6:	b508      	push	{r3, lr}
 80085a8:	2006      	movs	r0, #6
 80085aa:	f000 f82b 	bl	8008604 <raise>
 80085ae:	2001      	movs	r0, #1
 80085b0:	f7f9 fcc0 	bl	8001f34 <_exit>

080085b4 <_raise_r>:
 80085b4:	291f      	cmp	r1, #31
 80085b6:	b538      	push	{r3, r4, r5, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	460d      	mov	r5, r1
 80085bc:	d904      	bls.n	80085c8 <_raise_r+0x14>
 80085be:	2316      	movs	r3, #22
 80085c0:	6003      	str	r3, [r0, #0]
 80085c2:	f04f 30ff 	mov.w	r0, #4294967295
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085ca:	b112      	cbz	r2, 80085d2 <_raise_r+0x1e>
 80085cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085d0:	b94b      	cbnz	r3, 80085e6 <_raise_r+0x32>
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 f830 	bl	8008638 <_getpid_r>
 80085d8:	462a      	mov	r2, r5
 80085da:	4601      	mov	r1, r0
 80085dc:	4620      	mov	r0, r4
 80085de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085e2:	f000 b817 	b.w	8008614 <_kill_r>
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d00a      	beq.n	8008600 <_raise_r+0x4c>
 80085ea:	1c59      	adds	r1, r3, #1
 80085ec:	d103      	bne.n	80085f6 <_raise_r+0x42>
 80085ee:	2316      	movs	r3, #22
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	2001      	movs	r0, #1
 80085f4:	e7e7      	b.n	80085c6 <_raise_r+0x12>
 80085f6:	2400      	movs	r4, #0
 80085f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085fc:	4628      	mov	r0, r5
 80085fe:	4798      	blx	r3
 8008600:	2000      	movs	r0, #0
 8008602:	e7e0      	b.n	80085c6 <_raise_r+0x12>

08008604 <raise>:
 8008604:	4b02      	ldr	r3, [pc, #8]	; (8008610 <raise+0xc>)
 8008606:	4601      	mov	r1, r0
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	f7ff bfd3 	b.w	80085b4 <_raise_r>
 800860e:	bf00      	nop
 8008610:	2000003c 	.word	0x2000003c

08008614 <_kill_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d07      	ldr	r5, [pc, #28]	; (8008634 <_kill_r+0x20>)
 8008618:	2300      	movs	r3, #0
 800861a:	4604      	mov	r4, r0
 800861c:	4608      	mov	r0, r1
 800861e:	4611      	mov	r1, r2
 8008620:	602b      	str	r3, [r5, #0]
 8008622:	f7f9 fc77 	bl	8001f14 <_kill>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d102      	bne.n	8008630 <_kill_r+0x1c>
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	b103      	cbz	r3, 8008630 <_kill_r+0x1c>
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	bd38      	pop	{r3, r4, r5, pc}
 8008632:	bf00      	nop
 8008634:	20000398 	.word	0x20000398

08008638 <_getpid_r>:
 8008638:	f7f9 bc64 	b.w	8001f04 <_getpid>

0800863c <sqrt>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	ed2d 8b02 	vpush	{d8}
 8008642:	ec55 4b10 	vmov	r4, r5, d0
 8008646:	f000 f82d 	bl	80086a4 <__ieee754_sqrt>
 800864a:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <sqrt+0x64>)
 800864c:	eeb0 8a40 	vmov.f32	s16, s0
 8008650:	eef0 8a60 	vmov.f32	s17, s1
 8008654:	f993 3000 	ldrsb.w	r3, [r3]
 8008658:	3301      	adds	r3, #1
 800865a:	d019      	beq.n	8008690 <sqrt+0x54>
 800865c:	4622      	mov	r2, r4
 800865e:	462b      	mov	r3, r5
 8008660:	4620      	mov	r0, r4
 8008662:	4629      	mov	r1, r5
 8008664:	f7f8 fa82 	bl	8000b6c <__aeabi_dcmpun>
 8008668:	b990      	cbnz	r0, 8008690 <sqrt+0x54>
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 fa53 	bl	8000b1c <__aeabi_dcmplt>
 8008676:	b158      	cbz	r0, 8008690 <sqrt+0x54>
 8008678:	f7fd f980 	bl	800597c <__errno>
 800867c:	2321      	movs	r3, #33	; 0x21
 800867e:	6003      	str	r3, [r0, #0]
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	4610      	mov	r0, r2
 8008686:	4619      	mov	r1, r3
 8008688:	f7f8 f900 	bl	800088c <__aeabi_ddiv>
 800868c:	ec41 0b18 	vmov	d8, r0, r1
 8008690:	eeb0 0a48 	vmov.f32	s0, s16
 8008694:	eef0 0a68 	vmov.f32	s1, s17
 8008698:	ecbd 8b02 	vpop	{d8}
 800869c:	bd38      	pop	{r3, r4, r5, pc}
 800869e:	bf00      	nop
 80086a0:	2000020c 	.word	0x2000020c

080086a4 <__ieee754_sqrt>:
 80086a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a8:	ec55 4b10 	vmov	r4, r5, d0
 80086ac:	4e56      	ldr	r6, [pc, #344]	; (8008808 <__ieee754_sqrt+0x164>)
 80086ae:	43ae      	bics	r6, r5
 80086b0:	ee10 0a10 	vmov	r0, s0
 80086b4:	ee10 3a10 	vmov	r3, s0
 80086b8:	4629      	mov	r1, r5
 80086ba:	462a      	mov	r2, r5
 80086bc:	d110      	bne.n	80086e0 <__ieee754_sqrt+0x3c>
 80086be:	ee10 2a10 	vmov	r2, s0
 80086c2:	462b      	mov	r3, r5
 80086c4:	f7f7 ffb8 	bl	8000638 <__aeabi_dmul>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 fdfc 	bl	80002cc <__adddf3>
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	ec45 4b10 	vmov	d0, r4, r5
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	dc10      	bgt.n	8008706 <__ieee754_sqrt+0x62>
 80086e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086e8:	4330      	orrs	r0, r6
 80086ea:	d0f5      	beq.n	80086d8 <__ieee754_sqrt+0x34>
 80086ec:	b15d      	cbz	r5, 8008706 <__ieee754_sqrt+0x62>
 80086ee:	ee10 2a10 	vmov	r2, s0
 80086f2:	462b      	mov	r3, r5
 80086f4:	ee10 0a10 	vmov	r0, s0
 80086f8:	f7f7 fde6 	bl	80002c8 <__aeabi_dsub>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	f7f8 f8c4 	bl	800088c <__aeabi_ddiv>
 8008704:	e7e6      	b.n	80086d4 <__ieee754_sqrt+0x30>
 8008706:	1509      	asrs	r1, r1, #20
 8008708:	d076      	beq.n	80087f8 <__ieee754_sqrt+0x154>
 800870a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800870e:	07ce      	lsls	r6, r1, #31
 8008710:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008714:	bf5e      	ittt	pl
 8008716:	0fda      	lsrpl	r2, r3, #31
 8008718:	005b      	lslpl	r3, r3, #1
 800871a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800871e:	0fda      	lsrs	r2, r3, #31
 8008720:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008724:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008728:	2000      	movs	r0, #0
 800872a:	106d      	asrs	r5, r5, #1
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	f04f 0e16 	mov.w	lr, #22
 8008732:	4684      	mov	ip, r0
 8008734:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008738:	eb0c 0401 	add.w	r4, ip, r1
 800873c:	4294      	cmp	r4, r2
 800873e:	bfde      	ittt	le
 8008740:	1b12      	suble	r2, r2, r4
 8008742:	eb04 0c01 	addle.w	ip, r4, r1
 8008746:	1840      	addle	r0, r0, r1
 8008748:	0052      	lsls	r2, r2, #1
 800874a:	f1be 0e01 	subs.w	lr, lr, #1
 800874e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008752:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008756:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800875a:	d1ed      	bne.n	8008738 <__ieee754_sqrt+0x94>
 800875c:	4671      	mov	r1, lr
 800875e:	2720      	movs	r7, #32
 8008760:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008764:	4562      	cmp	r2, ip
 8008766:	eb04 060e 	add.w	r6, r4, lr
 800876a:	dc02      	bgt.n	8008772 <__ieee754_sqrt+0xce>
 800876c:	d113      	bne.n	8008796 <__ieee754_sqrt+0xf2>
 800876e:	429e      	cmp	r6, r3
 8008770:	d811      	bhi.n	8008796 <__ieee754_sqrt+0xf2>
 8008772:	2e00      	cmp	r6, #0
 8008774:	eb06 0e04 	add.w	lr, r6, r4
 8008778:	da43      	bge.n	8008802 <__ieee754_sqrt+0x15e>
 800877a:	f1be 0f00 	cmp.w	lr, #0
 800877e:	db40      	blt.n	8008802 <__ieee754_sqrt+0x15e>
 8008780:	f10c 0801 	add.w	r8, ip, #1
 8008784:	eba2 020c 	sub.w	r2, r2, ip
 8008788:	429e      	cmp	r6, r3
 800878a:	bf88      	it	hi
 800878c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008790:	1b9b      	subs	r3, r3, r6
 8008792:	4421      	add	r1, r4
 8008794:	46c4      	mov	ip, r8
 8008796:	0052      	lsls	r2, r2, #1
 8008798:	3f01      	subs	r7, #1
 800879a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800879e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80087a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087a6:	d1dd      	bne.n	8008764 <__ieee754_sqrt+0xc0>
 80087a8:	4313      	orrs	r3, r2
 80087aa:	d006      	beq.n	80087ba <__ieee754_sqrt+0x116>
 80087ac:	1c4c      	adds	r4, r1, #1
 80087ae:	bf13      	iteet	ne
 80087b0:	3101      	addne	r1, #1
 80087b2:	3001      	addeq	r0, #1
 80087b4:	4639      	moveq	r1, r7
 80087b6:	f021 0101 	bicne.w	r1, r1, #1
 80087ba:	1043      	asrs	r3, r0, #1
 80087bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80087c0:	0849      	lsrs	r1, r1, #1
 80087c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80087c6:	07c2      	lsls	r2, r0, #31
 80087c8:	bf48      	it	mi
 80087ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80087ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80087d2:	460c      	mov	r4, r1
 80087d4:	463d      	mov	r5, r7
 80087d6:	e77f      	b.n	80086d8 <__ieee754_sqrt+0x34>
 80087d8:	0ada      	lsrs	r2, r3, #11
 80087da:	3815      	subs	r0, #21
 80087dc:	055b      	lsls	r3, r3, #21
 80087de:	2a00      	cmp	r2, #0
 80087e0:	d0fa      	beq.n	80087d8 <__ieee754_sqrt+0x134>
 80087e2:	02d7      	lsls	r7, r2, #11
 80087e4:	d50a      	bpl.n	80087fc <__ieee754_sqrt+0x158>
 80087e6:	f1c1 0420 	rsb	r4, r1, #32
 80087ea:	fa23 f404 	lsr.w	r4, r3, r4
 80087ee:	1e4d      	subs	r5, r1, #1
 80087f0:	408b      	lsls	r3, r1
 80087f2:	4322      	orrs	r2, r4
 80087f4:	1b41      	subs	r1, r0, r5
 80087f6:	e788      	b.n	800870a <__ieee754_sqrt+0x66>
 80087f8:	4608      	mov	r0, r1
 80087fa:	e7f0      	b.n	80087de <__ieee754_sqrt+0x13a>
 80087fc:	0052      	lsls	r2, r2, #1
 80087fe:	3101      	adds	r1, #1
 8008800:	e7ef      	b.n	80087e2 <__ieee754_sqrt+0x13e>
 8008802:	46e0      	mov	r8, ip
 8008804:	e7be      	b.n	8008784 <__ieee754_sqrt+0xe0>
 8008806:	bf00      	nop
 8008808:	7ff00000 	.word	0x7ff00000

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
